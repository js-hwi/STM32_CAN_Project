
KostaCanProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000378c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d9c  0800389c  0800389c  0000489c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004638  08004638  00006064  2**0
                  CONTENTS
  4 .ARM          00000000  08004638  08004638  00006064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004638  08004638  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004638  08004638  00005638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800463c  0800463c  0000563c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004640  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000724  20000064  080046a4  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  080046a4  00006788  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d64  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ca  00000000  00000000  00017df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  0001aec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dca  00000000  00000000  0001c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1a7  00000000  00000000  0001ce5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001634f  00000000  00000000  00037001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094ec7  00000000  00000000  0004d350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2217  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aa4  00000000  00000000  000e225c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e6d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08003884 	.word	0x08003884

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08003884 	.word	0x08003884

08000150 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000154:	4b17      	ldr	r3, [pc, #92]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000156:	4a18      	ldr	r2, [pc, #96]	@ (80001b8 <MX_CAN_Init+0x68>)
 8000158:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800015a:	4b16      	ldr	r3, [pc, #88]	@ (80001b4 <MX_CAN_Init+0x64>)
 800015c:	2209      	movs	r2, #9
 800015e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000160:	4b14      	ldr	r3, [pc, #80]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000162:	2200      	movs	r2, #0
 8000164:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000166:	4b13      	ldr	r3, [pc, #76]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000168:	2200      	movs	r2, #0
 800016a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 800016c:	4b11      	ldr	r3, [pc, #68]	@ (80001b4 <MX_CAN_Init+0x64>)
 800016e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000172:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000174:	4b0f      	ldr	r3, [pc, #60]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000176:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800017a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017c:	4b0d      	ldr	r3, [pc, #52]	@ (80001b4 <MX_CAN_Init+0x64>)
 800017e:	2200      	movs	r2, #0
 8000180:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000182:	4b0c      	ldr	r3, [pc, #48]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000184:	2200      	movs	r2, #0
 8000186:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000188:	4b0a      	ldr	r3, [pc, #40]	@ (80001b4 <MX_CAN_Init+0x64>)
 800018a:	2200      	movs	r2, #0
 800018c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018e:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000190:	2200      	movs	r2, #0
 8000192:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000194:	4b07      	ldr	r3, [pc, #28]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000196:	2200      	movs	r2, #0
 8000198:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800019a:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <MX_CAN_Init+0x64>)
 800019c:	2200      	movs	r2, #0
 800019e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <MX_CAN_Init+0x64>)
 80001a2:	f000 fe4f 	bl	8000e44 <HAL_CAN_Init>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001ac:	f000 fa48 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000080 	.word	0x20000080
 80001b8:	40006400 	.word	0x40006400

080001bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	f107 0310 	add.w	r3, r7, #16
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a20      	ldr	r2, [pc, #128]	@ (8000258 <HAL_CAN_MspInit+0x9c>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d139      	bne.n	8000250 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001dc:	4b1f      	ldr	r3, [pc, #124]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001de:	69db      	ldr	r3, [r3, #28]
 80001e0:	4a1e      	ldr	r2, [pc, #120]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001e6:	61d3      	str	r3, [r2, #28]
 80001e8:	4b1c      	ldr	r3, [pc, #112]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001ea:	69db      	ldr	r3, [r3, #28]
 80001ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f4:	4b19      	ldr	r3, [pc, #100]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a18      	ldr	r2, [pc, #96]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001fa:	f043 0304 	orr.w	r3, r3, #4
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b16      	ldr	r3, [pc, #88]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0304 	and.w	r3, r3, #4
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800020c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000210:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	4619      	mov	r1, r3
 8000220:	480f      	ldr	r0, [pc, #60]	@ (8000260 <HAL_CAN_MspInit+0xa4>)
 8000222:	f001 fb2f 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800022a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800022c:	2302      	movs	r3, #2
 800022e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000230:	2303      	movs	r3, #3
 8000232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	4619      	mov	r1, r3
 800023a:	4809      	ldr	r0, [pc, #36]	@ (8000260 <HAL_CAN_MspInit+0xa4>)
 800023c:	f001 fb22 	bl	8001884 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000240:	2200      	movs	r2, #0
 8000242:	2105      	movs	r1, #5
 8000244:	2014      	movs	r0, #20
 8000246:	f001 faf2 	bl	800182e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800024a:	2014      	movs	r0, #20
 800024c:	f001 fb0b 	bl	8001866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000250:	bf00      	nop
 8000252:	3720      	adds	r7, #32
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40006400 	.word	0x40006400
 800025c:	40021000 	.word	0x40021000
 8000260:	40010800 	.word	0x40010800

08000264 <FND_INIT>:
#include "stm32f103xb.h"

uint8_t _LED_0F[29];
uint32_t n = 0; //hwi

void FND_INIT(){
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
		_LED_0F[0] = 0xC0; //0
 8000268:	4b2d      	ldr	r3, [pc, #180]	@ (8000320 <FND_INIT+0xbc>)
 800026a:	22c0      	movs	r2, #192	@ 0xc0
 800026c:	701a      	strb	r2, [r3, #0]
		_LED_0F[1] = 0xF9; //1
 800026e:	4b2c      	ldr	r3, [pc, #176]	@ (8000320 <FND_INIT+0xbc>)
 8000270:	22f9      	movs	r2, #249	@ 0xf9
 8000272:	705a      	strb	r2, [r3, #1]
		_LED_0F[2] = 0xA4; //2
 8000274:	4b2a      	ldr	r3, [pc, #168]	@ (8000320 <FND_INIT+0xbc>)
 8000276:	22a4      	movs	r2, #164	@ 0xa4
 8000278:	709a      	strb	r2, [r3, #2]
		_LED_0F[3] = 0xB0; //3
 800027a:	4b29      	ldr	r3, [pc, #164]	@ (8000320 <FND_INIT+0xbc>)
 800027c:	22b0      	movs	r2, #176	@ 0xb0
 800027e:	70da      	strb	r2, [r3, #3]
		_LED_0F[4] = 0x99; //4
 8000280:	4b27      	ldr	r3, [pc, #156]	@ (8000320 <FND_INIT+0xbc>)
 8000282:	2299      	movs	r2, #153	@ 0x99
 8000284:	711a      	strb	r2, [r3, #4]
		_LED_0F[5] = 0x92; //5
 8000286:	4b26      	ldr	r3, [pc, #152]	@ (8000320 <FND_INIT+0xbc>)
 8000288:	2292      	movs	r2, #146	@ 0x92
 800028a:	715a      	strb	r2, [r3, #5]
		_LED_0F[6] = 0x82; //6
 800028c:	4b24      	ldr	r3, [pc, #144]	@ (8000320 <FND_INIT+0xbc>)
 800028e:	2282      	movs	r2, #130	@ 0x82
 8000290:	719a      	strb	r2, [r3, #6]
		_LED_0F[7] = 0xF8; //7
 8000292:	4b23      	ldr	r3, [pc, #140]	@ (8000320 <FND_INIT+0xbc>)
 8000294:	22f8      	movs	r2, #248	@ 0xf8
 8000296:	71da      	strb	r2, [r3, #7]
		_LED_0F[8] = 0x80; //8
 8000298:	4b21      	ldr	r3, [pc, #132]	@ (8000320 <FND_INIT+0xbc>)
 800029a:	2280      	movs	r2, #128	@ 0x80
 800029c:	721a      	strb	r2, [r3, #8]
		_LED_0F[9] = 0x90; //9
 800029e:	4b20      	ldr	r3, [pc, #128]	@ (8000320 <FND_INIT+0xbc>)
 80002a0:	2290      	movs	r2, #144	@ 0x90
 80002a2:	725a      	strb	r2, [r3, #9]
		_LED_0F[10] = 0x88; //A
 80002a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000320 <FND_INIT+0xbc>)
 80002a6:	2288      	movs	r2, #136	@ 0x88
 80002a8:	729a      	strb	r2, [r3, #10]
		_LED_0F[11] = 0x83; //b
 80002aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000320 <FND_INIT+0xbc>)
 80002ac:	2283      	movs	r2, #131	@ 0x83
 80002ae:	72da      	strb	r2, [r3, #11]
		_LED_0F[12] = 0xC6; //C
 80002b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000320 <FND_INIT+0xbc>)
 80002b2:	22c6      	movs	r2, #198	@ 0xc6
 80002b4:	731a      	strb	r2, [r3, #12]
		_LED_0F[13] = 0xA1; //d
 80002b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000320 <FND_INIT+0xbc>)
 80002b8:	22a1      	movs	r2, #161	@ 0xa1
 80002ba:	735a      	strb	r2, [r3, #13]
		_LED_0F[14] = 0x86; //E
 80002bc:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <FND_INIT+0xbc>)
 80002be:	2286      	movs	r2, #134	@ 0x86
 80002c0:	739a      	strb	r2, [r3, #14]
		_LED_0F[15] = 0x8E; //F
 80002c2:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <FND_INIT+0xbc>)
 80002c4:	228e      	movs	r2, #142	@ 0x8e
 80002c6:	73da      	strb	r2, [r3, #15]
		_LED_0F[16] = 0xC2; //G
 80002c8:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <FND_INIT+0xbc>)
 80002ca:	22c2      	movs	r2, #194	@ 0xc2
 80002cc:	741a      	strb	r2, [r3, #16]
		_LED_0F[17] = 0x89; //H
 80002ce:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <FND_INIT+0xbc>)
 80002d0:	2289      	movs	r2, #137	@ 0x89
 80002d2:	745a      	strb	r2, [r3, #17]
		_LED_0F[18] = 0xF9; //I
 80002d4:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <FND_INIT+0xbc>)
 80002d6:	22f9      	movs	r2, #249	@ 0xf9
 80002d8:	749a      	strb	r2, [r3, #18]
		_LED_0F[19] = 0xF1; //J
 80002da:	4b11      	ldr	r3, [pc, #68]	@ (8000320 <FND_INIT+0xbc>)
 80002dc:	22f1      	movs	r2, #241	@ 0xf1
 80002de:	74da      	strb	r2, [r3, #19]
		_LED_0F[20] = 0xC3; //L
 80002e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <FND_INIT+0xbc>)
 80002e2:	22c3      	movs	r2, #195	@ 0xc3
 80002e4:	751a      	strb	r2, [r3, #20]
		_LED_0F[21] = 0xA9; //n
 80002e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <FND_INIT+0xbc>)
 80002e8:	22a9      	movs	r2, #169	@ 0xa9
 80002ea:	755a      	strb	r2, [r3, #21]
		_LED_0F[22] = 0xC0; //O
 80002ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <FND_INIT+0xbc>)
 80002ee:	22c0      	movs	r2, #192	@ 0xc0
 80002f0:	759a      	strb	r2, [r3, #22]
		_LED_0F[23] = 0x8C; //P
 80002f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <FND_INIT+0xbc>)
 80002f4:	228c      	movs	r2, #140	@ 0x8c
 80002f6:	75da      	strb	r2, [r3, #23]
		_LED_0F[24] = 0x98; //q
 80002f8:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <FND_INIT+0xbc>)
 80002fa:	2298      	movs	r2, #152	@ 0x98
 80002fc:	761a      	strb	r2, [r3, #24]
		_LED_0F[25] = 0x92; //S
 80002fe:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <FND_INIT+0xbc>)
 8000300:	2292      	movs	r2, #146	@ 0x92
 8000302:	765a      	strb	r2, [r3, #25]
		_LED_0F[26] = 0xC1; //U
 8000304:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <FND_INIT+0xbc>)
 8000306:	22c1      	movs	r2, #193	@ 0xc1
 8000308:	769a      	strb	r2, [r3, #26]
		_LED_0F[27] = 0x91; //Y
 800030a:	4b05      	ldr	r3, [pc, #20]	@ (8000320 <FND_INIT+0xbc>)
 800030c:	2291      	movs	r2, #145	@ 0x91
 800030e:	76da      	strb	r2, [r3, #27]
		_LED_0F[28] = 0xFE; //
 8000310:	4b03      	ldr	r3, [pc, #12]	@ (8000320 <FND_INIT+0xbc>)
 8000312:	22fe      	movs	r2, #254	@ 0xfe
 8000314:	771a      	strb	r2, [r3, #28]
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	200000a8 	.word	0x200000a8

08000324 <HAL_CAN_RxFifo0MsgPendingCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 800032c:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800032e:	4a11      	ldr	r2, [pc, #68]	@ (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000330:	2100      	movs	r1, #0
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	f000 fe81 	bl	800103a <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000338:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800033c:	480e      	ldr	r0, [pc, #56]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800033e:	f001 fc3d 	bl	8001bbc <HAL_GPIO_TogglePin>
	for(int i = 0; i<2; i++){
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
 8000346:	e00b      	b.n	8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		canData[i] = canRX[i];
 8000348:	4a09      	ldr	r2, [pc, #36]	@ (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4413      	add	r3, r2
 800034e:	7819      	ldrb	r1, [r3, #0]
 8000350:	4a0a      	ldr	r2, [pc, #40]	@ (800037c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	4413      	add	r3, r2
 8000356:	460a      	mov	r2, r1
 8000358:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<2; i++){
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3301      	adds	r3, #1
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	2b01      	cmp	r3, #1
 8000364:	ddf0      	ble.n	8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
	}
	if (rxHeader.StdId == 0x0F6) {
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	}

}
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200000ec 	.word	0x200000ec
 8000374:	200000c8 	.word	0x200000c8
 8000378:	40011000 	.word	0x40011000
 800037c:	200000e4 	.word	0x200000e4

08000380 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000394:	4b2e      	ldr	r3, [pc, #184]	@ (8000450 <MX_GPIO_Init+0xd0>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a2d      	ldr	r2, [pc, #180]	@ (8000450 <MX_GPIO_Init+0xd0>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000450 <MX_GPIO_Init+0xd0>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0310 	and.w	r3, r3, #16
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ac:	4b28      	ldr	r3, [pc, #160]	@ (8000450 <MX_GPIO_Init+0xd0>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a27      	ldr	r2, [pc, #156]	@ (8000450 <MX_GPIO_Init+0xd0>)
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b25      	ldr	r3, [pc, #148]	@ (8000450 <MX_GPIO_Init+0xd0>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0320 	and.w	r3, r3, #32
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c4:	4b22      	ldr	r3, [pc, #136]	@ (8000450 <MX_GPIO_Init+0xd0>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a21      	ldr	r2, [pc, #132]	@ (8000450 <MX_GPIO_Init+0xd0>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000450 <MX_GPIO_Init+0xd0>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0308 	and.w	r3, r3, #8
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000450 <MX_GPIO_Init+0xd0>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000450 <MX_GPIO_Init+0xd0>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b19      	ldr	r3, [pc, #100]	@ (8000450 <MX_GPIO_Init+0xd0>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0304 	and.w	r3, r3, #4
 80003f0:	603b      	str	r3, [r7, #0]
 80003f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003fa:	4816      	ldr	r0, [pc, #88]	@ (8000454 <MX_GPIO_Init+0xd4>)
 80003fc:	f001 fbc6 	bl	8001b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin, GPIO_PIN_SET);
 8000400:	2201      	movs	r2, #1
 8000402:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000406:	4814      	ldr	r0, [pc, #80]	@ (8000458 <MX_GPIO_Init+0xd8>)
 8000408:	f001 fbc0 	bl	8001b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 800040c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	2301      	movs	r3, #1
 8000414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000416:	2301      	movs	r3, #1
 8000418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800041a:	2303      	movs	r3, #3
 800041c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	4619      	mov	r1, r3
 8000424:	480b      	ldr	r0, [pc, #44]	@ (8000454 <MX_GPIO_Init+0xd4>)
 8000426:	f001 fa2d 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin;
 800042a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000430:	2301      	movs	r3, #1
 8000432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000434:	2301      	movs	r3, #1
 8000436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000438:	2303      	movs	r3, #3
 800043a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	4619      	mov	r1, r3
 8000442:	4805      	ldr	r0, [pc, #20]	@ (8000458 <MX_GPIO_Init+0xd8>)
 8000444:	f001 fa1e 	bl	8001884 <HAL_GPIO_Init>

}
 8000448:	bf00      	nop
 800044a:	3720      	adds	r7, #32
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000
 8000454:	40011000 	.word	0x40011000
 8000458:	40010c00 	.word	0x40010c00

0800045c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000460:	4b12      	ldr	r3, [pc, #72]	@ (80004ac <MX_I2C2_Init+0x50>)
 8000462:	4a13      	ldr	r2, [pc, #76]	@ (80004b0 <MX_I2C2_Init+0x54>)
 8000464:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000466:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <MX_I2C2_Init+0x50>)
 8000468:	4a12      	ldr	r2, [pc, #72]	@ (80004b4 <MX_I2C2_Init+0x58>)
 800046a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800046c:	4b0f      	ldr	r3, [pc, #60]	@ (80004ac <MX_I2C2_Init+0x50>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <MX_I2C2_Init+0x50>)
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000478:	4b0c      	ldr	r3, [pc, #48]	@ (80004ac <MX_I2C2_Init+0x50>)
 800047a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800047e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000480:	4b0a      	ldr	r3, [pc, #40]	@ (80004ac <MX_I2C2_Init+0x50>)
 8000482:	2200      	movs	r2, #0
 8000484:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000486:	4b09      	ldr	r3, [pc, #36]	@ (80004ac <MX_I2C2_Init+0x50>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800048c:	4b07      	ldr	r3, [pc, #28]	@ (80004ac <MX_I2C2_Init+0x50>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000492:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <MX_I2C2_Init+0x50>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000498:	4804      	ldr	r0, [pc, #16]	@ (80004ac <MX_I2C2_Init+0x50>)
 800049a:	f001 fba9 	bl	8001bf0 <HAL_I2C_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80004a4:	f000 f8cc 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200000f4 	.word	0x200000f4
 80004b0:	40005800 	.word	0x40005800
 80004b4:	00061a80 	.word	0x00061a80

080004b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a16      	ldr	r2, [pc, #88]	@ (800052c <HAL_I2C_MspInit+0x74>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d124      	bne.n	8000522 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <HAL_I2C_MspInit+0x78>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a14      	ldr	r2, [pc, #80]	@ (8000530 <HAL_I2C_MspInit+0x78>)
 80004de:	f043 0308 	orr.w	r3, r3, #8
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <HAL_I2C_MspInit+0x78>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0308 	and.w	r3, r3, #8
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80004f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80004f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004f6:	2312      	movs	r3, #18
 80004f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004fa:	2303      	movs	r3, #3
 80004fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	480b      	ldr	r0, [pc, #44]	@ (8000534 <HAL_I2C_MspInit+0x7c>)
 8000506:	f001 f9bd 	bl	8001884 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800050a:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <HAL_I2C_MspInit+0x78>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a08      	ldr	r2, [pc, #32]	@ (8000530 <HAL_I2C_MspInit+0x78>)
 8000510:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <HAL_I2C_MspInit+0x78>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000522:	bf00      	nop
 8000524:	3720      	adds	r7, #32
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40005800 	.word	0x40005800
 8000530:	40021000 	.word	0x40021000
 8000534:	40010c00 	.word	0x40010c00

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fc50 	bl	8000de0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f826 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f7ff ff1c 	bl	8000380 <MX_GPIO_Init>
  MX_CAN_Init();
 8000548:	f7ff fe02 	bl	8000150 <MX_CAN_Init>
  MX_I2C2_Init();
 800054c:	f7ff ff86 	bl	800045c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  FND_INIT();
 8000550:	f7ff fe88 	bl	8000264 <FND_INIT>
  SSD1306_Init();
 8000554:	f000 f87a 	bl	800064c <SSD1306_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SSD1306_GotoXY (0,0);
 8000558:	2100      	movs	r1, #0
 800055a:	2000      	movs	r0, #0
 800055c:	f000 f9de 	bl	800091c <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1);
 8000560:	2201      	movs	r2, #1
 8000562:	4908      	ldr	r1, [pc, #32]	@ (8000584 <main+0x4c>)
 8000564:	4808      	ldr	r0, [pc, #32]	@ (8000588 <main+0x50>)
 8000566:	f000 fa6d 	bl	8000a44 <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 800056a:	211e      	movs	r1, #30
 800056c:	200a      	movs	r0, #10
 800056e:	f000 f9d5 	bl	800091c <SSD1306_GotoXY>
  SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 8000572:	2201      	movs	r2, #1
 8000574:	4903      	ldr	r1, [pc, #12]	@ (8000584 <main+0x4c>)
 8000576:	4805      	ldr	r0, [pc, #20]	@ (800058c <main+0x54>)
 8000578:	f000 fa64 	bl	8000a44 <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 800057c:	f000 f92a 	bl	80007d4 <SSD1306_UpdateScreen>
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <main+0x48>
 8000584:	20000000 	.word	0x20000000
 8000588:	0800389c 	.word	0x0800389c
 800058c:	080038a4 	.word	0x080038a4

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b090      	sub	sp, #64	@ 0x40
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0318 	add.w	r3, r7, #24
 800059a:	2228      	movs	r2, #40	@ 0x28
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 f944 	bl	800382c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ce:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0318 	add.w	r3, r7, #24
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 f8d3 	bl	8002784 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005e4:	f000 f82c 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2102      	movs	r1, #2
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fb40 	bl	8002c88 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800060e:	f000 f817 	bl	8000640 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3740      	adds	r7, #64	@ 0x40
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a04      	ldr	r2, [pc, #16]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d101      	bne.n	8000632 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800062e:	f000 fbed 	bl	8000e0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40000800 	.word	0x40000800

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <Error_Handler+0x8>

0800064c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000652:	f000 fa1d 	bl	8000a90 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&H_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000656:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800065a:	2201      	movs	r2, #1
 800065c:	2178      	movs	r1, #120	@ 0x78
 800065e:	485b      	ldr	r0, [pc, #364]	@ (80007cc <SSD1306_Init+0x180>)
 8000660:	f001 fd08 	bl	8002074 <HAL_I2C_IsDeviceReady>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800066a:	2300      	movs	r3, #0
 800066c:	e0a9      	b.n	80007c2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800066e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000672:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000674:	e002      	b.n	800067c <SSD1306_Init+0x30>
		p--;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3b01      	subs	r3, #1
 800067a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1f9      	bne.n	8000676 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000682:	22ae      	movs	r2, #174	@ 0xae
 8000684:	2100      	movs	r1, #0
 8000686:	2078      	movs	r0, #120	@ 0x78
 8000688:	f000 fa7c 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800068c:	2220      	movs	r2, #32
 800068e:	2100      	movs	r1, #0
 8000690:	2078      	movs	r0, #120	@ 0x78
 8000692:	f000 fa77 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000696:	2210      	movs	r2, #16
 8000698:	2100      	movs	r1, #0
 800069a:	2078      	movs	r0, #120	@ 0x78
 800069c:	f000 fa72 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80006a0:	22b0      	movs	r2, #176	@ 0xb0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2078      	movs	r0, #120	@ 0x78
 80006a6:	f000 fa6d 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80006aa:	22c8      	movs	r2, #200	@ 0xc8
 80006ac:	2100      	movs	r1, #0
 80006ae:	2078      	movs	r0, #120	@ 0x78
 80006b0:	f000 fa68 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	2078      	movs	r0, #120	@ 0x78
 80006ba:	f000 fa63 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80006be:	2210      	movs	r2, #16
 80006c0:	2100      	movs	r1, #0
 80006c2:	2078      	movs	r0, #120	@ 0x78
 80006c4:	f000 fa5e 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80006c8:	2240      	movs	r2, #64	@ 0x40
 80006ca:	2100      	movs	r1, #0
 80006cc:	2078      	movs	r0, #120	@ 0x78
 80006ce:	f000 fa59 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80006d2:	2281      	movs	r2, #129	@ 0x81
 80006d4:	2100      	movs	r1, #0
 80006d6:	2078      	movs	r0, #120	@ 0x78
 80006d8:	f000 fa54 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80006dc:	22ff      	movs	r2, #255	@ 0xff
 80006de:	2100      	movs	r1, #0
 80006e0:	2078      	movs	r0, #120	@ 0x78
 80006e2:	f000 fa4f 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80006e6:	22a1      	movs	r2, #161	@ 0xa1
 80006e8:	2100      	movs	r1, #0
 80006ea:	2078      	movs	r0, #120	@ 0x78
 80006ec:	f000 fa4a 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80006f0:	22a6      	movs	r2, #166	@ 0xa6
 80006f2:	2100      	movs	r1, #0
 80006f4:	2078      	movs	r0, #120	@ 0x78
 80006f6:	f000 fa45 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80006fa:	22a8      	movs	r2, #168	@ 0xa8
 80006fc:	2100      	movs	r1, #0
 80006fe:	2078      	movs	r0, #120	@ 0x78
 8000700:	f000 fa40 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000704:	223f      	movs	r2, #63	@ 0x3f
 8000706:	2100      	movs	r1, #0
 8000708:	2078      	movs	r0, #120	@ 0x78
 800070a:	f000 fa3b 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800070e:	22a4      	movs	r2, #164	@ 0xa4
 8000710:	2100      	movs	r1, #0
 8000712:	2078      	movs	r0, #120	@ 0x78
 8000714:	f000 fa36 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000718:	22d3      	movs	r2, #211	@ 0xd3
 800071a:	2100      	movs	r1, #0
 800071c:	2078      	movs	r0, #120	@ 0x78
 800071e:	f000 fa31 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2078      	movs	r0, #120	@ 0x78
 8000728:	f000 fa2c 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800072c:	22d5      	movs	r2, #213	@ 0xd5
 800072e:	2100      	movs	r1, #0
 8000730:	2078      	movs	r0, #120	@ 0x78
 8000732:	f000 fa27 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000736:	22f0      	movs	r2, #240	@ 0xf0
 8000738:	2100      	movs	r1, #0
 800073a:	2078      	movs	r0, #120	@ 0x78
 800073c:	f000 fa22 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000740:	22d9      	movs	r2, #217	@ 0xd9
 8000742:	2100      	movs	r1, #0
 8000744:	2078      	movs	r0, #120	@ 0x78
 8000746:	f000 fa1d 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800074a:	2222      	movs	r2, #34	@ 0x22
 800074c:	2100      	movs	r1, #0
 800074e:	2078      	movs	r0, #120	@ 0x78
 8000750:	f000 fa18 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000754:	22da      	movs	r2, #218	@ 0xda
 8000756:	2100      	movs	r1, #0
 8000758:	2078      	movs	r0, #120	@ 0x78
 800075a:	f000 fa13 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800075e:	2212      	movs	r2, #18
 8000760:	2100      	movs	r1, #0
 8000762:	2078      	movs	r0, #120	@ 0x78
 8000764:	f000 fa0e 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000768:	22db      	movs	r2, #219	@ 0xdb
 800076a:	2100      	movs	r1, #0
 800076c:	2078      	movs	r0, #120	@ 0x78
 800076e:	f000 fa09 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000772:	2220      	movs	r2, #32
 8000774:	2100      	movs	r1, #0
 8000776:	2078      	movs	r0, #120	@ 0x78
 8000778:	f000 fa04 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800077c:	228d      	movs	r2, #141	@ 0x8d
 800077e:	2100      	movs	r1, #0
 8000780:	2078      	movs	r0, #120	@ 0x78
 8000782:	f000 f9ff 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000786:	2214      	movs	r2, #20
 8000788:	2100      	movs	r1, #0
 800078a:	2078      	movs	r0, #120	@ 0x78
 800078c:	f000 f9fa 	bl	8000b84 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000790:	22af      	movs	r2, #175	@ 0xaf
 8000792:	2100      	movs	r1, #0
 8000794:	2078      	movs	r0, #120	@ 0x78
 8000796:	f000 f9f5 	bl	8000b84 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800079a:	222e      	movs	r2, #46	@ 0x2e
 800079c:	2100      	movs	r1, #0
 800079e:	2078      	movs	r0, #120	@ 0x78
 80007a0:	f000 f9f0 	bl	8000b84 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 f843 	bl	8000830 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80007aa:	f000 f813 	bl	80007d4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <SSD1306_Init+0x184>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <SSD1306_Init+0x184>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80007ba:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <SSD1306_Init+0x184>)
 80007bc:	2201      	movs	r2, #1
 80007be:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80007c0:	2301      	movs	r3, #1
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000f4 	.word	0x200000f4
 80007d0:	20000548 	.word	0x20000548

080007d4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	71fb      	strb	r3, [r7, #7]
 80007de:	e01d      	b.n	800081c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	3b50      	subs	r3, #80	@ 0x50
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	461a      	mov	r2, r3
 80007e8:	2100      	movs	r1, #0
 80007ea:	2078      	movs	r0, #120	@ 0x78
 80007ec:	f000 f9ca 	bl	8000b84 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	2078      	movs	r0, #120	@ 0x78
 80007f6:	f000 f9c5 	bl	8000b84 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80007fa:	2210      	movs	r2, #16
 80007fc:	2100      	movs	r1, #0
 80007fe:	2078      	movs	r0, #120	@ 0x78
 8000800:	f000 f9c0 	bl	8000b84 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	01db      	lsls	r3, r3, #7
 8000808:	4a08      	ldr	r2, [pc, #32]	@ (800082c <SSD1306_UpdateScreen+0x58>)
 800080a:	441a      	add	r2, r3
 800080c:	2380      	movs	r3, #128	@ 0x80
 800080e:	2140      	movs	r1, #64	@ 0x40
 8000810:	2078      	movs	r0, #120	@ 0x78
 8000812:	f000 f951 	bl	8000ab8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	3301      	adds	r3, #1
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b07      	cmp	r3, #7
 8000820:	d9de      	bls.n	80007e0 <SSD1306_UpdateScreen+0xc>
	}
}
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000148 	.word	0x20000148

08000830 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d101      	bne.n	8000844 <SSD1306_Fill+0x14>
 8000840:	2300      	movs	r3, #0
 8000842:	e000      	b.n	8000846 <SSD1306_Fill+0x16>
 8000844:	23ff      	movs	r3, #255	@ 0xff
 8000846:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800084a:	4619      	mov	r1, r3
 800084c:	4803      	ldr	r0, [pc, #12]	@ (800085c <SSD1306_Fill+0x2c>)
 800084e:	f002 ffed 	bl	800382c <memset>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000148 	.word	0x20000148

08000860 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	80fb      	strh	r3, [r7, #6]
 800086a:	460b      	mov	r3, r1
 800086c:	80bb      	strh	r3, [r7, #4]
 800086e:	4613      	mov	r3, r2
 8000870:	70fb      	strb	r3, [r7, #3]
	if (
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	2b7f      	cmp	r3, #127	@ 0x7f
 8000876:	d848      	bhi.n	800090a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	2b3f      	cmp	r3, #63	@ 0x3f
 800087c:	d845      	bhi.n	800090a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800087e:	4b25      	ldr	r3, [pc, #148]	@ (8000914 <SSD1306_DrawPixel+0xb4>)
 8000880:	791b      	ldrb	r3, [r3, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d006      	beq.n	8000894 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000886:	78fb      	ldrb	r3, [r7, #3]
 8000888:	2b00      	cmp	r3, #0
 800088a:	bf0c      	ite	eq
 800088c:	2301      	moveq	r3, #1
 800088e:	2300      	movne	r3, #0
 8000890:	b2db      	uxtb	r3, r3
 8000892:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d11a      	bne.n	80008d0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800089a:	88fa      	ldrh	r2, [r7, #6]
 800089c:	88bb      	ldrh	r3, [r7, #4]
 800089e:	08db      	lsrs	r3, r3, #3
 80008a0:	b298      	uxth	r0, r3
 80008a2:	4603      	mov	r3, r0
 80008a4:	01db      	lsls	r3, r3, #7
 80008a6:	4413      	add	r3, r2
 80008a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000918 <SSD1306_DrawPixel+0xb8>)
 80008aa:	5cd3      	ldrb	r3, [r2, r3]
 80008ac:	b25a      	sxtb	r2, r3
 80008ae:	88bb      	ldrh	r3, [r7, #4]
 80008b0:	f003 0307 	and.w	r3, r3, #7
 80008b4:	2101      	movs	r1, #1
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	b259      	sxtb	r1, r3
 80008c0:	88fa      	ldrh	r2, [r7, #6]
 80008c2:	4603      	mov	r3, r0
 80008c4:	01db      	lsls	r3, r3, #7
 80008c6:	4413      	add	r3, r2
 80008c8:	b2c9      	uxtb	r1, r1
 80008ca:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <SSD1306_DrawPixel+0xb8>)
 80008cc:	54d1      	strb	r1, [r2, r3]
 80008ce:	e01d      	b.n	800090c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80008d0:	88fa      	ldrh	r2, [r7, #6]
 80008d2:	88bb      	ldrh	r3, [r7, #4]
 80008d4:	08db      	lsrs	r3, r3, #3
 80008d6:	b298      	uxth	r0, r3
 80008d8:	4603      	mov	r3, r0
 80008da:	01db      	lsls	r3, r3, #7
 80008dc:	4413      	add	r3, r2
 80008de:	4a0e      	ldr	r2, [pc, #56]	@ (8000918 <SSD1306_DrawPixel+0xb8>)
 80008e0:	5cd3      	ldrb	r3, [r2, r3]
 80008e2:	b25a      	sxtb	r2, r3
 80008e4:	88bb      	ldrh	r3, [r7, #4]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	2101      	movs	r1, #1
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	4013      	ands	r3, r2
 80008f8:	b259      	sxtb	r1, r3
 80008fa:	88fa      	ldrh	r2, [r7, #6]
 80008fc:	4603      	mov	r3, r0
 80008fe:	01db      	lsls	r3, r3, #7
 8000900:	4413      	add	r3, r2
 8000902:	b2c9      	uxtb	r1, r1
 8000904:	4a04      	ldr	r2, [pc, #16]	@ (8000918 <SSD1306_DrawPixel+0xb8>)
 8000906:	54d1      	strb	r1, [r2, r3]
 8000908:	e000      	b.n	800090c <SSD1306_DrawPixel+0xac>
		return;
 800090a:	bf00      	nop
	}
}
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	20000548 	.word	0x20000548
 8000918:	20000148 	.word	0x20000148

0800091c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	460a      	mov	r2, r1
 8000926:	80fb      	strh	r3, [r7, #6]
 8000928:	4613      	mov	r3, r2
 800092a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800092c:	4a05      	ldr	r2, [pc, #20]	@ (8000944 <SSD1306_GotoXY+0x28>)
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000932:	4a04      	ldr	r2, [pc, #16]	@ (8000944 <SSD1306_GotoXY+0x28>)
 8000934:	88bb      	ldrh	r3, [r7, #4]
 8000936:	8053      	strh	r3, [r2, #2]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000548 	.word	0x20000548

08000948 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
 8000954:	4613      	mov	r3, r2
 8000956:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000958:	4b39      	ldr	r3, [pc, #228]	@ (8000a40 <SSD1306_Putc+0xf8>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
	if (
 8000964:	2b7f      	cmp	r3, #127	@ 0x7f
 8000966:	dc07      	bgt.n	8000978 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000968:	4b35      	ldr	r3, [pc, #212]	@ (8000a40 <SSD1306_Putc+0xf8>)
 800096a:	885b      	ldrh	r3, [r3, #2]
 800096c:	461a      	mov	r2, r3
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	785b      	ldrb	r3, [r3, #1]
 8000972:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000974:	2b3f      	cmp	r3, #63	@ 0x3f
 8000976:	dd01      	ble.n	800097c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000978:	2300      	movs	r3, #0
 800097a:	e05d      	b.n	8000a38 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e04b      	b.n	8000a1a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	3b20      	subs	r3, #32
 800098a:	6839      	ldr	r1, [r7, #0]
 800098c:	7849      	ldrb	r1, [r1, #1]
 800098e:	fb01 f303 	mul.w	r3, r1, r3
 8000992:	4619      	mov	r1, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	440b      	add	r3, r1
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	4413      	add	r3, r2
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	e030      	b.n	8000a08 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d010      	beq.n	80009d8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80009b6:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <SSD1306_Putc+0xf8>)
 80009b8:	881a      	ldrh	r2, [r3, #0]
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	4413      	add	r3, r2
 80009c0:	b298      	uxth	r0, r3
 80009c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <SSD1306_Putc+0xf8>)
 80009c4:	885a      	ldrh	r2, [r3, #2]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	4413      	add	r3, r2
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	79ba      	ldrb	r2, [r7, #6]
 80009d0:	4619      	mov	r1, r3
 80009d2:	f7ff ff45 	bl	8000860 <SSD1306_DrawPixel>
 80009d6:	e014      	b.n	8000a02 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80009d8:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <SSD1306_Putc+0xf8>)
 80009da:	881a      	ldrh	r2, [r3, #0]
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	4413      	add	r3, r2
 80009e2:	b298      	uxth	r0, r3
 80009e4:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <SSD1306_Putc+0xf8>)
 80009e6:	885a      	ldrh	r2, [r3, #2]
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	4413      	add	r3, r2
 80009ee:	b299      	uxth	r1, r3
 80009f0:	79bb      	ldrb	r3, [r7, #6]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	bf0c      	ite	eq
 80009f6:	2301      	moveq	r3, #1
 80009f8:	2300      	movne	r3, #0
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	461a      	mov	r2, r3
 80009fe:	f7ff ff2f 	bl	8000860 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	3301      	adds	r3, #1
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d3c8      	bcc.n	80009a6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	3301      	adds	r3, #1
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	785b      	ldrb	r3, [r3, #1]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d3ad      	bcc.n	8000982 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <SSD1306_Putc+0xf8>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	7812      	ldrb	r2, [r2, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <SSD1306_Putc+0xf8>)
 8000a34:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000a36:	79fb      	ldrb	r3, [r7, #7]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000548 	.word	0x20000548

08000a44 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000a52:	e012      	b.n	8000a7a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	79fa      	ldrb	r2, [r7, #7]
 8000a5a:	68b9      	ldr	r1, [r7, #8]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff73 	bl	8000948 <SSD1306_Putc>
 8000a62:	4603      	mov	r3, r0
 8000a64:	461a      	mov	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d002      	beq.n	8000a74 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	e008      	b.n	8000a86 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3301      	adds	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1e8      	bne.n	8000a54 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	781b      	ldrb	r3, [r3, #0]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000a96:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <ssd1306_I2C_Init+0x24>)
 8000a98:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a9a:	e002      	b.n	8000aa2 <ssd1306_I2C_Init+0x12>
		p--;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1f9      	bne.n	8000a9c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&H_I2C);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	0003d090 	.word	0x0003d090

08000ab8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b0c7      	sub	sp, #284	@ 0x11c
 8000abc:	af02      	add	r7, sp, #8
 8000abe:	4604      	mov	r4, r0
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000ac6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000aca:	600a      	str	r2, [r1, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ad2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000ad6:	4622      	mov	r2, r4
 8000ad8:	701a      	strb	r2, [r3, #0]
 8000ada:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ade:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000ae2:	4602      	mov	r2, r0
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000aea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000aee:	460a      	mov	r2, r1
 8000af0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000af2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000af6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000afa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000afe:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000b02:	7812      	ldrb	r2, [r2, #0]
 8000b04:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000b0c:	e015      	b.n	8000b3a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000b0e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000b12:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000b16:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000b1a:	6812      	ldr	r2, [r2, #0]
 8000b1c:	441a      	add	r2, r3
 8000b1e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000b22:	3301      	adds	r3, #1
 8000b24:	7811      	ldrb	r1, [r2, #0]
 8000b26:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000b2a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000b2e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000b30:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000b34:	3301      	adds	r3, #1
 8000b36:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000b3a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000b44:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000b48:	8812      	ldrh	r2, [r2, #0]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d8df      	bhi.n	8000b0e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&H_I2C, address, dt, count+1, 10);
 8000b4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b52:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b299      	uxth	r1, r3
 8000b5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	f107 020c 	add.w	r2, r7, #12
 8000b6c:	200a      	movs	r0, #10
 8000b6e:	9000      	str	r0, [sp, #0]
 8000b70:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <ssd1306_I2C_WriteMulti+0xc8>)
 8000b72:	f001 f981 	bl	8001e78 <HAL_I2C_Master_Transmit>
}
 8000b76:	bf00      	nop
 8000b78:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	200000f4 	.word	0x200000f4

08000b84 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	71bb      	strb	r3, [r7, #6]
 8000b92:	4613      	mov	r3, r2
 8000b94:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000b96:	79bb      	ldrb	r3, [r7, #6]
 8000b98:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b9a:	797b      	ldrb	r3, [r7, #5]
 8000b9c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&H_I2C, address, dt, 2, 10);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	b299      	uxth	r1, r3
 8000ba2:	f107 020c 	add.w	r2, r7, #12
 8000ba6:	230a      	movs	r3, #10
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2302      	movs	r3, #2
 8000bac:	4803      	ldr	r0, [pc, #12]	@ (8000bbc <ssd1306_I2C_Write+0x38>)
 8000bae:	f001 f963 	bl	8001e78 <HAL_I2C_Master_Transmit>
}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000f4 	.word	0x200000f4

08000bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc6:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <HAL_MspInit+0x68>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	4a17      	ldr	r2, [pc, #92]	@ (8000c28 <HAL_MspInit+0x68>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6193      	str	r3, [r2, #24]
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <HAL_MspInit+0x68>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <HAL_MspInit+0x68>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a11      	ldr	r2, [pc, #68]	@ (8000c28 <HAL_MspInit+0x68>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_MspInit+0x68>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	f06f 0001 	mvn.w	r0, #1
 8000bfe:	f000 fe16 	bl	800182e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <HAL_MspInit+0x6c>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	4a04      	ldr	r2, [pc, #16]	@ (8000c2c <HAL_MspInit+0x6c>)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000

08000c30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08e      	sub	sp, #56	@ 0x38
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000c46:	4b34      	ldr	r3, [pc, #208]	@ (8000d18 <HAL_InitTick+0xe8>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	4a33      	ldr	r2, [pc, #204]	@ (8000d18 <HAL_InitTick+0xe8>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	61d3      	str	r3, [r2, #28]
 8000c52:	4b31      	ldr	r3, [pc, #196]	@ (8000d18 <HAL_InitTick+0xe8>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c5e:	f107 0210 	add.w	r2, r7, #16
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f002 f969 	bl	8002f40 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d103      	bne.n	8000c80 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c78:	f002 f94e 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 8000c7c:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c7e:	e004      	b.n	8000c8a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c80:	f002 f94a 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 8000c84:	4603      	mov	r3, r0
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c8c:	4a23      	ldr	r2, [pc, #140]	@ (8000d1c <HAL_InitTick+0xec>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	0c9b      	lsrs	r3, r3, #18
 8000c94:	3b01      	subs	r3, #1
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000c98:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <HAL_InitTick+0xf0>)
 8000c9a:	4a22      	ldr	r2, [pc, #136]	@ (8000d24 <HAL_InitTick+0xf4>)
 8000c9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <HAL_InitTick+0xf0>)
 8000ca0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ca4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d20 <HAL_InitTick+0xf0>)
 8000ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000caa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <HAL_InitTick+0xf0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <HAL_InitTick+0xf0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <HAL_InitTick+0xf0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000cbe:	4818      	ldr	r0, [pc, #96]	@ (8000d20 <HAL_InitTick+0xf0>)
 8000cc0:	f002 f98c 	bl	8002fdc <HAL_TIM_Base_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d11b      	bne.n	8000d0a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000cd2:	4813      	ldr	r0, [pc, #76]	@ (8000d20 <HAL_InitTick+0xf0>)
 8000cd4:	f002 f9da 	bl	800308c <HAL_TIM_Base_Start_IT>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cde:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d111      	bne.n	8000d0a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ce6:	201e      	movs	r0, #30
 8000ce8:	f000 fdbd 	bl	8001866 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b0f      	cmp	r3, #15
 8000cf0:	d808      	bhi.n	8000d04 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	201e      	movs	r0, #30
 8000cf8:	f000 fd99 	bl	800182e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <HAL_InitTick+0xf8>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e002      	b.n	8000d0a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d0a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3738      	adds	r7, #56	@ 0x38
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	431bde83 	.word	0x431bde83
 8000d20:	20000550 	.word	0x20000550
 8000d24:	40000800 	.word	0x40000800
 8000d28:	2000000c 	.word	0x2000000c

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <NMI_Handler+0x4>

08000d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <MemManage_Handler+0x4>

08000d44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d66:	f000 fa89 	bl	800127c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000080 	.word	0x20000080

08000d74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <TIM4_IRQHandler+0x10>)
 8000d7a:	f002 f9d9 	bl	8003130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000550 	.word	0x20000550

08000d88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr

08000d94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d94:	f7ff fff8 	bl	8000d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d98:	480b      	ldr	r0, [pc, #44]	@ (8000dc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d9a:	490c      	ldr	r1, [pc, #48]	@ (8000dcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a09      	ldr	r2, [pc, #36]	@ (8000dd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000db0:	4c09      	ldr	r4, [pc, #36]	@ (8000dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f002 fd3d 	bl	800383c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dc2:	f7ff fbb9 	bl	8000538 <main>
  bx lr
 8000dc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000dd0:	08004640 	.word	0x08004640
  ldr r2, =_sbss
 8000dd4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000dd8:	20000788 	.word	0x20000788

08000ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_2_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <HAL_Init+0x28>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	@ (8000e08 <HAL_Init+0x28>)
 8000dea:	f043 0310 	orr.w	r3, r3, #16
 8000dee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 fd11 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df6:	200f      	movs	r0, #15
 8000df8:	f7ff ff1a 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfc:	f7ff fee0 	bl	8000bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40022000 	.word	0x40022000

08000e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <HAL_IncTick+0x1c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <HAL_IncTick+0x20>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a03      	ldr	r2, [pc, #12]	@ (8000e2c <HAL_IncTick+0x20>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	20000010 	.word	0x20000010
 8000e2c:	20000598 	.word	0x20000598

08000e30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b02      	ldr	r3, [pc, #8]	@ (8000e40 <HAL_GetTick+0x10>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	20000598 	.word	0x20000598

08000e44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d101      	bne.n	8000e56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e0ed      	b.n	8001032 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff f9aa 	bl	80001bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0201 	orr.w	r2, r2, #1
 8000e76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e78:	f7ff ffda 	bl	8000e30 <HAL_GetTick>
 8000e7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e7e:	e012      	b.n	8000ea6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e80:	f7ff ffd6 	bl	8000e30 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b0a      	cmp	r3, #10
 8000e8c:	d90b      	bls.n	8000ea6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2205      	movs	r2, #5
 8000e9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e0c5      	b.n	8001032 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0e5      	beq.n	8000e80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0202 	bic.w	r2, r2, #2
 8000ec2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ec4:	f7ff ffb4 	bl	8000e30 <HAL_GetTick>
 8000ec8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eca:	e012      	b.n	8000ef2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ecc:	f7ff ffb0 	bl	8000e30 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b0a      	cmp	r3, #10
 8000ed8:	d90b      	bls.n	8000ef2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ede:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2205      	movs	r2, #5
 8000eea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e09f      	b.n	8001032 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1e5      	bne.n	8000ecc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7e1b      	ldrb	r3, [r3, #24]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d108      	bne.n	8000f1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	e007      	b.n	8000f2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7e5b      	ldrb	r3, [r3, #25]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d108      	bne.n	8000f44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e007      	b.n	8000f54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	7e9b      	ldrb	r3, [r3, #26]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d108      	bne.n	8000f6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0220 	orr.w	r2, r2, #32
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e007      	b.n	8000f7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 0220 	bic.w	r2, r2, #32
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	7edb      	ldrb	r3, [r3, #27]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d108      	bne.n	8000f98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0210 	bic.w	r2, r2, #16
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	e007      	b.n	8000fa8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f042 0210 	orr.w	r2, r2, #16
 8000fa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7f1b      	ldrb	r3, [r3, #28]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d108      	bne.n	8000fc2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f042 0208 	orr.w	r2, r2, #8
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	e007      	b.n	8000fd2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f022 0208 	bic.w	r2, r2, #8
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7f5b      	ldrb	r3, [r3, #29]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d108      	bne.n	8000fec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f042 0204 	orr.w	r2, r2, #4
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	e007      	b.n	8000ffc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f022 0204 	bic.w	r2, r2, #4
 8000ffa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	431a      	orrs	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	ea42 0103 	orr.w	r1, r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	1e5a      	subs	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800103a:	b480      	push	{r7}
 800103c:	b087      	sub	sp, #28
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800104e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d003      	beq.n	800105e <HAL_CAN_GetRxMessage+0x24>
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	2b02      	cmp	r3, #2
 800105a:	f040 8103 	bne.w	8001264 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10e      	bne.n	8001082 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d116      	bne.n	80010a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001076:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e0f7      	b.n	8001272 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d107      	bne.n	80010a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001094:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e0e8      	b.n	8001272 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	331b      	adds	r3, #27
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	4413      	add	r3, r2
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0204 	and.w	r2, r3, #4
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10c      	bne.n	80010d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	331b      	adds	r3, #27
 80010c6:	011b      	lsls	r3, r3, #4
 80010c8:	4413      	add	r3, r2
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	0d5b      	lsrs	r3, r3, #21
 80010ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	e00b      	b.n	80010f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	331b      	adds	r3, #27
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	4413      	add	r3, r2
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	08db      	lsrs	r3, r3, #3
 80010e8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	331b      	adds	r3, #27
 80010f8:	011b      	lsls	r3, r3, #4
 80010fa:	4413      	add	r3, r2
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0202 	and.w	r2, r3, #2
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	331b      	adds	r3, #27
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	4413      	add	r3, r2
 8001112:	3304      	adds	r3, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2208      	movs	r2, #8
 8001122:	611a      	str	r2, [r3, #16]
 8001124:	e00b      	b.n	800113e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	331b      	adds	r3, #27
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	4413      	add	r3, r2
 8001132:	3304      	adds	r3, #4
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 020f 	and.w	r2, r3, #15
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	331b      	adds	r3, #27
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	4413      	add	r3, r2
 800114a:	3304      	adds	r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	0a1b      	lsrs	r3, r3, #8
 8001150:	b2da      	uxtb	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	331b      	adds	r3, #27
 800115e:	011b      	lsls	r3, r3, #4
 8001160:	4413      	add	r3, r2
 8001162:	3304      	adds	r3, #4
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	0c1b      	lsrs	r3, r3, #16
 8001168:	b29a      	uxth	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	4413      	add	r3, r2
 8001178:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	4413      	add	r3, r2
 800118e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	0a1a      	lsrs	r2, r3, #8
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	4413      	add	r3, r2
 80011a8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	0c1a      	lsrs	r2, r3, #16
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	3302      	adds	r3, #2
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	4413      	add	r3, r2
 80011c2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	0e1a      	lsrs	r2, r3, #24
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	3303      	adds	r3, #3
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	4413      	add	r3, r2
 80011dc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3304      	adds	r3, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	4413      	add	r3, r2
 80011f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	0a1a      	lsrs	r2, r3, #8
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3305      	adds	r3, #5
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	4413      	add	r3, r2
 800120e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	0c1a      	lsrs	r2, r3, #16
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3306      	adds	r3, #6
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4413      	add	r3, r2
 8001228:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	0e1a      	lsrs	r2, r3, #24
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	3307      	adds	r3, #7
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d108      	bne.n	8001250 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f042 0220 	orr.w	r2, r2, #32
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	e007      	b.n	8001260 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0220 	orr.w	r2, r2, #32
 800125e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	e006      	b.n	8001272 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001268:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
  }
}
 8001272:	4618      	mov	r0, r3
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d07c      	beq.n	80013bc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d023      	beq.n	8001314 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2201      	movs	r2, #1
 80012d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f983 	bl	80015ea <HAL_CAN_TxMailbox0CompleteCallback>
 80012e4:	e016      	b.n	8001314 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d004      	beq.n	80012fa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80012f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80012f8:	e00c      	b.n	8001314 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	2b00      	cmp	r3, #0
 8001302:	d004      	beq.n	800130e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001306:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
 800130c:	e002      	b.n	8001314 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f986 	bl	8001620 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800131a:	2b00      	cmp	r3, #0
 800131c:	d024      	beq.n	8001368 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001326:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f962 	bl	80015fc <HAL_CAN_TxMailbox1CompleteCallback>
 8001338:	e016      	b.n	8001368 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001346:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
 800134c:	e00c      	b.n	8001368 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001354:	2b00      	cmp	r3, #0
 8001356:	d004      	beq.n	8001362 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001360:	e002      	b.n	8001368 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f965 	bl	8001632 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d024      	beq.n	80013bc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800137a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f941 	bl	800160e <HAL_CAN_TxMailbox2CompleteCallback>
 800138c:	e016      	b.n	80013bc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a0:	e00c      	b.n	80013bc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013b4:	e002      	b.n	80013bc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f944 	bl	8001644 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00c      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f003 0310 	and.w	r3, r3, #16
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d007      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2210      	movs	r2, #16
 80013de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2208      	movs	r2, #8
 80013fa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 f92a 	bl	8001656 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d009      	beq.n	8001420 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7fe ff82 	bl	8000324 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001420:	6a3b      	ldr	r3, [r7, #32]
 8001422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00c      	beq.n	8001444 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	d007      	beq.n	8001444 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001436:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2210      	movs	r2, #16
 8001442:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2208      	movs	r2, #8
 800145e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 f90a 	bl	800167a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001466:	6a3b      	ldr	r3, [r7, #32]
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b00      	cmp	r3, #0
 800146e:	d009      	beq.n	8001484 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f8f2 	bl	8001668 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00b      	beq.n	80014a6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b00      	cmp	r3, #0
 8001496:	d006      	beq.n	80014a6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2210      	movs	r2, #16
 800149e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f8f3 	bl	800168c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00b      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d006      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2208      	movs	r2, #8
 80014c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f8eb 	bl	800169e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d07b      	beq.n	80015ca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d072      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80014f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d008      	beq.n	8001514 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001536:	2b00      	cmp	r3, #0
 8001538:	d043      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001540:	2b00      	cmp	r3, #0
 8001542:	d03e      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800154a:	2b60      	cmp	r3, #96	@ 0x60
 800154c:	d02b      	beq.n	80015a6 <HAL_CAN_IRQHandler+0x32a>
 800154e:	2b60      	cmp	r3, #96	@ 0x60
 8001550:	d82e      	bhi.n	80015b0 <HAL_CAN_IRQHandler+0x334>
 8001552:	2b50      	cmp	r3, #80	@ 0x50
 8001554:	d022      	beq.n	800159c <HAL_CAN_IRQHandler+0x320>
 8001556:	2b50      	cmp	r3, #80	@ 0x50
 8001558:	d82a      	bhi.n	80015b0 <HAL_CAN_IRQHandler+0x334>
 800155a:	2b40      	cmp	r3, #64	@ 0x40
 800155c:	d019      	beq.n	8001592 <HAL_CAN_IRQHandler+0x316>
 800155e:	2b40      	cmp	r3, #64	@ 0x40
 8001560:	d826      	bhi.n	80015b0 <HAL_CAN_IRQHandler+0x334>
 8001562:	2b30      	cmp	r3, #48	@ 0x30
 8001564:	d010      	beq.n	8001588 <HAL_CAN_IRQHandler+0x30c>
 8001566:	2b30      	cmp	r3, #48	@ 0x30
 8001568:	d822      	bhi.n	80015b0 <HAL_CAN_IRQHandler+0x334>
 800156a:	2b10      	cmp	r3, #16
 800156c:	d002      	beq.n	8001574 <HAL_CAN_IRQHandler+0x2f8>
 800156e:	2b20      	cmp	r3, #32
 8001570:	d005      	beq.n	800157e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001572:	e01d      	b.n	80015b0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800157c:	e019      	b.n	80015b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800157e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001580:	f043 0310 	orr.w	r3, r3, #16
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001586:	e014      	b.n	80015b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158a:	f043 0320 	orr.w	r3, r3, #32
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001590:	e00f      	b.n	80015b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800159a:	e00a      	b.n	80015b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015a4:	e005      	b.n	80015b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015ae:	e000      	b.n	80015b2 <HAL_CAN_IRQHandler+0x336>
            break;
 80015b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699a      	ldr	r2, [r3, #24]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80015c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2204      	movs	r2, #4
 80015c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f867 	bl	80016b0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	@ 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
	...

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4906      	ldr	r1, [pc, #24]	@ (800175c <__NVIC_EnableIRQ+0x34>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	@ (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	@ (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	@ 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	@ 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff4f 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff64 	bl	800170c <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ffb2 	bl	80017b4 <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff81 	bl	8001760 <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff57 	bl	8001728 <__NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b08b      	sub	sp, #44	@ 0x2c
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	e169      	b.n	8001b6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001898:	2201      	movs	r2, #1
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	f040 8158 	bne.w	8001b66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4a9a      	ldr	r2, [pc, #616]	@ (8001b24 <HAL_GPIO_Init+0x2a0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d05e      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018c0:	4a98      	ldr	r2, [pc, #608]	@ (8001b24 <HAL_GPIO_Init+0x2a0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d875      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018c6:	4a98      	ldr	r2, [pc, #608]	@ (8001b28 <HAL_GPIO_Init+0x2a4>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d058      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018cc:	4a96      	ldr	r2, [pc, #600]	@ (8001b28 <HAL_GPIO_Init+0x2a4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d86f      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018d2:	4a96      	ldr	r2, [pc, #600]	@ (8001b2c <HAL_GPIO_Init+0x2a8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d052      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018d8:	4a94      	ldr	r2, [pc, #592]	@ (8001b2c <HAL_GPIO_Init+0x2a8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d869      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018de:	4a94      	ldr	r2, [pc, #592]	@ (8001b30 <HAL_GPIO_Init+0x2ac>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d04c      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018e4:	4a92      	ldr	r2, [pc, #584]	@ (8001b30 <HAL_GPIO_Init+0x2ac>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d863      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018ea:	4a92      	ldr	r2, [pc, #584]	@ (8001b34 <HAL_GPIO_Init+0x2b0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d046      	beq.n	800197e <HAL_GPIO_Init+0xfa>
 80018f0:	4a90      	ldr	r2, [pc, #576]	@ (8001b34 <HAL_GPIO_Init+0x2b0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d85d      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018f6:	2b12      	cmp	r3, #18
 80018f8:	d82a      	bhi.n	8001950 <HAL_GPIO_Init+0xcc>
 80018fa:	2b12      	cmp	r3, #18
 80018fc:	d859      	bhi.n	80019b2 <HAL_GPIO_Init+0x12e>
 80018fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001904 <HAL_GPIO_Init+0x80>)
 8001900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001904:	0800197f 	.word	0x0800197f
 8001908:	08001959 	.word	0x08001959
 800190c:	0800196b 	.word	0x0800196b
 8001910:	080019ad 	.word	0x080019ad
 8001914:	080019b3 	.word	0x080019b3
 8001918:	080019b3 	.word	0x080019b3
 800191c:	080019b3 	.word	0x080019b3
 8001920:	080019b3 	.word	0x080019b3
 8001924:	080019b3 	.word	0x080019b3
 8001928:	080019b3 	.word	0x080019b3
 800192c:	080019b3 	.word	0x080019b3
 8001930:	080019b3 	.word	0x080019b3
 8001934:	080019b3 	.word	0x080019b3
 8001938:	080019b3 	.word	0x080019b3
 800193c:	080019b3 	.word	0x080019b3
 8001940:	080019b3 	.word	0x080019b3
 8001944:	080019b3 	.word	0x080019b3
 8001948:	08001961 	.word	0x08001961
 800194c:	08001975 	.word	0x08001975
 8001950:	4a79      	ldr	r2, [pc, #484]	@ (8001b38 <HAL_GPIO_Init+0x2b4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d013      	beq.n	800197e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001956:	e02c      	b.n	80019b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	623b      	str	r3, [r7, #32]
          break;
 800195e:	e029      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	3304      	adds	r3, #4
 8001966:	623b      	str	r3, [r7, #32]
          break;
 8001968:	e024      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	3308      	adds	r3, #8
 8001970:	623b      	str	r3, [r7, #32]
          break;
 8001972:	e01f      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	330c      	adds	r3, #12
 800197a:	623b      	str	r3, [r7, #32]
          break;
 800197c:	e01a      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001986:	2304      	movs	r3, #4
 8001988:	623b      	str	r3, [r7, #32]
          break;
 800198a:	e013      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001994:	2308      	movs	r3, #8
 8001996:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	611a      	str	r2, [r3, #16]
          break;
 800199e:	e009      	b.n	80019b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a0:	2308      	movs	r3, #8
 80019a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	615a      	str	r2, [r3, #20]
          break;
 80019aa:	e003      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019ac:	2300      	movs	r3, #0
 80019ae:	623b      	str	r3, [r7, #32]
          break;
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x130>
          break;
 80019b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2bff      	cmp	r3, #255	@ 0xff
 80019b8:	d801      	bhi.n	80019be <HAL_GPIO_Init+0x13a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	e001      	b.n	80019c2 <HAL_GPIO_Init+0x13e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3304      	adds	r3, #4
 80019c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2bff      	cmp	r3, #255	@ 0xff
 80019c8:	d802      	bhi.n	80019d0 <HAL_GPIO_Init+0x14c>
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	e002      	b.n	80019d6 <HAL_GPIO_Init+0x152>
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	3b08      	subs	r3, #8
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	210f      	movs	r1, #15
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	401a      	ands	r2, r3
 80019e8:	6a39      	ldr	r1, [r7, #32]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	431a      	orrs	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 80b1 	beq.w	8001b66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a04:	4b4d      	ldr	r3, [pc, #308]	@ (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a4c      	ldr	r2, [pc, #304]	@ (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b4a      	ldr	r3, [pc, #296]	@ (8001b3c <HAL_GPIO_Init+0x2b8>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a1c:	4a48      	ldr	r2, [pc, #288]	@ (8001b40 <HAL_GPIO_Init+0x2bc>)
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	220f      	movs	r2, #15
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a40      	ldr	r2, [pc, #256]	@ (8001b44 <HAL_GPIO_Init+0x2c0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d013      	beq.n	8001a70 <HAL_GPIO_Init+0x1ec>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b48 <HAL_GPIO_Init+0x2c4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d00d      	beq.n	8001a6c <HAL_GPIO_Init+0x1e8>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a3e      	ldr	r2, [pc, #248]	@ (8001b4c <HAL_GPIO_Init+0x2c8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d007      	beq.n	8001a68 <HAL_GPIO_Init+0x1e4>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b50 <HAL_GPIO_Init+0x2cc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_GPIO_Init+0x1e0>
 8001a60:	2303      	movs	r3, #3
 8001a62:	e006      	b.n	8001a72 <HAL_GPIO_Init+0x1ee>
 8001a64:	2304      	movs	r3, #4
 8001a66:	e004      	b.n	8001a72 <HAL_GPIO_Init+0x1ee>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e002      	b.n	8001a72 <HAL_GPIO_Init+0x1ee>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <HAL_GPIO_Init+0x1ee>
 8001a70:	2300      	movs	r3, #0
 8001a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a74:	f002 0203 	and.w	r2, r2, #3
 8001a78:	0092      	lsls	r2, r2, #2
 8001a7a:	4093      	lsls	r3, r2
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a82:	492f      	ldr	r1, [pc, #188]	@ (8001b40 <HAL_GPIO_Init+0x2bc>)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	089b      	lsrs	r3, r3, #2
 8001a88:	3302      	adds	r3, #2
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	492c      	ldr	r1, [pc, #176]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
 8001aa8:	e006      	b.n	8001ab8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	4928      	ldr	r1, [pc, #160]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac4:	4b23      	ldr	r3, [pc, #140]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	4922      	ldr	r1, [pc, #136]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ad2:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	491e      	ldr	r1, [pc, #120]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d006      	beq.n	8001afa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aec:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4918      	ldr	r1, [pc, #96]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001afa:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	4914      	ldr	r1, [pc, #80]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d021      	beq.n	8001b58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b14:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	490e      	ldr	r1, [pc, #56]	@ (8001b54 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
 8001b20:	e021      	b.n	8001b66 <HAL_GPIO_Init+0x2e2>
 8001b22:	bf00      	nop
 8001b24:	10320000 	.word	0x10320000
 8001b28:	10310000 	.word	0x10310000
 8001b2c:	10220000 	.word	0x10220000
 8001b30:	10210000 	.word	0x10210000
 8001b34:	10120000 	.word	0x10120000
 8001b38:	10110000 	.word	0x10110000
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010000 	.word	0x40010000
 8001b44:	40010800 	.word	0x40010800
 8001b48:	40010c00 	.word	0x40010c00
 8001b4c:	40011000 	.word	0x40011000
 8001b50:	40011400 	.word	0x40011400
 8001b54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b58:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <HAL_GPIO_Init+0x304>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	4909      	ldr	r1, [pc, #36]	@ (8001b88 <HAL_GPIO_Init+0x304>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	3301      	adds	r3, #1
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b72:	fa22 f303 	lsr.w	r3, r2, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f47f ae8e 	bne.w	8001898 <HAL_GPIO_Init+0x14>
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	372c      	adds	r7, #44	@ 0x2c
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	40010400 	.word	0x40010400

08001b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b9c:	787b      	ldrb	r3, [r7, #1]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba8:	e003      	b.n	8001bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	041a      	lsls	r2, r3, #16
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	611a      	str	r2, [r3, #16]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	041a      	lsls	r2, r3, #16
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43d9      	mvns	r1, r3
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	400b      	ands	r3, r1
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	611a      	str	r2, [r3, #16]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e12b      	b.n	8001e5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d106      	bne.n	8001c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7fe fc4e 	bl	80004b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2224      	movs	r2, #36	@ 0x24
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c54:	f001 f960 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 8001c58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4a81      	ldr	r2, [pc, #516]	@ (8001e64 <HAL_I2C_Init+0x274>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d807      	bhi.n	8001c74 <HAL_I2C_Init+0x84>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4a80      	ldr	r2, [pc, #512]	@ (8001e68 <HAL_I2C_Init+0x278>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	bf94      	ite	ls
 8001c6c:	2301      	movls	r3, #1
 8001c6e:	2300      	movhi	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	e006      	b.n	8001c82 <HAL_I2C_Init+0x92>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4a7d      	ldr	r2, [pc, #500]	@ (8001e6c <HAL_I2C_Init+0x27c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	bf94      	ite	ls
 8001c7c:	2301      	movls	r3, #1
 8001c7e:	2300      	movhi	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0e7      	b.n	8001e5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4a78      	ldr	r2, [pc, #480]	@ (8001e70 <HAL_I2C_Init+0x280>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0c9b      	lsrs	r3, r3, #18
 8001c94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e64 <HAL_I2C_Init+0x274>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d802      	bhi.n	8001cc4 <HAL_I2C_Init+0xd4>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	e009      	b.n	8001cd8 <HAL_I2C_Init+0xe8>
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001cca:	fb02 f303 	mul.w	r3, r2, r3
 8001cce:	4a69      	ldr	r2, [pc, #420]	@ (8001e74 <HAL_I2C_Init+0x284>)
 8001cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd4:	099b      	lsrs	r3, r3, #6
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	495c      	ldr	r1, [pc, #368]	@ (8001e64 <HAL_I2C_Init+0x274>)
 8001cf4:	428b      	cmp	r3, r1
 8001cf6:	d819      	bhi.n	8001d2c <HAL_I2C_Init+0x13c>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1e59      	subs	r1, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d06:	1c59      	adds	r1, r3, #1
 8001d08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d0c:	400b      	ands	r3, r1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00a      	beq.n	8001d28 <HAL_I2C_Init+0x138>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1e59      	subs	r1, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d20:	3301      	adds	r3, #1
 8001d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d26:	e051      	b.n	8001dcc <HAL_I2C_Init+0x1dc>
 8001d28:	2304      	movs	r3, #4
 8001d2a:	e04f      	b.n	8001dcc <HAL_I2C_Init+0x1dc>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d111      	bne.n	8001d58 <HAL_I2C_Init+0x168>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1e58      	subs	r0, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	440b      	add	r3, r1
 8001d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	e012      	b.n	8001d7e <HAL_I2C_Init+0x18e>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1e58      	subs	r0, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	0099      	lsls	r1, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf0c      	ite	eq
 8001d78:	2301      	moveq	r3, #1
 8001d7a:	2300      	movne	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Init+0x196>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e022      	b.n	8001dcc <HAL_I2C_Init+0x1dc>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10e      	bne.n	8001dac <HAL_I2C_Init+0x1bc>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1e58      	subs	r0, r3, #1
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6859      	ldr	r1, [r3, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	440b      	add	r3, r1
 8001d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001daa:	e00f      	b.n	8001dcc <HAL_I2C_Init+0x1dc>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e58      	subs	r0, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	0099      	lsls	r1, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	6809      	ldr	r1, [r1, #0]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001dfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6911      	ldr	r1, [r2, #16]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68d2      	ldr	r2, [r2, #12]
 8001e06:	4311      	orrs	r1, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	000186a0 	.word	0x000186a0
 8001e68:	001e847f 	.word	0x001e847f
 8001e6c:	003d08ff 	.word	0x003d08ff
 8001e70:	431bde83 	.word	0x431bde83
 8001e74:	10624dd3 	.word	0x10624dd3

08001e78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	461a      	mov	r2, r3
 8001e84:	460b      	mov	r3, r1
 8001e86:	817b      	strh	r3, [r7, #10]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7fe ffd0 	bl	8000e30 <HAL_GetTick>
 8001e90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	f040 80e0 	bne.w	8002060 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	2319      	movs	r3, #25
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4970      	ldr	r1, [pc, #448]	@ (800206c <HAL_I2C_Master_Transmit+0x1f4>)
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 fa92 	bl	80023d4 <I2C_WaitOnFlagUntilTimeout>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e0d3      	b.n	8002062 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_I2C_Master_Transmit+0x50>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e0cc      	b.n	8002062 <HAL_I2C_Master_Transmit+0x1ea>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d007      	beq.n	8001eee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0201 	orr.w	r2, r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001efc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2221      	movs	r2, #33	@ 0x21
 8001f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2210      	movs	r2, #16
 8001f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	893a      	ldrh	r2, [r7, #8]
 8001f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4a50      	ldr	r2, [pc, #320]	@ (8002070 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f30:	8979      	ldrh	r1, [r7, #10]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	6a3a      	ldr	r2, [r7, #32]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f9ca 	bl	80022d0 <I2C_MasterRequestWrite>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e08d      	b.n	8002062 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f5c:	e066      	b.n	800202c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	6a39      	ldr	r1, [r7, #32]
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 fb50 	bl	8002608 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00d      	beq.n	8001f8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d107      	bne.n	8001f86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e06b      	b.n	8002062 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d11b      	bne.n	8002000 <HAL_I2C_Master_Transmit+0x188>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d017      	beq.n	8002000 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	6a39      	ldr	r1, [r7, #32]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 fb47 	bl	8002698 <I2C_WaitOnBTFFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	2b04      	cmp	r3, #4
 8002016:	d107      	bne.n	8002028 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002026:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e01a      	b.n	8002062 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002030:	2b00      	cmp	r3, #0
 8002032:	d194      	bne.n	8001f5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	e000      	b.n	8002062 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002060:	2302      	movs	r3, #2
  }
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	00100002 	.word	0x00100002
 8002070:	ffff0000 	.word	0xffff0000

08002074 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	@ 0x28
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	460b      	mov	r3, r1
 8002082:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7fe fed4 	bl	8000e30 <HAL_GetTick>
 8002088:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b20      	cmp	r3, #32
 8002098:	f040 8111 	bne.w	80022be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2319      	movs	r3, #25
 80020a2:	2201      	movs	r2, #1
 80020a4:	4988      	ldr	r1, [pc, #544]	@ (80022c8 <HAL_I2C_IsDeviceReady+0x254>)
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f994 	bl	80023d4 <I2C_WaitOnFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80020b2:	2302      	movs	r3, #2
 80020b4:	e104      	b.n	80022c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_I2C_IsDeviceReady+0x50>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e0fd      	b.n	80022c0 <HAL_I2C_IsDeviceReady+0x24c>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d007      	beq.n	80020ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2224      	movs	r2, #36	@ 0x24
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4a70      	ldr	r2, [pc, #448]	@ (80022cc <HAL_I2C_IsDeviceReady+0x258>)
 800210c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800211c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f952 	bl	80023d4 <I2C_WaitOnFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002144:	d103      	bne.n	800214e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800214c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e0b6      	b.n	80022c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002152:	897b      	ldrh	r3, [r7, #10]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002160:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002162:	f7fe fe65 	bl	8000e30 <HAL_GetTick>
 8002166:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b02      	cmp	r3, #2
 8002174:	bf0c      	ite	eq
 8002176:	2301      	moveq	r3, #1
 8002178:	2300      	movne	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800218c:	bf0c      	ite	eq
 800218e:	2301      	moveq	r3, #1
 8002190:	2300      	movne	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002196:	e025      	b.n	80021e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002198:	f7fe fe4a 	bl	8000e30 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d302      	bcc.n	80021ae <HAL_I2C_IsDeviceReady+0x13a>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	22a0      	movs	r2, #160	@ 0xa0
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	bf0c      	ite	eq
 80021c4:	2301      	moveq	r3, #1
 80021c6:	2300      	movne	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80021ee:	d005      	beq.n	80021fc <HAL_I2C_IsDeviceReady+0x188>
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <HAL_I2C_IsDeviceReady+0x188>
 80021f6:	7dbb      	ldrb	r3, [r7, #22]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0cd      	beq.n	8002198 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b02      	cmp	r3, #2
 8002210:	d129      	bne.n	8002266 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002220:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	2319      	movs	r3, #25
 800223e:	2201      	movs	r2, #1
 8002240:	4921      	ldr	r1, [pc, #132]	@ (80022c8 <HAL_I2C_IsDeviceReady+0x254>)
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f8c6 	bl	80023d4 <I2C_WaitOnFlagUntilTimeout>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e036      	b.n	80022c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	e02c      	b.n	80022c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002274:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800227e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2319      	movs	r3, #25
 8002286:	2201      	movs	r2, #1
 8002288:	490f      	ldr	r1, [pc, #60]	@ (80022c8 <HAL_I2C_IsDeviceReady+0x254>)
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f8a2 	bl	80023d4 <I2C_WaitOnFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e012      	b.n	80022c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	3301      	adds	r3, #1
 800229e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	f4ff af32 	bcc.w	800210e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2220      	movs	r2, #32
 80022ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80022be:	2302      	movs	r3, #2
  }
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	00100002 	.word	0x00100002
 80022cc:	ffff0000 	.word	0xffff0000

080022d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	460b      	mov	r3, r1
 80022de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d006      	beq.n	80022fa <I2C_MasterRequestWrite+0x2a>
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d003      	beq.n	80022fa <I2C_MasterRequestWrite+0x2a>
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022f8:	d108      	bne.n	800230c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	e00b      	b.n	8002324 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002310:	2b12      	cmp	r3, #18
 8002312:	d107      	bne.n	8002324 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002322:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f84f 	bl	80023d4 <I2C_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00d      	beq.n	8002358 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800234a:	d103      	bne.n	8002354 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e035      	b.n	80023c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002360:	d108      	bne.n	8002374 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002362:	897b      	ldrh	r3, [r7, #10]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	e01b      	b.n	80023ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002374:	897b      	ldrh	r3, [r7, #10]
 8002376:	11db      	asrs	r3, r3, #7
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f003 0306 	and.w	r3, r3, #6
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f063 030f 	orn	r3, r3, #15
 8002384:	b2da      	uxtb	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	490e      	ldr	r1, [pc, #56]	@ (80023cc <I2C_MasterRequestWrite+0xfc>)
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f898 	bl	80024c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e010      	b.n	80023c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023a2:	897b      	ldrh	r3, [r7, #10]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4907      	ldr	r1, [pc, #28]	@ (80023d0 <I2C_MasterRequestWrite+0x100>)
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f888 	bl	80024c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	00010008 	.word	0x00010008
 80023d0:	00010002 	.word	0x00010002

080023d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	4613      	mov	r3, r2
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e4:	e048      	b.n	8002478 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d044      	beq.n	8002478 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ee:	f7fe fd1f 	bl	8000e30 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d302      	bcc.n	8002404 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d139      	bne.n	8002478 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	0c1b      	lsrs	r3, r3, #16
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d10d      	bne.n	800242a <I2C_WaitOnFlagUntilTimeout+0x56>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	43da      	mvns	r2, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4013      	ands	r3, r2
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	e00c      	b.n	8002444 <I2C_WaitOnFlagUntilTimeout+0x70>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	43da      	mvns	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4013      	ands	r3, r2
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	429a      	cmp	r2, r3
 8002448:	d116      	bne.n	8002478 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	f043 0220 	orr.w	r2, r3, #32
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e023      	b.n	80024c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	0c1b      	lsrs	r3, r3, #16
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d10d      	bne.n	800249e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	43da      	mvns	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4013      	ands	r3, r2
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	e00c      	b.n	80024b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	43da      	mvns	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d093      	beq.n	80023e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024d6:	e071      	b.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024e6:	d123      	bne.n	8002530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002500:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	f043 0204 	orr.w	r2, r3, #4
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e067      	b.n	8002600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002536:	d041      	beq.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002538:	f7fe fc7a 	bl	8000e30 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	d302      	bcc.n	800254e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d136      	bne.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10c      	bne.n	8002572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4013      	ands	r3, r2
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf14      	ite	ne
 800256a:	2301      	movne	r3, #1
 800256c:	2300      	moveq	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	e00b      	b.n	800258a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	43da      	mvns	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4013      	ands	r3, r2
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	f043 0220 	orr.w	r2, r3, #32
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e021      	b.n	8002600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	0c1b      	lsrs	r3, r3, #16
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d10c      	bne.n	80025e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	43da      	mvns	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	4013      	ands	r3, r2
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e00b      	b.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4013      	ands	r3, r2
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf14      	ite	ne
 80025f2:	2301      	movne	r3, #1
 80025f4:	2300      	moveq	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f47f af6d 	bne.w	80024d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002614:	e034      	b.n	8002680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f886 	bl	8002728 <I2C_IsAcknowledgeFailed>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e034      	b.n	8002690 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262c:	d028      	beq.n	8002680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262e:	f7fe fbff 	bl	8000e30 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	429a      	cmp	r2, r3
 800263c:	d302      	bcc.n	8002644 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d11d      	bne.n	8002680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264e:	2b80      	cmp	r3, #128	@ 0x80
 8002650:	d016      	beq.n	8002680 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	f043 0220 	orr.w	r2, r3, #32
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e007      	b.n	8002690 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268a:	2b80      	cmp	r3, #128	@ 0x80
 800268c:	d1c3      	bne.n	8002616 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026a4:	e034      	b.n	8002710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f83e 	bl	8002728 <I2C_IsAcknowledgeFailed>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e034      	b.n	8002720 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d028      	beq.n	8002710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026be:	f7fe fbb7 	bl	8000e30 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d11d      	bne.n	8002710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d016      	beq.n	8002710 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	f043 0220 	orr.w	r2, r3, #32
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e007      	b.n	8002720 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b04      	cmp	r3, #4
 800271c:	d1c3      	bne.n	80026a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800273e:	d11b      	bne.n	8002778 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002748:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	f043 0204 	orr.w	r2, r3, #4
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e272      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8087 	beq.w	80028b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a4:	4b92      	ldr	r3, [pc, #584]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d00c      	beq.n	80027ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027b0:	4b8f      	ldr	r3, [pc, #572]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d112      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5e>
 80027bc:	4b8c      	ldr	r3, [pc, #560]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c8:	d10b      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ca:	4b89      	ldr	r3, [pc, #548]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d06c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x12c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d168      	bne.n	80028b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e24c      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x76>
 80027ec:	4b80      	ldr	r3, [pc, #512]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a7f      	ldr	r2, [pc, #508]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e02e      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x98>
 8002802:	4b7b      	ldr	r3, [pc, #492]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7a      	ldr	r2, [pc, #488]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b78      	ldr	r3, [pc, #480]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a77      	ldr	r2, [pc, #476]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002814:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0xbc>
 8002826:	4b72      	ldr	r3, [pc, #456]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a71      	ldr	r2, [pc, #452]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b6f      	ldr	r3, [pc, #444]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6e      	ldr	r2, [pc, #440]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 8002840:	4b6b      	ldr	r3, [pc, #428]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6a      	ldr	r2, [pc, #424]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b68      	ldr	r3, [pc, #416]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a67      	ldr	r2, [pc, #412]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fe fae6 	bl	8000e30 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7fe fae2 	bl	8000e30 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	@ 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e200      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b5d      	ldr	r3, [pc, #372]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xe4>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe fad2 	bl	8000e30 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe face 	bl	8000e30 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	@ 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1ec      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b53      	ldr	r3, [pc, #332]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x10c>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d063      	beq.n	8002986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028be:	4b4c      	ldr	r3, [pc, #304]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028ca:	4b49      	ldr	r3, [pc, #292]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x18c>
 80028d6:	4b46      	ldr	r3, [pc, #280]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b43      	ldr	r3, [pc, #268]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1c0      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b3d      	ldr	r3, [pc, #244]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4939      	ldr	r1, [pc, #228]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e03a      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b36      	ldr	r3, [pc, #216]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe fa87 	bl	8000e30 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7fe fa83 	bl	8000e30 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1a1      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b2d      	ldr	r3, [pc, #180]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b2a      	ldr	r3, [pc, #168]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4927      	ldr	r1, [pc, #156]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b26      	ldr	r3, [pc, #152]	@ (80029f4 <HAL_RCC_OscConfig+0x270>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7fe fa66 	bl	8000e30 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002968:	f7fe fa62 	bl	8000e30 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e180      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b1d      	ldr	r3, [pc, #116]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d03a      	beq.n	8002a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d019      	beq.n	80029ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b17      	ldr	r3, [pc, #92]	@ (80029f8 <HAL_RCC_OscConfig+0x274>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7fe fa46 	bl	8000e30 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a8:	f7fe fa42 	bl	8000e30 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e160      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029c6:	2001      	movs	r0, #1
 80029c8:	f000 faea 	bl	8002fa0 <RCC_Delay>
 80029cc:	e01c      	b.n	8002a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	@ (80029f8 <HAL_RCC_OscConfig+0x274>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d4:	f7fe fa2c 	bl	8000e30 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029da:	e00f      	b.n	80029fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029dc:	f7fe fa28 	bl	8000e30 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d908      	bls.n	80029fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e146      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	42420000 	.word	0x42420000
 80029f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	4b92      	ldr	r3, [pc, #584]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e9      	bne.n	80029dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80a6 	beq.w	8002b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1a:	4b8b      	ldr	r3, [pc, #556]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10d      	bne.n	8002a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	4b88      	ldr	r3, [pc, #544]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a87      	ldr	r2, [pc, #540]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a30:	61d3      	str	r3, [r2, #28]
 8002a32:	4b85      	ldr	r3, [pc, #532]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	4b82      	ldr	r3, [pc, #520]	@ (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d118      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a7e      	ldr	r2, [pc, #504]	@ (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe f9e9 	bl	8000e30 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a62:	f7fe f9e5 	bl	8000e30 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	@ 0x64
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e103      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	4b75      	ldr	r3, [pc, #468]	@ (8002c4c <HAL_RCC_OscConfig+0x4c8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x312>
 8002a88:	4b6f      	ldr	r3, [pc, #444]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	e02d      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x334>
 8002a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a69      	ldr	r2, [pc, #420]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6213      	str	r3, [r2, #32]
 8002aaa:	4b67      	ldr	r3, [pc, #412]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a66      	ldr	r2, [pc, #408]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6213      	str	r3, [r2, #32]
 8002ab6:	e01c      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d10c      	bne.n	8002ada <HAL_RCC_OscConfig+0x356>
 8002ac0:	4b61      	ldr	r3, [pc, #388]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a60      	ldr	r2, [pc, #384]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	4b5e      	ldr	r3, [pc, #376]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a5d      	ldr	r2, [pc, #372]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6213      	str	r3, [r2, #32]
 8002ad8:	e00b      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002ada:	4b5b      	ldr	r3, [pc, #364]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a5a      	ldr	r2, [pc, #360]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	4b58      	ldr	r3, [pc, #352]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a57      	ldr	r2, [pc, #348]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d015      	beq.n	8002b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7fe f999 	bl	8000e30 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7fe f995 	bl	8000e30 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0b1      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	4b4b      	ldr	r3, [pc, #300]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ee      	beq.n	8002b02 <HAL_RCC_OscConfig+0x37e>
 8002b24:	e014      	b.n	8002b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fe f983 	bl	8000e30 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe f97f 	bl	8000e30 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e09b      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b44:	4b40      	ldr	r3, [pc, #256]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ee      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b56:	4b3c      	ldr	r3, [pc, #240]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4a3b      	ldr	r2, [pc, #236]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8087 	beq.w	8002c7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6c:	4b36      	ldr	r3, [pc, #216]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d061      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d146      	bne.n	8002c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b80:	4b33      	ldr	r3, [pc, #204]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fe f953 	bl	8000e30 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fe f94f 	bl	8000e30 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e06d      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba0:	4b29      	ldr	r3, [pc, #164]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bb4:	d108      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bb6:	4b24      	ldr	r3, [pc, #144]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	4921      	ldr	r1, [pc, #132]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a19      	ldr	r1, [r3, #32]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	491b      	ldr	r1, [pc, #108]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fe f923 	bl	8000e30 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe f91f 	bl	8000e30 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e03d      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c00:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x46a>
 8002c0c:	e035      	b.n	8002c7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe f90c 	bl	8000e30 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe f908 	bl	8000e30 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e026      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x498>
 8002c3a:	e01e      	b.n	8002c7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e019      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <HAL_RCC_OscConfig+0x500>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000

08002c88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0d0      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d910      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b67      	ldr	r3, [pc, #412]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 0207 	bic.w	r2, r3, #7
 8002cb2:	4965      	ldr	r1, [pc, #404]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b63      	ldr	r3, [pc, #396]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0b8      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d020      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce4:	4b59      	ldr	r3, [pc, #356]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4a58      	ldr	r2, [pc, #352]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002cea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002cee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cfc:	4b53      	ldr	r3, [pc, #332]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a52      	ldr	r2, [pc, #328]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d08:	4b50      	ldr	r3, [pc, #320]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	494d      	ldr	r1, [pc, #308]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d040      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	4b47      	ldr	r3, [pc, #284]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d115      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e07f      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d46:	4b41      	ldr	r3, [pc, #260]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e073      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d56:	4b3d      	ldr	r3, [pc, #244]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e06b      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d66:	4b39      	ldr	r3, [pc, #228]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f023 0203 	bic.w	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4936      	ldr	r1, [pc, #216]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d78:	f7fe f85a 	bl	8000e30 <HAL_GetTick>
 8002d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d80:	f7fe f856 	bl	8000e30 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e053      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	4b2d      	ldr	r3, [pc, #180]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 020c 	and.w	r2, r3, #12
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d1eb      	bne.n	8002d80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da8:	4b27      	ldr	r3, [pc, #156]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d210      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b24      	ldr	r3, [pc, #144]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 0207 	bic.w	r2, r3, #7
 8002dbe:	4922      	ldr	r1, [pc, #136]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b20      	ldr	r3, [pc, #128]	@ (8002e48 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e032      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de4:	4b19      	ldr	r3, [pc, #100]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4916      	ldr	r1, [pc, #88]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e02:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	490e      	ldr	r1, [pc, #56]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e16:	f000 f821 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	490a      	ldr	r1, [pc, #40]	@ (8002e50 <HAL_RCC_ClockConfig+0x1c8>)
 8002e28:	5ccb      	ldrb	r3, [r1, r3]
 8002e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2e:	4a09      	ldr	r2, [pc, #36]	@ (8002e54 <HAL_RCC_ClockConfig+0x1cc>)
 8002e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e32:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <HAL_RCC_ClockConfig+0x1d0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fefa 	bl	8000c30 <HAL_InitTick>

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	0800460c 	.word	0x0800460c
 8002e54:	20000008 	.word	0x20000008
 8002e58:	2000000c 	.word	0x2000000c

08002e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e76:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d002      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x30>
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d003      	beq.n	8002e92 <HAL_RCC_GetSysClockFreq+0x36>
 8002e8a:	e027      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e8e:	613b      	str	r3, [r7, #16]
      break;
 8002e90:	e027      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	0c9b      	lsrs	r3, r3, #18
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	4a17      	ldr	r2, [pc, #92]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e9c:	5cd3      	ldrb	r3, [r2, r3]
 8002e9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d010      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002eaa:	4b11      	ldr	r3, [pc, #68]	@ (8002ef0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	0c5b      	lsrs	r3, r3, #17
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	4a11      	ldr	r2, [pc, #68]	@ (8002efc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ebe:	fb03 f202 	mul.w	r2, r3, r2
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e004      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a0c      	ldr	r2, [pc, #48]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ed0:	fb02 f303 	mul.w	r3, r2, r3
 8002ed4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	613b      	str	r3, [r7, #16]
      break;
 8002eda:	e002      	b.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4b05      	ldr	r3, [pc, #20]	@ (8002ef4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ede:	613b      	str	r3, [r7, #16]
      break;
 8002ee0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee2:	693b      	ldr	r3, [r7, #16]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	007a1200 	.word	0x007a1200
 8002ef8:	08004624 	.word	0x08004624
 8002efc:	08004634 	.word	0x08004634
 8002f00:	003d0900 	.word	0x003d0900

08002f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f08:	4b02      	ldr	r3, [pc, #8]	@ (8002f14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	20000008 	.word	0x20000008

08002f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f1c:	f7ff fff2 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4903      	ldr	r1, [pc, #12]	@ (8002f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	0800461c 	.word	0x0800461c

08002f40 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	220f      	movs	r2, #15
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f50:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <HAL_RCC_GetClockConfig+0x58>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0203 	and.w	r2, r3, #3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f98 <HAL_RCC_GetClockConfig+0x58>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f68:	4b0b      	ldr	r3, [pc, #44]	@ (8002f98 <HAL_RCC_GetClockConfig+0x58>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002f74:	4b08      	ldr	r3, [pc, #32]	@ (8002f98 <HAL_RCC_GetClockConfig+0x58>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	08db      	lsrs	r3, r3, #3
 8002f7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <HAL_RCC_GetClockConfig+0x5c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0207 	and.w	r2, r3, #7
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40022000 	.word	0x40022000

08002fa0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <RCC_Delay+0x34>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd8 <RCC_Delay+0x38>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0a5b      	lsrs	r3, r3, #9
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fbc:	bf00      	nop
  }
  while (Delay --);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1e5a      	subs	r2, r3, #1
 8002fc2:	60fa      	str	r2, [r7, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f9      	bne.n	8002fbc <RCC_Delay+0x1c>
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr
 8002fd4:	20000008 	.word	0x20000008
 8002fd8:	10624dd3 	.word	0x10624dd3

08002fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e041      	b.n	8003072 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f839 	bl	800307a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f000 f99c 	bl	8003358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e03a      	b.n	800311a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a18      	ldr	r2, [pc, #96]	@ (8003124 <HAL_TIM_Base_Start_IT+0x98>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00e      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x58>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ce:	d009      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x58>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a14      	ldr	r2, [pc, #80]	@ (8003128 <HAL_TIM_Base_Start_IT+0x9c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x58>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a13      	ldr	r2, [pc, #76]	@ (800312c <HAL_TIM_Base_Start_IT+0xa0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d111      	bne.n	8003108 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d010      	beq.n	8003118 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003106:	e007      	b.n	8003118 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	40012c00 	.word	0x40012c00
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800

08003130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d020      	beq.n	8003194 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01b      	beq.n	8003194 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0202 	mvn.w	r2, #2
 8003164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f8d1 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 8003180:	e005      	b.n	800318e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f8c4 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f8d3 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d020      	beq.n	80031e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01b      	beq.n	80031e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0204 	mvn.w	r2, #4
 80031b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8ab 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 80031cc:	e005      	b.n	80031da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f89e 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f8ad 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d020      	beq.n	800322c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01b      	beq.n	800322c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0208 	mvn.w	r2, #8
 80031fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2204      	movs	r2, #4
 8003202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f885 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 8003218:	e005      	b.n	8003226 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f878 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f887 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b00      	cmp	r3, #0
 8003234:	d020      	beq.n	8003278 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01b      	beq.n	8003278 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0210 	mvn.w	r2, #16
 8003248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2208      	movs	r2, #8
 800324e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f85f 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 8003264:	e005      	b.n	8003272 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f852 	bl	8003310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f861 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00c      	beq.n	800329c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0201 	mvn.w	r2, #1
 8003294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fd f9c0 	bl	800061c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8c3 	bl	8003446 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f831 	bl	8003346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00c      	beq.n	8003308 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0220 	mvn.w	r2, #32
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f896 	bl	8003434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a2f      	ldr	r2, [pc, #188]	@ (8003428 <TIM_Base_SetConfig+0xd0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00b      	beq.n	8003388 <TIM_Base_SetConfig+0x30>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003376:	d007      	beq.n	8003388 <TIM_Base_SetConfig+0x30>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a2c      	ldr	r2, [pc, #176]	@ (800342c <TIM_Base_SetConfig+0xd4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0x30>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a2b      	ldr	r2, [pc, #172]	@ (8003430 <TIM_Base_SetConfig+0xd8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d108      	bne.n	800339a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800338e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a22      	ldr	r2, [pc, #136]	@ (8003428 <TIM_Base_SetConfig+0xd0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00b      	beq.n	80033ba <TIM_Base_SetConfig+0x62>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a8:	d007      	beq.n	80033ba <TIM_Base_SetConfig+0x62>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a1f      	ldr	r2, [pc, #124]	@ (800342c <TIM_Base_SetConfig+0xd4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d003      	beq.n	80033ba <TIM_Base_SetConfig+0x62>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003430 <TIM_Base_SetConfig+0xd8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d108      	bne.n	80033cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003428 <TIM_Base_SetConfig+0xd0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d103      	bne.n	8003400 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d005      	beq.n	800341e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f023 0201 	bic.w	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	611a      	str	r2, [r3, #16]
  }
}
 800341e:	bf00      	nop
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40000400 	.word	0x40000400
 8003430:	40000800 	.word	0x40000800

08003434 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr

08003446 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	601a      	str	r2, [r3, #0]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr

0800349e <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800349e:	b480      	push	{r7}
 80034a0:	b085      	sub	sp, #20
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6892      	ldr	r2, [r2, #8]
 80034b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6852      	ldr	r2, [r2, #4]
 80034be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d103      	bne.n	80034d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	1e5a      	subs	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034fa:	4b4f      	ldr	r3, [pc, #316]	@ (8003638 <xTaskIncrementTick+0x148>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f040 808f 	bne.w	8003622 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003504:	4b4d      	ldr	r3, [pc, #308]	@ (800363c <xTaskIncrementTick+0x14c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3301      	adds	r3, #1
 800350a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800350c:	4a4b      	ldr	r2, [pc, #300]	@ (800363c <xTaskIncrementTick+0x14c>)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d121      	bne.n	800355c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003518:	4b49      	ldr	r3, [pc, #292]	@ (8003640 <xTaskIncrementTick+0x150>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	e7fd      	b.n	8003536 <xTaskIncrementTick+0x46>
 800353a:	4b41      	ldr	r3, [pc, #260]	@ (8003640 <xTaskIncrementTick+0x150>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	4b40      	ldr	r3, [pc, #256]	@ (8003644 <xTaskIncrementTick+0x154>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a3e      	ldr	r2, [pc, #248]	@ (8003640 <xTaskIncrementTick+0x150>)
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4a3e      	ldr	r2, [pc, #248]	@ (8003644 <xTaskIncrementTick+0x154>)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b3e      	ldr	r3, [pc, #248]	@ (8003648 <xTaskIncrementTick+0x158>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3301      	adds	r3, #1
 8003554:	4a3c      	ldr	r2, [pc, #240]	@ (8003648 <xTaskIncrementTick+0x158>)
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	f000 f8e6 	bl	8003728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800355c:	4b3b      	ldr	r3, [pc, #236]	@ (800364c <xTaskIncrementTick+0x15c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	429a      	cmp	r2, r3
 8003564:	d348      	bcc.n	80035f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003566:	4b36      	ldr	r3, [pc, #216]	@ (8003640 <xTaskIncrementTick+0x150>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d104      	bne.n	800357a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003570:	4b36      	ldr	r3, [pc, #216]	@ (800364c <xTaskIncrementTick+0x15c>)
 8003572:	f04f 32ff 	mov.w	r2, #4294967295
 8003576:	601a      	str	r2, [r3, #0]
					break;
 8003578:	e03e      	b.n	80035f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800357a:	4b31      	ldr	r3, [pc, #196]	@ (8003640 <xTaskIncrementTick+0x150>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	d203      	bcs.n	800359a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003592:	4a2e      	ldr	r2, [pc, #184]	@ (800364c <xTaskIncrementTick+0x15c>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003598:	e02e      	b.n	80035f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	3304      	adds	r3, #4
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ff7d 	bl	800349e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d004      	beq.n	80035b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	3318      	adds	r3, #24
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff74 	bl	800349e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ba:	2201      	movs	r2, #1
 80035bc:	409a      	lsls	r2, r3
 80035be:	4b24      	ldr	r3, [pc, #144]	@ (8003650 <xTaskIncrementTick+0x160>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	4a22      	ldr	r2, [pc, #136]	@ (8003650 <xTaskIncrementTick+0x160>)
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003654 <xTaskIncrementTick+0x164>)
 80035d6:	441a      	add	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	3304      	adds	r3, #4
 80035dc:	4619      	mov	r1, r3
 80035de:	4610      	mov	r0, r2
 80035e0:	f7ff ff3a 	bl	8003458 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003658 <xTaskIncrementTick+0x168>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d3b9      	bcc.n	8003566 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80035f2:	2301      	movs	r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035f6:	e7b6      	b.n	8003566 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035f8:	4b17      	ldr	r3, [pc, #92]	@ (8003658 <xTaskIncrementTick+0x168>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035fe:	4915      	ldr	r1, [pc, #84]	@ (8003654 <xTaskIncrementTick+0x164>)
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d901      	bls.n	8003614 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003610:	2301      	movs	r3, #1
 8003612:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003614:	4b11      	ldr	r3, [pc, #68]	@ (800365c <xTaskIncrementTick+0x16c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d007      	beq.n	800362c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800361c:	2301      	movs	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	e004      	b.n	800362c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003622:	4b0f      	ldr	r3, [pc, #60]	@ (8003660 <xTaskIncrementTick+0x170>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3301      	adds	r3, #1
 8003628:	4a0d      	ldr	r2, [pc, #52]	@ (8003660 <xTaskIncrementTick+0x170>)
 800362a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800362c:	697b      	ldr	r3, [r7, #20]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000064c 	.word	0x2000064c
 800363c:	20000634 	.word	0x20000634
 8003640:	2000062c 	.word	0x2000062c
 8003644:	20000630 	.word	0x20000630
 8003648:	20000644 	.word	0x20000644
 800364c:	20000648 	.word	0x20000648
 8003650:	20000638 	.word	0x20000638
 8003654:	200005a0 	.word	0x200005a0
 8003658:	2000059c 	.word	0x2000059c
 800365c:	20000640 	.word	0x20000640
 8003660:	2000063c 	.word	0x2000063c

08003664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800366a:	4b29      	ldr	r3, [pc, #164]	@ (8003710 <vTaskSwitchContext+0xac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003672:	4b28      	ldr	r3, [pc, #160]	@ (8003714 <vTaskSwitchContext+0xb0>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003678:	e045      	b.n	8003706 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800367a:	4b26      	ldr	r3, [pc, #152]	@ (8003714 <vTaskSwitchContext+0xb0>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003680:	4b25      	ldr	r3, [pc, #148]	@ (8003718 <vTaskSwitchContext+0xb4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	fab3 f383 	clz	r3, r3
 800368c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800368e:	7afb      	ldrb	r3, [r7, #11]
 8003690:	f1c3 031f 	rsb	r3, r3, #31
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	4921      	ldr	r1, [pc, #132]	@ (800371c <vTaskSwitchContext+0xb8>)
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	607b      	str	r3, [r7, #4]
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	e7fd      	b.n	80036be <vTaskSwitchContext+0x5a>
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4a13      	ldr	r2, [pc, #76]	@ (800371c <vTaskSwitchContext+0xb8>)
 80036ce:	4413      	add	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	3308      	adds	r3, #8
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d104      	bne.n	80036f2 <vTaskSwitchContext+0x8e>
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a09      	ldr	r2, [pc, #36]	@ (8003720 <vTaskSwitchContext+0xbc>)
 80036fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80036fc:	4b08      	ldr	r3, [pc, #32]	@ (8003720 <vTaskSwitchContext+0xbc>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	334c      	adds	r3, #76	@ 0x4c
 8003702:	4a08      	ldr	r2, [pc, #32]	@ (8003724 <vTaskSwitchContext+0xc0>)
 8003704:	6013      	str	r3, [r2, #0]
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr
 8003710:	2000064c 	.word	0x2000064c
 8003714:	20000640 	.word	0x20000640
 8003718:	20000638 	.word	0x20000638
 800371c:	200005a0 	.word	0x200005a0
 8003720:	2000059c 	.word	0x2000059c
 8003724:	20000014 	.word	0x20000014

08003728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800372e:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <prvResetNextTaskUnblockTime+0x38>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003738:	4b0a      	ldr	r3, [pc, #40]	@ (8003764 <prvResetNextTaskUnblockTime+0x3c>)
 800373a:	f04f 32ff 	mov.w	r2, #4294967295
 800373e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003740:	e008      	b.n	8003754 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003742:	4b07      	ldr	r3, [pc, #28]	@ (8003760 <prvResetNextTaskUnblockTime+0x38>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a04      	ldr	r2, [pc, #16]	@ (8003764 <prvResetNextTaskUnblockTime+0x3c>)
 8003752:	6013      	str	r3, [r2, #0]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	2000062c 	.word	0x2000062c
 8003764:	20000648 	.word	0x20000648
	...

08003770 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003770:	4b07      	ldr	r3, [pc, #28]	@ (8003790 <pxCurrentTCBConst2>)
 8003772:	6819      	ldr	r1, [r3, #0]
 8003774:	6808      	ldr	r0, [r1, #0]
 8003776:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800377a:	f380 8809 	msr	PSP, r0
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f04f 0000 	mov.w	r0, #0
 8003786:	f380 8811 	msr	BASEPRI, r0
 800378a:	f04e 0e0d 	orr.w	lr, lr, #13
 800378e:	4770      	bx	lr

08003790 <pxCurrentTCBConst2>:
 8003790:	2000059c 	.word	0x2000059c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
	...

080037a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80037a0:	f3ef 8009 	mrs	r0, PSP
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <pxCurrentTCBConst>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037b0:	6010      	str	r0, [r2, #0]
 80037b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80037b6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80037ba:	f380 8811 	msr	BASEPRI, r0
 80037be:	f7ff ff51 	bl	8003664 <vTaskSwitchContext>
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f380 8811 	msr	BASEPRI, r0
 80037ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80037ce:	6819      	ldr	r1, [r3, #0]
 80037d0:	6808      	ldr	r0, [r1, #0]
 80037d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037d6:	f380 8809 	msr	PSP, r0
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	4770      	bx	lr

080037e0 <pxCurrentTCBConst>:
 80037e0:	2000059c 	.word	0x2000059c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop

080037e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
	__asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	607b      	str	r3, [r7, #4]
}
 8003800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003802:	f7ff fe75 	bl	80034f0 <xTaskIncrementTick>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <SysTick_Handler+0x40>)
 800380e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	2300      	movs	r3, #0
 8003816:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800381e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	e000ed04 	.word	0xe000ed04

0800382c <memset>:
 800382c:	4603      	mov	r3, r0
 800382e:	4402      	add	r2, r0
 8003830:	4293      	cmp	r3, r2
 8003832:	d100      	bne.n	8003836 <memset+0xa>
 8003834:	4770      	bx	lr
 8003836:	f803 1b01 	strb.w	r1, [r3], #1
 800383a:	e7f9      	b.n	8003830 <memset+0x4>

0800383c <__libc_init_array>:
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	2600      	movs	r6, #0
 8003840:	4d0c      	ldr	r5, [pc, #48]	@ (8003874 <__libc_init_array+0x38>)
 8003842:	4c0d      	ldr	r4, [pc, #52]	@ (8003878 <__libc_init_array+0x3c>)
 8003844:	1b64      	subs	r4, r4, r5
 8003846:	10a4      	asrs	r4, r4, #2
 8003848:	42a6      	cmp	r6, r4
 800384a:	d109      	bne.n	8003860 <__libc_init_array+0x24>
 800384c:	f000 f81a 	bl	8003884 <_init>
 8003850:	2600      	movs	r6, #0
 8003852:	4d0a      	ldr	r5, [pc, #40]	@ (800387c <__libc_init_array+0x40>)
 8003854:	4c0a      	ldr	r4, [pc, #40]	@ (8003880 <__libc_init_array+0x44>)
 8003856:	1b64      	subs	r4, r4, r5
 8003858:	10a4      	asrs	r4, r4, #2
 800385a:	42a6      	cmp	r6, r4
 800385c:	d105      	bne.n	800386a <__libc_init_array+0x2e>
 800385e:	bd70      	pop	{r4, r5, r6, pc}
 8003860:	f855 3b04 	ldr.w	r3, [r5], #4
 8003864:	4798      	blx	r3
 8003866:	3601      	adds	r6, #1
 8003868:	e7ee      	b.n	8003848 <__libc_init_array+0xc>
 800386a:	f855 3b04 	ldr.w	r3, [r5], #4
 800386e:	4798      	blx	r3
 8003870:	3601      	adds	r6, #1
 8003872:	e7f2      	b.n	800385a <__libc_init_array+0x1e>
 8003874:	08004638 	.word	0x08004638
 8003878:	08004638 	.word	0x08004638
 800387c:	08004638 	.word	0x08004638
 8003880:	0800463c 	.word	0x0800463c

08003884 <_init>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	bf00      	nop
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr

08003890 <_fini>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	bf00      	nop
 8003894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003896:	bc08      	pop	{r3}
 8003898:	469e      	mov	lr, r3
 800389a:	4770      	bx	lr
