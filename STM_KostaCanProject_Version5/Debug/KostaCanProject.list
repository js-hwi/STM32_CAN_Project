
KostaCanProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005360  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000360c  08005470  08005470  00006470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a7c  08008a7c  0000a090  2**0
                  CONTENTS
  4 .ARM          00000000  08008a7c  08008a7c  0000a090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a7c  08008a7c  0000a090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a7c  08008a7c  00009a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a80  08008a80  00009a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08008a84  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016b8  20000090  08008b14  0000a090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001748  08008b14  0000a748  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001457d  00000000  00000000  0000a0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003775  00000000  00000000  0001e636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  00021db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f77  00000000  00000000  000231b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a638  00000000  00000000  00024127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018014  00000000  00000000  0003e75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095a25  00000000  00000000  00056773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000557c  00000000  00000000  000ec1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f1758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08005458 	.word	0x08005458

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08005458 	.word	0x08005458

08000150 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000154:	4b17      	ldr	r3, [pc, #92]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000156:	4a18      	ldr	r2, [pc, #96]	@ (80001b8 <MX_CAN_Init+0x68>)
 8000158:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800015a:	4b16      	ldr	r3, [pc, #88]	@ (80001b4 <MX_CAN_Init+0x64>)
 800015c:	2209      	movs	r2, #9
 800015e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000160:	4b14      	ldr	r3, [pc, #80]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000162:	2200      	movs	r2, #0
 8000164:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000166:	4b13      	ldr	r3, [pc, #76]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000168:	2200      	movs	r2, #0
 800016a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 800016c:	4b11      	ldr	r3, [pc, #68]	@ (80001b4 <MX_CAN_Init+0x64>)
 800016e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000172:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000174:	4b0f      	ldr	r3, [pc, #60]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000176:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800017a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017c:	4b0d      	ldr	r3, [pc, #52]	@ (80001b4 <MX_CAN_Init+0x64>)
 800017e:	2200      	movs	r2, #0
 8000180:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000182:	4b0c      	ldr	r3, [pc, #48]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000184:	2200      	movs	r2, #0
 8000186:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000188:	4b0a      	ldr	r3, [pc, #40]	@ (80001b4 <MX_CAN_Init+0x64>)
 800018a:	2200      	movs	r2, #0
 800018c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018e:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000190:	2200      	movs	r2, #0
 8000192:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000194:	4b07      	ldr	r3, [pc, #28]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000196:	2200      	movs	r2, #0
 8000198:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800019a:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <MX_CAN_Init+0x64>)
 800019c:	2200      	movs	r2, #0
 800019e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <MX_CAN_Init+0x64>)
 80001a2:	f001 f969 	bl	8001478 <HAL_CAN_Init>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001ac:	f000 fcb8 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	200000ac 	.word	0x200000ac
 80001b8:	40006400 	.word	0x40006400

080001bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	f107 0310 	add.w	r3, r7, #16
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a20      	ldr	r2, [pc, #128]	@ (8000258 <HAL_CAN_MspInit+0x9c>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d139      	bne.n	8000250 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001dc:	4b1f      	ldr	r3, [pc, #124]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001de:	69db      	ldr	r3, [r3, #28]
 80001e0:	4a1e      	ldr	r2, [pc, #120]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001e6:	61d3      	str	r3, [r2, #28]
 80001e8:	4b1c      	ldr	r3, [pc, #112]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001ea:	69db      	ldr	r3, [r3, #28]
 80001ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f4:	4b19      	ldr	r3, [pc, #100]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a18      	ldr	r2, [pc, #96]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001fa:	f043 0304 	orr.w	r3, r3, #4
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b16      	ldr	r3, [pc, #88]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0304 	and.w	r3, r3, #4
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800020c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000210:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	4619      	mov	r1, r3
 8000220:	480f      	ldr	r0, [pc, #60]	@ (8000260 <HAL_CAN_MspInit+0xa4>)
 8000222:	f002 f849 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800022a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800022c:	2302      	movs	r3, #2
 800022e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000230:	2303      	movs	r3, #3
 8000232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	4619      	mov	r1, r3
 800023a:	4809      	ldr	r0, [pc, #36]	@ (8000260 <HAL_CAN_MspInit+0xa4>)
 800023c:	f002 f83c 	bl	80022b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000240:	2200      	movs	r2, #0
 8000242:	2105      	movs	r1, #5
 8000244:	2014      	movs	r0, #20
 8000246:	f002 f80c 	bl	8002262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800024a:	2014      	movs	r0, #20
 800024c:	f002 f825 	bl	800229a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000250:	bf00      	nop
 8000252:	3720      	adds	r7, #32
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40006400 	.word	0x40006400
 800025c:	40021000 	.word	0x40021000
 8000260:	40010800 	.word	0x40010800

08000264 <FND_INIT>:
#include "stm32f103xb.h"

uint8_t _LED_0F[29];
uint32_t n = 0; //hwi

void FND_INIT(){
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
		_LED_0F[0] = 0xC0; //0
 8000268:	4b2d      	ldr	r3, [pc, #180]	@ (8000320 <FND_INIT+0xbc>)
 800026a:	22c0      	movs	r2, #192	@ 0xc0
 800026c:	701a      	strb	r2, [r3, #0]
		_LED_0F[1] = 0xF9; //1
 800026e:	4b2c      	ldr	r3, [pc, #176]	@ (8000320 <FND_INIT+0xbc>)
 8000270:	22f9      	movs	r2, #249	@ 0xf9
 8000272:	705a      	strb	r2, [r3, #1]
		_LED_0F[2] = 0xA4; //2
 8000274:	4b2a      	ldr	r3, [pc, #168]	@ (8000320 <FND_INIT+0xbc>)
 8000276:	22a4      	movs	r2, #164	@ 0xa4
 8000278:	709a      	strb	r2, [r3, #2]
		_LED_0F[3] = 0xB0; //3
 800027a:	4b29      	ldr	r3, [pc, #164]	@ (8000320 <FND_INIT+0xbc>)
 800027c:	22b0      	movs	r2, #176	@ 0xb0
 800027e:	70da      	strb	r2, [r3, #3]
		_LED_0F[4] = 0x99; //4
 8000280:	4b27      	ldr	r3, [pc, #156]	@ (8000320 <FND_INIT+0xbc>)
 8000282:	2299      	movs	r2, #153	@ 0x99
 8000284:	711a      	strb	r2, [r3, #4]
		_LED_0F[5] = 0x92; //5
 8000286:	4b26      	ldr	r3, [pc, #152]	@ (8000320 <FND_INIT+0xbc>)
 8000288:	2292      	movs	r2, #146	@ 0x92
 800028a:	715a      	strb	r2, [r3, #5]
		_LED_0F[6] = 0x82; //6
 800028c:	4b24      	ldr	r3, [pc, #144]	@ (8000320 <FND_INIT+0xbc>)
 800028e:	2282      	movs	r2, #130	@ 0x82
 8000290:	719a      	strb	r2, [r3, #6]
		_LED_0F[7] = 0xF8; //7
 8000292:	4b23      	ldr	r3, [pc, #140]	@ (8000320 <FND_INIT+0xbc>)
 8000294:	22f8      	movs	r2, #248	@ 0xf8
 8000296:	71da      	strb	r2, [r3, #7]
		_LED_0F[8] = 0x80; //8
 8000298:	4b21      	ldr	r3, [pc, #132]	@ (8000320 <FND_INIT+0xbc>)
 800029a:	2280      	movs	r2, #128	@ 0x80
 800029c:	721a      	strb	r2, [r3, #8]
		_LED_0F[9] = 0x90; //9
 800029e:	4b20      	ldr	r3, [pc, #128]	@ (8000320 <FND_INIT+0xbc>)
 80002a0:	2290      	movs	r2, #144	@ 0x90
 80002a2:	725a      	strb	r2, [r3, #9]
		_LED_0F[10] = 0x88; //A
 80002a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000320 <FND_INIT+0xbc>)
 80002a6:	2288      	movs	r2, #136	@ 0x88
 80002a8:	729a      	strb	r2, [r3, #10]
		_LED_0F[11] = 0x83; //b
 80002aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000320 <FND_INIT+0xbc>)
 80002ac:	2283      	movs	r2, #131	@ 0x83
 80002ae:	72da      	strb	r2, [r3, #11]
		_LED_0F[12] = 0xC6; //C
 80002b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000320 <FND_INIT+0xbc>)
 80002b2:	22c6      	movs	r2, #198	@ 0xc6
 80002b4:	731a      	strb	r2, [r3, #12]
		_LED_0F[13] = 0xA1; //d
 80002b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000320 <FND_INIT+0xbc>)
 80002b8:	22a1      	movs	r2, #161	@ 0xa1
 80002ba:	735a      	strb	r2, [r3, #13]
		_LED_0F[14] = 0x86; //E
 80002bc:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <FND_INIT+0xbc>)
 80002be:	2286      	movs	r2, #134	@ 0x86
 80002c0:	739a      	strb	r2, [r3, #14]
		_LED_0F[15] = 0x8E; //F
 80002c2:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <FND_INIT+0xbc>)
 80002c4:	228e      	movs	r2, #142	@ 0x8e
 80002c6:	73da      	strb	r2, [r3, #15]
		_LED_0F[16] = 0xC2; //G
 80002c8:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <FND_INIT+0xbc>)
 80002ca:	22c2      	movs	r2, #194	@ 0xc2
 80002cc:	741a      	strb	r2, [r3, #16]
		_LED_0F[17] = 0x89; //H
 80002ce:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <FND_INIT+0xbc>)
 80002d0:	2289      	movs	r2, #137	@ 0x89
 80002d2:	745a      	strb	r2, [r3, #17]
		_LED_0F[18] = 0xF9; //I
 80002d4:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <FND_INIT+0xbc>)
 80002d6:	22f9      	movs	r2, #249	@ 0xf9
 80002d8:	749a      	strb	r2, [r3, #18]
		_LED_0F[19] = 0xF1; //J
 80002da:	4b11      	ldr	r3, [pc, #68]	@ (8000320 <FND_INIT+0xbc>)
 80002dc:	22f1      	movs	r2, #241	@ 0xf1
 80002de:	74da      	strb	r2, [r3, #19]
		_LED_0F[20] = 0xC3; //L
 80002e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <FND_INIT+0xbc>)
 80002e2:	22c3      	movs	r2, #195	@ 0xc3
 80002e4:	751a      	strb	r2, [r3, #20]
		_LED_0F[21] = 0xA9; //n
 80002e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <FND_INIT+0xbc>)
 80002e8:	22a9      	movs	r2, #169	@ 0xa9
 80002ea:	755a      	strb	r2, [r3, #21]
		_LED_0F[22] = 0xC0; //O
 80002ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <FND_INIT+0xbc>)
 80002ee:	22c0      	movs	r2, #192	@ 0xc0
 80002f0:	759a      	strb	r2, [r3, #22]
		_LED_0F[23] = 0x8C; //P
 80002f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <FND_INIT+0xbc>)
 80002f4:	228c      	movs	r2, #140	@ 0x8c
 80002f6:	75da      	strb	r2, [r3, #23]
		_LED_0F[24] = 0x98; //q
 80002f8:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <FND_INIT+0xbc>)
 80002fa:	2298      	movs	r2, #152	@ 0x98
 80002fc:	761a      	strb	r2, [r3, #24]
		_LED_0F[25] = 0x92; //S
 80002fe:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <FND_INIT+0xbc>)
 8000300:	2292      	movs	r2, #146	@ 0x92
 8000302:	765a      	strb	r2, [r3, #25]
		_LED_0F[26] = 0xC1; //U
 8000304:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <FND_INIT+0xbc>)
 8000306:	22c1      	movs	r2, #193	@ 0xc1
 8000308:	769a      	strb	r2, [r3, #26]
		_LED_0F[27] = 0x91; //Y
 800030a:	4b05      	ldr	r3, [pc, #20]	@ (8000320 <FND_INIT+0xbc>)
 800030c:	2291      	movs	r2, #145	@ 0x91
 800030e:	76da      	strb	r2, [r3, #27]
		_LED_0F[28] = 0xFE; //
 8000310:	4b03      	ldr	r3, [pc, #12]	@ (8000320 <FND_INIT+0xbc>)
 8000312:	22fe      	movs	r2, #254	@ 0xfe
 8000314:	771a      	strb	r2, [r3, #28]
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	200000d4 	.word	0x200000d4

08000324 <send>:


void send(uint8_t x){
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
	for(int i = 8; i >= 1; i--){
 800032e:	2308      	movs	r3, #8
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e022      	b.n	800037a <send+0x56>
		if(x & 0x80){
 8000334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000338:	2b00      	cmp	r3, #0
 800033a:	da06      	bge.n	800034a <send+0x26>
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, HIGH);
 800033c:	2201      	movs	r2, #1
 800033e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000342:	4812      	ldr	r0, [pc, #72]	@ (800038c <send+0x68>)
 8000344:	f002 f93c 	bl	80025c0 <HAL_GPIO_WritePin>
 8000348:	e005      	b.n	8000356 <send+0x32>
		}
		else{
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, LOW);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000350:	480e      	ldr	r0, [pc, #56]	@ (800038c <send+0x68>)
 8000352:	f002 f935 	bl	80025c0 <HAL_GPIO_WritePin>
		}
		x<<=1;
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, LOW);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000362:	480a      	ldr	r0, [pc, #40]	@ (800038c <send+0x68>)
 8000364:	f002 f92c 	bl	80025c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, HIGH);
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800036e:	4807      	ldr	r0, [pc, #28]	@ (800038c <send+0x68>)
 8000370:	f002 f926 	bl	80025c0 <HAL_GPIO_WritePin>
	for(int i = 8; i >= 1; i--){
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	3b01      	subs	r3, #1
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	2b00      	cmp	r3, #0
 800037e:	dcd9      	bgt.n	8000334 <send+0x10>
	}
}
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40010c00 	.word	0x40010c00

08000390 <send_port>:

void send_port(uint8_t X, uint8_t port)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	460a      	mov	r2, r1
 800039a:	71fb      	strb	r3, [r7, #7]
 800039c:	4613      	mov	r3, r2
 800039e:	71bb      	strb	r3, [r7, #6]
  send(X);
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ffbe 	bl	8000324 <send>
  send(port);
 80003a8:	79bb      	ldrb	r3, [r7, #6]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f7ff ffba 	bl	8000324 <send>
  HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003b6:	4806      	ldr	r0, [pc, #24]	@ (80003d0 <send_port+0x40>)
 80003b8:	f002 f902 	bl	80025c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c2:	4803      	ldr	r0, [pc, #12]	@ (80003d0 <send_port+0x40>)
 80003c4:	f002 f8fc 	bl	80025c0 <HAL_GPIO_WritePin>
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40010c00 	.word	0x40010c00

080003d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	4a06      	ldr	r2, [pc, #24]	@ (80003fc <vApplicationGetIdleTaskMemory+0x28>)
 80003e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	4a05      	ldr	r2, [pc, #20]	@ (8000400 <vApplicationGetIdleTaskMemory+0x2c>)
 80003ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2280      	movs	r2, #128	@ 0x80
 80003f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	2000016c 	.word	0x2000016c
 8000400:	2000020c 	.word	0x2000020c

08000404 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000404:	b5b0      	push	{r4, r5, r7, lr}
 8000406:	b08e      	sub	sp, #56	@ 0x38
 8000408:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800040a:	4b14      	ldr	r3, [pc, #80]	@ (800045c <MX_FREERTOS_Init+0x58>)
 800040c:	f107 041c 	add.w	r4, r7, #28
 8000410:	461d      	mov	r5, r3
 8000412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000416:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800041a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800041e:	f107 031c 	add.w	r3, r7, #28
 8000422:	2100      	movs	r1, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f003 fd35 	bl	8003e94 <osThreadCreate>
 800042a:	4603      	mov	r3, r0
 800042c:	4a0c      	ldr	r2, [pc, #48]	@ (8000460 <MX_FREERTOS_Init+0x5c>)
 800042e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 256);
 8000430:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <MX_FREERTOS_Init+0x60>)
 8000432:	463c      	mov	r4, r7
 8000434:	461d      	mov	r5, r3
 8000436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800043a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800043e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000442:	463b      	mov	r3, r7
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f003 fd24 	bl	8003e94 <osThreadCreate>
 800044c:	4603      	mov	r3, r0
 800044e:	4a06      	ldr	r2, [pc, #24]	@ (8000468 <MX_FREERTOS_Init+0x64>)
 8000450:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000452:	bf00      	nop
 8000454:	3738      	adds	r7, #56	@ 0x38
 8000456:	46bd      	mov	sp, r7
 8000458:	bdb0      	pop	{r4, r5, r7, pc}
 800045a:	bf00      	nop
 800045c:	0800547c 	.word	0x0800547c
 8000460:	20000164 	.word	0x20000164
 8000464:	080054a4 	.word	0x080054a4
 8000468:	20000168 	.word	0x20000168

0800046c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
		  canfil.FilterBank = 0;
 8000474:	4b9a      	ldr	r3, [pc, #616]	@ (80006e0 <StartDefaultTask+0x274>)
 8000476:	2200      	movs	r2, #0
 8000478:	615a      	str	r2, [r3, #20]
		  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800047a:	4b99      	ldr	r3, [pc, #612]	@ (80006e0 <StartDefaultTask+0x274>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
		  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000480:	4b97      	ldr	r3, [pc, #604]	@ (80006e0 <StartDefaultTask+0x274>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
		  canfil.FilterIdHigh = 0;
 8000486:	4b96      	ldr	r3, [pc, #600]	@ (80006e0 <StartDefaultTask+0x274>)
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
		  canfil.FilterIdLow = 0;
 800048c:	4b94      	ldr	r3, [pc, #592]	@ (80006e0 <StartDefaultTask+0x274>)
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
		  canfil.FilterMaskIdHigh = 0;
 8000492:	4b93      	ldr	r3, [pc, #588]	@ (80006e0 <StartDefaultTask+0x274>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
		  canfil.FilterMaskIdLow = 0;
 8000498:	4b91      	ldr	r3, [pc, #580]	@ (80006e0 <StartDefaultTask+0x274>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
		  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800049e:	4b90      	ldr	r3, [pc, #576]	@ (80006e0 <StartDefaultTask+0x274>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	61da      	str	r2, [r3, #28]
		  canfil.FilterActivation = ENABLE;
 80004a4:	4b8e      	ldr	r3, [pc, #568]	@ (80006e0 <StartDefaultTask+0x274>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	621a      	str	r2, [r3, #32]
		  canfil.SlaveStartFilterBank = 14;
 80004aa:	4b8d      	ldr	r3, [pc, #564]	@ (80006e0 <StartDefaultTask+0x274>)
 80004ac:	220e      	movs	r2, #14
 80004ae:	625a      	str	r2, [r3, #36]	@ 0x24

		  txHeader.DLC = 8;
 80004b0:	4b8c      	ldr	r3, [pc, #560]	@ (80006e4 <StartDefaultTask+0x278>)
 80004b2:	2208      	movs	r2, #8
 80004b4:	611a      	str	r2, [r3, #16]
		  txHeader.IDE = CAN_ID_STD;
 80004b6:	4b8b      	ldr	r3, [pc, #556]	@ (80006e4 <StartDefaultTask+0x278>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
		  txHeader.RTR = CAN_RTR_DATA;
 80004bc:	4b89      	ldr	r3, [pc, #548]	@ (80006e4 <StartDefaultTask+0x278>)
 80004be:	2200      	movs	r2, #0
 80004c0:	60da      	str	r2, [r3, #12]
		  txHeader.StdId = 0x77;
 80004c2:	4b88      	ldr	r3, [pc, #544]	@ (80006e4 <StartDefaultTask+0x278>)
 80004c4:	2277      	movs	r2, #119	@ 0x77
 80004c6:	601a      	str	r2, [r3, #0]
		  //txHeader.ExtId = 0x02;
		  txHeader.TransmitGlobalTime = DISABLE;
 80004c8:	4b86      	ldr	r3, [pc, #536]	@ (80006e4 <StartDefaultTask+0x278>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	751a      	strb	r2, [r3, #20]

		  HAL_CAN_ConfigFilter(&hcan,&canfil);
 80004ce:	4984      	ldr	r1, [pc, #528]	@ (80006e0 <StartDefaultTask+0x274>)
 80004d0:	4885      	ldr	r0, [pc, #532]	@ (80006e8 <StartDefaultTask+0x27c>)
 80004d2:	f001 f8cc 	bl	800166e <HAL_CAN_ConfigFilter>
		  HAL_CAN_Start(&hcan);
 80004d6:	4884      	ldr	r0, [pc, #528]	@ (80006e8 <StartDefaultTask+0x27c>)
 80004d8:	f001 f992 	bl	8001800 <HAL_CAN_Start>
		  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 80004dc:	2102      	movs	r1, #2
 80004de:	4882      	ldr	r0, [pc, #520]	@ (80006e8 <StartDefaultTask+0x27c>)
 80004e0:	f001 fbc2 	bl	8001c68 <HAL_CAN_ActivateNotification>

		  /* Infinite loop */
		  for(;;)
		  {

			  Velocity = canData[1];
 80004e4:	4b81      	ldr	r3, [pc, #516]	@ (80006ec <StartDefaultTask+0x280>)
 80004e6:	785a      	ldrb	r2, [r3, #1]
 80004e8:	4b81      	ldr	r3, [pc, #516]	@ (80006f0 <StartDefaultTask+0x284>)
 80004ea:	701a      	strb	r2, [r3, #0]
			  uint8_t tmp = Velocity;
 80004ec:	4b80      	ldr	r3, [pc, #512]	@ (80006f0 <StartDefaultTask+0x284>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	75fb      	strb	r3, [r7, #23]
			  if (canData[0] >= 0 && canData[0] <10){
 80004f2:	4b7e      	ldr	r3, [pc, #504]	@ (80006ec <StartDefaultTask+0x280>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b09      	cmp	r3, #9
 80004f8:	d86f      	bhi.n	80005da <StartDefaultTask+0x16e>
				  if(canData[0] ==0){send_port(_LED_0F[0], LED_ADDRESS);}
 80004fa:	4b7c      	ldr	r3, [pc, #496]	@ (80006ec <StartDefaultTask+0x280>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d106      	bne.n	8000510 <StartDefaultTask+0xa4>
 8000502:	4b7c      	ldr	r3, [pc, #496]	@ (80006f4 <StartDefaultTask+0x288>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2101      	movs	r1, #1
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ff41 	bl	8000390 <send_port>
 800050e:	e061      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==1){send_port(_LED_0F[1], LED_ADDRESS);}
 8000510:	4b76      	ldr	r3, [pc, #472]	@ (80006ec <StartDefaultTask+0x280>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d106      	bne.n	8000526 <StartDefaultTask+0xba>
 8000518:	4b76      	ldr	r3, [pc, #472]	@ (80006f4 <StartDefaultTask+0x288>)
 800051a:	785b      	ldrb	r3, [r3, #1]
 800051c:	2101      	movs	r1, #1
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ff36 	bl	8000390 <send_port>
 8000524:	e056      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==2){send_port(_LED_0F[2], LED_ADDRESS);}
 8000526:	4b71      	ldr	r3, [pc, #452]	@ (80006ec <StartDefaultTask+0x280>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d106      	bne.n	800053c <StartDefaultTask+0xd0>
 800052e:	4b71      	ldr	r3, [pc, #452]	@ (80006f4 <StartDefaultTask+0x288>)
 8000530:	789b      	ldrb	r3, [r3, #2]
 8000532:	2101      	movs	r1, #1
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff2b 	bl	8000390 <send_port>
 800053a:	e04b      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==3){send_port(_LED_0F[3], LED_ADDRESS);}
 800053c:	4b6b      	ldr	r3, [pc, #428]	@ (80006ec <StartDefaultTask+0x280>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d106      	bne.n	8000552 <StartDefaultTask+0xe6>
 8000544:	4b6b      	ldr	r3, [pc, #428]	@ (80006f4 <StartDefaultTask+0x288>)
 8000546:	78db      	ldrb	r3, [r3, #3]
 8000548:	2101      	movs	r1, #1
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff ff20 	bl	8000390 <send_port>
 8000550:	e040      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==4){send_port(_LED_0F[4], LED_ADDRESS);}
 8000552:	4b66      	ldr	r3, [pc, #408]	@ (80006ec <StartDefaultTask+0x280>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b04      	cmp	r3, #4
 8000558:	d106      	bne.n	8000568 <StartDefaultTask+0xfc>
 800055a:	4b66      	ldr	r3, [pc, #408]	@ (80006f4 <StartDefaultTask+0x288>)
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	2101      	movs	r1, #1
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff15 	bl	8000390 <send_port>
 8000566:	e035      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==5){send_port(_LED_0F[5], LED_ADDRESS);}
 8000568:	4b60      	ldr	r3, [pc, #384]	@ (80006ec <StartDefaultTask+0x280>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b05      	cmp	r3, #5
 800056e:	d106      	bne.n	800057e <StartDefaultTask+0x112>
 8000570:	4b60      	ldr	r3, [pc, #384]	@ (80006f4 <StartDefaultTask+0x288>)
 8000572:	795b      	ldrb	r3, [r3, #5]
 8000574:	2101      	movs	r1, #1
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ff0a 	bl	8000390 <send_port>
 800057c:	e02a      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==6){send_port(_LED_0F[6], LED_ADDRESS);}
 800057e:	4b5b      	ldr	r3, [pc, #364]	@ (80006ec <StartDefaultTask+0x280>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b06      	cmp	r3, #6
 8000584:	d106      	bne.n	8000594 <StartDefaultTask+0x128>
 8000586:	4b5b      	ldr	r3, [pc, #364]	@ (80006f4 <StartDefaultTask+0x288>)
 8000588:	799b      	ldrb	r3, [r3, #6]
 800058a:	2101      	movs	r1, #1
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff feff 	bl	8000390 <send_port>
 8000592:	e01f      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==7){send_port(_LED_0F[7], LED_ADDRESS);}
 8000594:	4b55      	ldr	r3, [pc, #340]	@ (80006ec <StartDefaultTask+0x280>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b07      	cmp	r3, #7
 800059a:	d106      	bne.n	80005aa <StartDefaultTask+0x13e>
 800059c:	4b55      	ldr	r3, [pc, #340]	@ (80006f4 <StartDefaultTask+0x288>)
 800059e:	79db      	ldrb	r3, [r3, #7]
 80005a0:	2101      	movs	r1, #1
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff fef4 	bl	8000390 <send_port>
 80005a8:	e014      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==8){send_port(_LED_0F[8], LED_ADDRESS);}
 80005aa:	4b50      	ldr	r3, [pc, #320]	@ (80006ec <StartDefaultTask+0x280>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b08      	cmp	r3, #8
 80005b0:	d106      	bne.n	80005c0 <StartDefaultTask+0x154>
 80005b2:	4b50      	ldr	r3, [pc, #320]	@ (80006f4 <StartDefaultTask+0x288>)
 80005b4:	7a1b      	ldrb	r3, [r3, #8]
 80005b6:	2101      	movs	r1, #1
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fee9 	bl	8000390 <send_port>
 80005be:	e009      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==9){send_port(_LED_0F[9], LED_ADDRESS);}
 80005c0:	4b4a      	ldr	r3, [pc, #296]	@ (80006ec <StartDefaultTask+0x280>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b09      	cmp	r3, #9
 80005c6:	d105      	bne.n	80005d4 <StartDefaultTask+0x168>
 80005c8:	4b4a      	ldr	r3, [pc, #296]	@ (80006f4 <StartDefaultTask+0x288>)
 80005ca:	7a5b      	ldrb	r3, [r3, #9]
 80005cc:	2101      	movs	r1, #1
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fede 	bl	8000390 <send_port>
				  tmp = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	75fb      	strb	r3, [r7, #23]
 80005d8:	e0b3      	b.n	8000742 <StartDefaultTask+0x2d6>
			  }
			  else if (canData[0] >= 10 && canData[0] <= 20) {
 80005da:	4b44      	ldr	r3, [pc, #272]	@ (80006ec <StartDefaultTask+0x280>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b09      	cmp	r3, #9
 80005e0:	f240 808a 	bls.w	80006f8 <StartDefaultTask+0x28c>
 80005e4:	4b41      	ldr	r3, [pc, #260]	@ (80006ec <StartDefaultTask+0x280>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b14      	cmp	r3, #20
 80005ea:	f200 8085 	bhi.w	80006f8 <StartDefaultTask+0x28c>
				  if(canData[0] == 10){send_port(_LED_0F[10], LED_ADDRESS);} // 1's digit i cant see. fix it after
 80005ee:	4b3f      	ldr	r3, [pc, #252]	@ (80006ec <StartDefaultTask+0x280>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b0a      	cmp	r3, #10
 80005f4:	d106      	bne.n	8000604 <StartDefaultTask+0x198>
 80005f6:	4b3f      	ldr	r3, [pc, #252]	@ (80006f4 <StartDefaultTask+0x288>)
 80005f8:	7a9b      	ldrb	r3, [r3, #10]
 80005fa:	2101      	movs	r1, #1
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fec7 	bl	8000390 <send_port>
 8000602:	e09d      	b.n	8000740 <StartDefaultTask+0x2d4>
				  else if(canData[0] == 11){send_port(_LED_0F[11], LED_ADDRESS);}
 8000604:	4b39      	ldr	r3, [pc, #228]	@ (80006ec <StartDefaultTask+0x280>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b0b      	cmp	r3, #11
 800060a:	d106      	bne.n	800061a <StartDefaultTask+0x1ae>
 800060c:	4b39      	ldr	r3, [pc, #228]	@ (80006f4 <StartDefaultTask+0x288>)
 800060e:	7adb      	ldrb	r3, [r3, #11]
 8000610:	2101      	movs	r1, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff febc 	bl	8000390 <send_port>
				  if(canData[0] == 10){send_port(_LED_0F[10], LED_ADDRESS);} // 1's digit i cant see. fix it after
 8000618:	e092      	b.n	8000740 <StartDefaultTask+0x2d4>
				  else if(canData[0] == 12){send_port(_LED_0F[12], LED_ADDRESS);}
 800061a:	4b34      	ldr	r3, [pc, #208]	@ (80006ec <StartDefaultTask+0x280>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b0c      	cmp	r3, #12
 8000620:	d106      	bne.n	8000630 <StartDefaultTask+0x1c4>
 8000622:	4b34      	ldr	r3, [pc, #208]	@ (80006f4 <StartDefaultTask+0x288>)
 8000624:	7b1b      	ldrb	r3, [r3, #12]
 8000626:	2101      	movs	r1, #1
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff feb1 	bl	8000390 <send_port>
				  if(canData[0] == 10){send_port(_LED_0F[10], LED_ADDRESS);} // 1's digit i cant see. fix it after
 800062e:	e087      	b.n	8000740 <StartDefaultTask+0x2d4>
				  else if(canData[0] == 13){send_port(_LED_0F[13], LED_ADDRESS);}
 8000630:	4b2e      	ldr	r3, [pc, #184]	@ (80006ec <StartDefaultTask+0x280>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b0d      	cmp	r3, #13
 8000636:	d106      	bne.n	8000646 <StartDefaultTask+0x1da>
 8000638:	4b2e      	ldr	r3, [pc, #184]	@ (80006f4 <StartDefaultTask+0x288>)
 800063a:	7b5b      	ldrb	r3, [r3, #13]
 800063c:	2101      	movs	r1, #1
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fea6 	bl	8000390 <send_port>
				  if(canData[0] == 10){send_port(_LED_0F[10], LED_ADDRESS);} // 1's digit i cant see. fix it after
 8000644:	e07c      	b.n	8000740 <StartDefaultTask+0x2d4>
				  else if(canData[0] == 14){send_port(_LED_0F[14], LED_ADDRESS);}
 8000646:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <StartDefaultTask+0x280>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b0e      	cmp	r3, #14
 800064c:	d106      	bne.n	800065c <StartDefaultTask+0x1f0>
 800064e:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <StartDefaultTask+0x288>)
 8000650:	7b9b      	ldrb	r3, [r3, #14]
 8000652:	2101      	movs	r1, #1
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fe9b 	bl	8000390 <send_port>
				  if(canData[0] == 10){send_port(_LED_0F[10], LED_ADDRESS);} // 1's digit i cant see. fix it after
 800065a:	e071      	b.n	8000740 <StartDefaultTask+0x2d4>
				  else if(canData[0] == 15){send_port(_LED_0F[15], LED_ADDRESS);}
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <StartDefaultTask+0x280>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d106      	bne.n	8000672 <StartDefaultTask+0x206>
 8000664:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <StartDefaultTask+0x288>)
 8000666:	7bdb      	ldrb	r3, [r3, #15]
 8000668:	2101      	movs	r1, #1
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fe90 	bl	8000390 <send_port>
				  if(canData[0] == 10){send_port(_LED_0F[10], LED_ADDRESS);} // 1's digit i cant see. fix it after
 8000670:	e066      	b.n	8000740 <StartDefaultTask+0x2d4>
				  else if(canData[0] == 16){send_port(_LED_0F[16], LED_ADDRESS);}
 8000672:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <StartDefaultTask+0x280>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b10      	cmp	r3, #16
 8000678:	d106      	bne.n	8000688 <StartDefaultTask+0x21c>
 800067a:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <StartDefaultTask+0x288>)
 800067c:	7c1b      	ldrb	r3, [r3, #16]
 800067e:	2101      	movs	r1, #1
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff fe85 	bl	8000390 <send_port>
				  if(canData[0] == 10){send_port(_LED_0F[10], LED_ADDRESS);} // 1's digit i cant see. fix it after
 8000686:	e05b      	b.n	8000740 <StartDefaultTask+0x2d4>
				  else if(canData[0] == 17){send_port(_LED_0F[17], LED_ADDRESS);}
 8000688:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <StartDefaultTask+0x280>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b11      	cmp	r3, #17
 800068e:	d106      	bne.n	800069e <StartDefaultTask+0x232>
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <StartDefaultTask+0x288>)
 8000692:	7c5b      	ldrb	r3, [r3, #17]
 8000694:	2101      	movs	r1, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fe7a 	bl	8000390 <send_port>
				  if(canData[0] == 10){send_port(_LED_0F[10], LED_ADDRESS);} // 1's digit i cant see. fix it after
 800069c:	e050      	b.n	8000740 <StartDefaultTask+0x2d4>
				  else if(canData[0] == 18){send_port(_LED_0F[18], LED_ADDRESS);}
 800069e:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <StartDefaultTask+0x280>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b12      	cmp	r3, #18
 80006a4:	d106      	bne.n	80006b4 <StartDefaultTask+0x248>
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <StartDefaultTask+0x288>)
 80006a8:	7c9b      	ldrb	r3, [r3, #18]
 80006aa:	2101      	movs	r1, #1
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fe6f 	bl	8000390 <send_port>
				  if(canData[0] == 10){send_port(_LED_0F[10], LED_ADDRESS);} // 1's digit i cant see. fix it after
 80006b2:	e045      	b.n	8000740 <StartDefaultTask+0x2d4>
				  else if(canData[0] == 19){send_port(_LED_0F[19], LED_ADDRESS);}
 80006b4:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <StartDefaultTask+0x280>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b13      	cmp	r3, #19
 80006ba:	d106      	bne.n	80006ca <StartDefaultTask+0x25e>
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <StartDefaultTask+0x288>)
 80006be:	7cdb      	ldrb	r3, [r3, #19]
 80006c0:	2101      	movs	r1, #1
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fe64 	bl	8000390 <send_port>
				  if(canData[0] == 10){send_port(_LED_0F[10], LED_ADDRESS);} // 1's digit i cant see. fix it after
 80006c8:	e03a      	b.n	8000740 <StartDefaultTask+0x2d4>
				  else if(canData[0] == 20){send_port(_LED_0F[20], LED_ADDRESS);}
 80006ca:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <StartDefaultTask+0x280>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b14      	cmp	r3, #20
 80006d0:	d136      	bne.n	8000740 <StartDefaultTask+0x2d4>
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <StartDefaultTask+0x288>)
 80006d4:	7d1b      	ldrb	r3, [r3, #20]
 80006d6:	2101      	movs	r1, #1
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fe59 	bl	8000390 <send_port>
				  if(canData[0] == 10){send_port(_LED_0F[10], LED_ADDRESS);} // 1's digit i cant see. fix it after
 80006de:	e02f      	b.n	8000740 <StartDefaultTask+0x2d4>
 80006e0:	20000138 	.word	0x20000138
 80006e4:	20000110 	.word	0x20000110
 80006e8:	200000ac 	.word	0x200000ac
 80006ec:	20000128 	.word	0x20000128
 80006f0:	200000f1 	.word	0x200000f1
 80006f4:	200000d4 	.word	0x200000d4
			  }
			  else if (canData[0] > 20 && canData[0] <= 30) tmp= 15;
 80006f8:	4b20      	ldr	r3, [pc, #128]	@ (800077c <StartDefaultTask+0x310>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b14      	cmp	r3, #20
 80006fe:	d906      	bls.n	800070e <StartDefaultTask+0x2a2>
 8000700:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <StartDefaultTask+0x310>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b1e      	cmp	r3, #30
 8000706:	d802      	bhi.n	800070e <StartDefaultTask+0x2a2>
 8000708:	230f      	movs	r3, #15
 800070a:	75fb      	strb	r3, [r7, #23]
 800070c:	e019      	b.n	8000742 <StartDefaultTask+0x2d6>
			  else if (canData[0] > 30 && canData[0] <= 40) tmp = 20;
 800070e:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <StartDefaultTask+0x310>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b1e      	cmp	r3, #30
 8000714:	d906      	bls.n	8000724 <StartDefaultTask+0x2b8>
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <StartDefaultTask+0x310>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b28      	cmp	r3, #40	@ 0x28
 800071c:	d802      	bhi.n	8000724 <StartDefaultTask+0x2b8>
 800071e:	2314      	movs	r3, #20
 8000720:	75fb      	strb	r3, [r7, #23]
 8000722:	e00e      	b.n	8000742 <StartDefaultTask+0x2d6>
			  else if (canData[0] > 40 && canData[0] <= 50) tmp = 25;
 8000724:	4b15      	ldr	r3, [pc, #84]	@ (800077c <StartDefaultTask+0x310>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b28      	cmp	r3, #40	@ 0x28
 800072a:	d906      	bls.n	800073a <StartDefaultTask+0x2ce>
 800072c:	4b13      	ldr	r3, [pc, #76]	@ (800077c <StartDefaultTask+0x310>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b32      	cmp	r3, #50	@ 0x32
 8000732:	d802      	bhi.n	800073a <StartDefaultTask+0x2ce>
 8000734:	2319      	movs	r3, #25
 8000736:	75fb      	strb	r3, [r7, #23]
 8000738:	e003      	b.n	8000742 <StartDefaultTask+0x2d6>
			  else{
				  tmp = 30;
 800073a:	231e      	movs	r3, #30
 800073c:	75fb      	strb	r3, [r7, #23]
 800073e:	e000      	b.n	8000742 <StartDefaultTask+0x2d6>
				  if(canData[0] == 10){send_port(_LED_0F[10], LED_ADDRESS);} // 1's digit i cant see. fix it after
 8000740:	bf00      	nop
			  }

			  uint8_t csend[] = {canData[0], tmp, 0, 0, 0, 0 , 0 , 0};
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <StartDefaultTask+0x310>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	733b      	strb	r3, [r7, #12]
 8000748:	7dfb      	ldrb	r3, [r7, #23]
 800074a:	737b      	strb	r3, [r7, #13]
 800074c:	2300      	movs	r3, #0
 800074e:	73bb      	strb	r3, [r7, #14]
 8000750:	2300      	movs	r3, #0
 8000752:	73fb      	strb	r3, [r7, #15]
 8000754:	2300      	movs	r3, #0
 8000756:	743b      	strb	r3, [r7, #16]
 8000758:	2300      	movs	r3, #0
 800075a:	747b      	strb	r3, [r7, #17]
 800075c:	2300      	movs	r3, #0
 800075e:	74bb      	strb	r3, [r7, #18]
 8000760:	2300      	movs	r3, #0
 8000762:	74fb      	strb	r3, [r7, #19]
			  HAL_CAN_AddTxMessage(&hcan,&txHeader,csend,&canMailbox);
 8000764:	f107 020c 	add.w	r2, r7, #12
 8000768:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <StartDefaultTask+0x314>)
 800076a:	4906      	ldr	r1, [pc, #24]	@ (8000784 <StartDefaultTask+0x318>)
 800076c:	4806      	ldr	r0, [pc, #24]	@ (8000788 <StartDefaultTask+0x31c>)
 800076e:	f001 f88b 	bl	8001888 <HAL_CAN_AddTxMessage>


			  osDelay(1000);
 8000772:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000776:	f003 fbd9 	bl	8003f2c <osDelay>
		  {
 800077a:	e6b3      	b.n	80004e4 <StartDefaultTask+0x78>
 800077c:	20000128 	.word	0x20000128
 8000780:	20000160 	.word	0x20000160
 8000784:	20000110 	.word	0x20000110
 8000788:	200000ac 	.word	0x200000ac

0800078c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af02      	add	r7, sp, #8
 8000792:	6078      	str	r0, [r7, #4]
	//functionIdle();

  /* Infinite loop */
  for(;;)
  {
	  if(canData[0] < 10){
 8000794:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <StartTask02+0x74>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b09      	cmp	r3, #9
 800079a:	d816      	bhi.n	80007ca <StartTask02+0x3e>
		  	SSD1306_Clear();
 800079c:	f000 fc65 	bl	800106a <SSD1306_Clear>
		  	SSD1306_GotoXY (0,0);
 80007a0:	2100      	movs	r1, #0
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 fba8 	bl	8000ef8 <SSD1306_GotoXY>
		    SSD1306_Puts ("STOP!!", &Font_11x18, 1);
 80007a8:	2201      	movs	r2, #1
 80007aa:	4916      	ldr	r1, [pc, #88]	@ (8000804 <StartTask02+0x78>)
 80007ac:	4816      	ldr	r0, [pc, #88]	@ (8000808 <StartTask02+0x7c>)
 80007ae:	f000 fc37 	bl	8001020 <SSD1306_Puts>
		    SSD1306_GotoXY (10, 30);
 80007b2:	211e      	movs	r1, #30
 80007b4:	200a      	movs	r0, #10
 80007b6:	f000 fb9f 	bl	8000ef8 <SSD1306_GotoXY>
		    SSD1306_Puts ("  Dangerous :)", &Font_11x18, 1);
 80007ba:	2201      	movs	r2, #1
 80007bc:	4911      	ldr	r1, [pc, #68]	@ (8000804 <StartTask02+0x78>)
 80007be:	4813      	ldr	r0, [pc, #76]	@ (800080c <StartTask02+0x80>)
 80007c0:	f000 fc2e 	bl	8001020 <SSD1306_Puts>
		    SSD1306_UpdateScreen(); //display
 80007c4:	f000 faf4 	bl	8000db0 <SSD1306_UpdateScreen>
 80007c8:	e7e4      	b.n	8000794 <StartTask02+0x8>
	  }
	  else{
		  for (int i = 0; i < sizeof(horseFrames) / sizeof(horseFrames[0]); i++) { //hwi
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	e013      	b.n	80007f8 <StartTask02+0x6c>
		  	          SSD1306_Clear();
 80007d0:	f000 fc4b 	bl	800106a <SSD1306_Clear>
		  	          SSD1306_DrawBitmap(0, 0, horseFrames[i], 128, 64, 1);
 80007d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000810 <StartTask02+0x84>)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007dc:	2301      	movs	r3, #1
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	2340      	movs	r3, #64	@ 0x40
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2380      	movs	r3, #128	@ 0x80
 80007e6:	2100      	movs	r1, #0
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 f9b5 	bl	8000b58 <SSD1306_DrawBitmap>
		  	          SSD1306_UpdateScreen();
 80007ee:	f000 fadf 	bl	8000db0 <SSD1306_UpdateScreen>
		  for (int i = 0; i < sizeof(horseFrames) / sizeof(horseFrames[0]); i++) { //hwi
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	3301      	adds	r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b09      	cmp	r3, #9
 80007fc:	d9e8      	bls.n	80007d0 <StartTask02+0x44>
	  if(canData[0] < 10){
 80007fe:	e7c9      	b.n	8000794 <StartTask02+0x8>
 8000800:	20000128 	.word	0x20000128
 8000804:	20000000 	.word	0x20000000
 8000808:	080054c0 	.word	0x080054c0
 800080c:	080054c8 	.word	0x080054c8
 8000810:	20000008 	.word	0x20000008

08000814 <HAL_CAN_RxFifo0MsgPendingCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800081e:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000820:	2100      	movs	r1, #0
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f001 f8ff 	bl	8001a26 <HAL_CAN_GetRxMessage>
	/*
	for(int i = 0; i<2; i++){
		canData[i] = canRX[i];
	}
	*/
	memcpy(canData, canRX, sizeof(canData)); //hwi
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800082a:	4a04      	ldr	r2, [pc, #16]	@ (800083c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800082c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000830:	e883 0003 	stmia.w	r3, {r0, r1}
	if (rxHeader.StdId == 0x0F6) {
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	}
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000130 	.word	0x20000130
 8000840:	200000f4 	.word	0x200000f4
 8000844:	20000128 	.word	0x20000128

08000848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b2e      	ldr	r3, [pc, #184]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a2d      	ldr	r2, [pc, #180]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000862:	f043 0310 	orr.w	r3, r3, #16
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0310 	and.w	r3, r3, #16
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000874:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a27      	ldr	r2, [pc, #156]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800087a:	f043 0320 	orr.w	r3, r3, #32
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0320 	and.w	r3, r3, #32
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <MX_GPIO_Init+0xd0>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_GPIO_Init+0xd0>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0308 	and.w	r3, r3, #8
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_GPIO_Init+0xd0>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c2:	4816      	ldr	r0, [pc, #88]	@ (800091c <MX_GPIO_Init+0xd4>)
 80008c4:	f001 fe7c 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80008ce:	4814      	ldr	r0, [pc, #80]	@ (8000920 <MX_GPIO_Init+0xd8>)
 80008d0:	f001 fe76 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	480b      	ldr	r0, [pc, #44]	@ (800091c <MX_GPIO_Init+0xd4>)
 80008ee:	f001 fce3 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin;
 80008f2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80008f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4619      	mov	r1, r3
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_GPIO_Init+0xd8>)
 800090c:	f001 fcd4 	bl	80022b8 <HAL_GPIO_Init>

}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40021000 	.word	0x40021000
 800091c:	40011000 	.word	0x40011000
 8000920:	40010c00 	.word	0x40010c00

08000924 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <MX_I2C2_Init+0x50>)
 800092a:	4a13      	ldr	r2, [pc, #76]	@ (8000978 <MX_I2C2_Init+0x54>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_I2C2_Init+0x50>)
 8000930:	4a12      	ldr	r2, [pc, #72]	@ (800097c <MX_I2C2_Init+0x58>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <MX_I2C2_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_I2C2_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <MX_I2C2_Init+0x50>)
 8000942:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000946:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <MX_I2C2_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <MX_I2C2_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <MX_I2C2_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <MX_I2C2_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_I2C2_Init+0x50>)
 8000962:	f001 fe45 	bl	80025f0 <HAL_I2C_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800096c:	f000 f8d8 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000040c 	.word	0x2000040c
 8000978:	40005800 	.word	0x40005800
 800097c:	00061a80 	.word	0x00061a80

08000980 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a16      	ldr	r2, [pc, #88]	@ (80009f4 <HAL_I2C_MspInit+0x74>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d124      	bne.n	80009ea <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <HAL_I2C_MspInit+0x78>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a14      	ldr	r2, [pc, #80]	@ (80009f8 <HAL_I2C_MspInit+0x78>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_I2C_MspInit+0x78>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0308 	and.w	r3, r3, #8
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009be:	2312      	movs	r3, #18
 80009c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4619      	mov	r1, r3
 80009cc:	480b      	ldr	r0, [pc, #44]	@ (80009fc <HAL_I2C_MspInit+0x7c>)
 80009ce:	f001 fc73 	bl	80022b8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <HAL_I2C_MspInit+0x78>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <HAL_I2C_MspInit+0x78>)
 80009d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009dc:	61d3      	str	r3, [r2, #28]
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_I2C_MspInit+0x78>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80009ea:	bf00      	nop
 80009ec:	3720      	adds	r7, #32
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40005800 	.word	0x40005800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010c00 	.word	0x40010c00

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a04:	f000 fce2 	bl	80013cc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a08:	f000 f832 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0c:	f7ff ff1c 	bl	8000848 <MX_GPIO_Init>
  MX_CAN_Init();
 8000a10:	f7ff fb9e 	bl	8000150 <MX_CAN_Init>
  MX_I2C2_Init();
 8000a14:	f7ff ff86 	bl	8000924 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  FND_INIT();
 8000a18:	f7ff fc24 	bl	8000264 <FND_INIT>
  SSD1306_Init();
 8000a1c:	f000 f904 	bl	8000c28 <SSD1306_Init>

  SSD1306_GotoXY (0,0);
 8000a20:	2100      	movs	r1, #0
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 fa68 	bl	8000ef8 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	490e      	ldr	r1, [pc, #56]	@ (8000a64 <main+0x64>)
 8000a2c:	480e      	ldr	r0, [pc, #56]	@ (8000a68 <main+0x68>)
 8000a2e:	f000 faf7 	bl	8001020 <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 8000a32:	211e      	movs	r1, #30
 8000a34:	200a      	movs	r0, #10
 8000a36:	f000 fa5f 	bl	8000ef8 <SSD1306_GotoXY>
  SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4909      	ldr	r1, [pc, #36]	@ (8000a64 <main+0x64>)
 8000a3e:	480b      	ldr	r0, [pc, #44]	@ (8000a6c <main+0x6c>)
 8000a40:	f000 faee 	bl	8001020 <SSD1306_Puts>
  SSD1306_UpdateScreen(); //display
 8000a44:	f000 f9b4 	bl	8000db0 <SSD1306_UpdateScreen>

  HAL_Delay(2000);
 8000a48:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a4c:	f000 fcf0 	bl	8001430 <HAL_Delay>

  SSD1306_InvertDisplay(0);  // normalize the display
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 f86b 	bl	8000b2c <SSD1306_InvertDisplay>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000a56:	f7ff fcd5 	bl	8000404 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a5a:	f003 fa14 	bl	8003e86 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000a5e:	bf00      	nop
 8000a60:	e7fd      	b.n	8000a5e <main+0x5e>
 8000a62:	bf00      	nop
 8000a64:	20000000 	.word	0x20000000
 8000a68:	080054d8 	.word	0x080054d8
 8000a6c:	080054e0 	.word	0x080054e0

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b090      	sub	sp, #64	@ 0x40
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0318 	add.w	r3, r7, #24
 8000a7a:	2228      	movs	r2, #40	@ 0x28
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f004 fc12 	bl	80052a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 0318 	add.w	r3, r7, #24
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 fb63 	bl	8003184 <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ac4:	f000 f82c 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	230f      	movs	r3, #15
 8000aca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000acc:	2302      	movs	r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 fdd0 	bl	8003688 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000aee:	f000 f817 	bl	8000b20 <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3740      	adds	r7, #64	@ 0x40
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d101      	bne.n	8000b12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b0e:	f000 fc73 	bl	80013f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40000800 	.word	0x40000800

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <Error_Handler+0x8>

08000b2c <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d005      	beq.n	8000b46 <SSD1306_InvertDisplay+0x1a>
 8000b3a:	22a7      	movs	r2, #167	@ 0xa7
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2078      	movs	r0, #120	@ 0x78
 8000b40:	f000 fb16 	bl	8001170 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8000b44:	e004      	b.n	8000b50 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 8000b46:	22a6      	movs	r2, #166	@ 0xa6
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2078      	movs	r0, #120	@ 0x78
 8000b4c:	f000 fb10 	bl	8001170 <ssd1306_I2C_Write>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <SSD1306_DrawBitmap>:


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60ba      	str	r2, [r7, #8]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4603      	mov	r3, r0
 8000b64:	81fb      	strh	r3, [r7, #14]
 8000b66:	460b      	mov	r3, r1
 8000b68:	81bb      	strh	r3, [r7, #12]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b72:	3307      	adds	r3, #7
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da00      	bge.n	8000b7a <SSD1306_DrawBitmap+0x22>
 8000b78:	3307      	adds	r3, #7
 8000b7a:	10db      	asrs	r3, r3, #3
 8000b7c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	82bb      	strh	r3, [r7, #20]
 8000b86:	e044      	b.n	8000c12 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	827b      	strh	r3, [r7, #18]
 8000b8c:	e02f      	b.n	8000bee <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000b8e:	8a7b      	ldrh	r3, [r7, #18]
 8000b90:	f003 0307 	and.w	r3, r3, #7
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000b98:	7dfb      	ldrb	r3, [r7, #23]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	75fb      	strb	r3, [r7, #23]
 8000b9e:	e012      	b.n	8000bc6 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000ba0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ba4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000ba8:	fb03 f202 	mul.w	r2, r3, r2
 8000bac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	da00      	bge.n	8000bb6 <SSD1306_DrawBitmap+0x5e>
 8000bb4:	3307      	adds	r3, #7
 8000bb6:	10db      	asrs	r3, r3, #3
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	4413      	add	r3, r2
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	da09      	bge.n	8000be2 <SSD1306_DrawBitmap+0x8a>
 8000bce:	89fa      	ldrh	r2, [r7, #14]
 8000bd0:	8a7b      	ldrh	r3, [r7, #18]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	89b9      	ldrh	r1, [r7, #12]
 8000bd8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 f92d 	bl	8000e3c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000be2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	3301      	adds	r3, #1
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	827b      	strh	r3, [r7, #18]
 8000bee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	dbc9      	blt.n	8000b8e <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000bfa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	3301      	adds	r3, #1
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	82bb      	strh	r3, [r7, #20]
 8000c06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	81bb      	strh	r3, [r7, #12]
 8000c12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000c16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	dbb4      	blt.n	8000b88 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000c1e:	bf00      	nop
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000c2e:	f000 fa25 	bl	800107c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&H_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000c32:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000c36:	2201      	movs	r2, #1
 8000c38:	2178      	movs	r1, #120	@ 0x78
 8000c3a:	485b      	ldr	r0, [pc, #364]	@ (8000da8 <SSD1306_Init+0x180>)
 8000c3c:	f001 ff1a 	bl	8002a74 <HAL_I2C_IsDeviceReady>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e0a9      	b.n	8000d9e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000c4a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000c4e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c50:	e002      	b.n	8000c58 <SSD1306_Init+0x30>
		p--;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f9      	bne.n	8000c52 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000c5e:	22ae      	movs	r2, #174	@ 0xae
 8000c60:	2100      	movs	r1, #0
 8000c62:	2078      	movs	r0, #120	@ 0x78
 8000c64:	f000 fa84 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000c68:	2220      	movs	r2, #32
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2078      	movs	r0, #120	@ 0x78
 8000c6e:	f000 fa7f 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c72:	2210      	movs	r2, #16
 8000c74:	2100      	movs	r1, #0
 8000c76:	2078      	movs	r0, #120	@ 0x78
 8000c78:	f000 fa7a 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c7c:	22b0      	movs	r2, #176	@ 0xb0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2078      	movs	r0, #120	@ 0x78
 8000c82:	f000 fa75 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000c86:	22c8      	movs	r2, #200	@ 0xc8
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2078      	movs	r0, #120	@ 0x78
 8000c8c:	f000 fa70 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	2078      	movs	r0, #120	@ 0x78
 8000c96:	f000 fa6b 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000c9a:	2210      	movs	r2, #16
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2078      	movs	r0, #120	@ 0x78
 8000ca0:	f000 fa66 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000ca4:	2240      	movs	r2, #64	@ 0x40
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2078      	movs	r0, #120	@ 0x78
 8000caa:	f000 fa61 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000cae:	2281      	movs	r2, #129	@ 0x81
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2078      	movs	r0, #120	@ 0x78
 8000cb4:	f000 fa5c 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000cb8:	22ff      	movs	r2, #255	@ 0xff
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2078      	movs	r0, #120	@ 0x78
 8000cbe:	f000 fa57 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000cc2:	22a1      	movs	r2, #161	@ 0xa1
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2078      	movs	r0, #120	@ 0x78
 8000cc8:	f000 fa52 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000ccc:	22a6      	movs	r2, #166	@ 0xa6
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2078      	movs	r0, #120	@ 0x78
 8000cd2:	f000 fa4d 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000cd6:	22a8      	movs	r2, #168	@ 0xa8
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2078      	movs	r0, #120	@ 0x78
 8000cdc:	f000 fa48 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000ce0:	223f      	movs	r2, #63	@ 0x3f
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2078      	movs	r0, #120	@ 0x78
 8000ce6:	f000 fa43 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000cea:	22a4      	movs	r2, #164	@ 0xa4
 8000cec:	2100      	movs	r1, #0
 8000cee:	2078      	movs	r0, #120	@ 0x78
 8000cf0:	f000 fa3e 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000cf4:	22d3      	movs	r2, #211	@ 0xd3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2078      	movs	r0, #120	@ 0x78
 8000cfa:	f000 fa39 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2078      	movs	r0, #120	@ 0x78
 8000d04:	f000 fa34 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d08:	22d5      	movs	r2, #213	@ 0xd5
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2078      	movs	r0, #120	@ 0x78
 8000d0e:	f000 fa2f 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000d12:	22f0      	movs	r2, #240	@ 0xf0
 8000d14:	2100      	movs	r1, #0
 8000d16:	2078      	movs	r0, #120	@ 0x78
 8000d18:	f000 fa2a 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000d1c:	22d9      	movs	r2, #217	@ 0xd9
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2078      	movs	r0, #120	@ 0x78
 8000d22:	f000 fa25 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000d26:	2222      	movs	r2, #34	@ 0x22
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2078      	movs	r0, #120	@ 0x78
 8000d2c:	f000 fa20 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000d30:	22da      	movs	r2, #218	@ 0xda
 8000d32:	2100      	movs	r1, #0
 8000d34:	2078      	movs	r0, #120	@ 0x78
 8000d36:	f000 fa1b 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000d3a:	2212      	movs	r2, #18
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2078      	movs	r0, #120	@ 0x78
 8000d40:	f000 fa16 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000d44:	22db      	movs	r2, #219	@ 0xdb
 8000d46:	2100      	movs	r1, #0
 8000d48:	2078      	movs	r0, #120	@ 0x78
 8000d4a:	f000 fa11 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000d4e:	2220      	movs	r2, #32
 8000d50:	2100      	movs	r1, #0
 8000d52:	2078      	movs	r0, #120	@ 0x78
 8000d54:	f000 fa0c 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000d58:	228d      	movs	r2, #141	@ 0x8d
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2078      	movs	r0, #120	@ 0x78
 8000d5e:	f000 fa07 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000d62:	2214      	movs	r2, #20
 8000d64:	2100      	movs	r1, #0
 8000d66:	2078      	movs	r0, #120	@ 0x78
 8000d68:	f000 fa02 	bl	8001170 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000d6c:	22af      	movs	r2, #175	@ 0xaf
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2078      	movs	r0, #120	@ 0x78
 8000d72:	f000 f9fd 	bl	8001170 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000d76:	222e      	movs	r2, #46	@ 0x2e
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2078      	movs	r0, #120	@ 0x78
 8000d7c:	f000 f9f8 	bl	8001170 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f000 f843 	bl	8000e0c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000d86:	f000 f813 	bl	8000db0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <SSD1306_Init+0x184>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <SSD1306_Init+0x184>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000d96:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <SSD1306_Init+0x184>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000d9c:	2301      	movs	r3, #1
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000040c 	.word	0x2000040c
 8000dac:	20000860 	.word	0x20000860

08000db0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000db6:	2300      	movs	r3, #0
 8000db8:	71fb      	strb	r3, [r7, #7]
 8000dba:	e01d      	b.n	8000df8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	3b50      	subs	r3, #80	@ 0x50
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2078      	movs	r0, #120	@ 0x78
 8000dc8:	f000 f9d2 	bl	8001170 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2078      	movs	r0, #120	@ 0x78
 8000dd2:	f000 f9cd 	bl	8001170 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000dd6:	2210      	movs	r2, #16
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2078      	movs	r0, #120	@ 0x78
 8000ddc:	f000 f9c8 	bl	8001170 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	01db      	lsls	r3, r3, #7
 8000de4:	4a08      	ldr	r2, [pc, #32]	@ (8000e08 <SSD1306_UpdateScreen+0x58>)
 8000de6:	441a      	add	r2, r3
 8000de8:	2380      	movs	r3, #128	@ 0x80
 8000dea:	2140      	movs	r1, #64	@ 0x40
 8000dec:	2078      	movs	r0, #120	@ 0x78
 8000dee:	f000 f959 	bl	80010a4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	3301      	adds	r3, #1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	2b07      	cmp	r3, #7
 8000dfc:	d9de      	bls.n	8000dbc <SSD1306_UpdateScreen+0xc>
	}
}
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000460 	.word	0x20000460

08000e0c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d101      	bne.n	8000e20 <SSD1306_Fill+0x14>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	e000      	b.n	8000e22 <SSD1306_Fill+0x16>
 8000e20:	23ff      	movs	r3, #255	@ 0xff
 8000e22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e26:	4619      	mov	r1, r3
 8000e28:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <SSD1306_Fill+0x2c>)
 8000e2a:	f004 fa3d 	bl	80052a8 <memset>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000460 	.word	0x20000460

08000e3c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
 8000e46:	460b      	mov	r3, r1
 8000e48:	80bb      	strh	r3, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	70fb      	strb	r3, [r7, #3]
	if (
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e52:	d848      	bhi.n	8000ee6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000e54:	88bb      	ldrh	r3, [r7, #4]
 8000e56:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e58:	d845      	bhi.n	8000ee6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000e5a:	4b25      	ldr	r3, [pc, #148]	@ (8000ef0 <SSD1306_DrawPixel+0xb4>)
 8000e5c:	791b      	ldrb	r3, [r3, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d006      	beq.n	8000e70 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bf0c      	ite	eq
 8000e68:	2301      	moveq	r3, #1
 8000e6a:	2300      	movne	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000e70:	78fb      	ldrb	r3, [r7, #3]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d11a      	bne.n	8000eac <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e76:	88fa      	ldrh	r2, [r7, #6]
 8000e78:	88bb      	ldrh	r3, [r7, #4]
 8000e7a:	08db      	lsrs	r3, r3, #3
 8000e7c:	b298      	uxth	r0, r3
 8000e7e:	4603      	mov	r3, r0
 8000e80:	01db      	lsls	r3, r3, #7
 8000e82:	4413      	add	r3, r2
 8000e84:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef4 <SSD1306_DrawPixel+0xb8>)
 8000e86:	5cd3      	ldrb	r3, [r2, r3]
 8000e88:	b25a      	sxtb	r2, r3
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	2101      	movs	r1, #1
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b259      	sxtb	r1, r3
 8000e9c:	88fa      	ldrh	r2, [r7, #6]
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	01db      	lsls	r3, r3, #7
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b2c9      	uxtb	r1, r1
 8000ea6:	4a13      	ldr	r2, [pc, #76]	@ (8000ef4 <SSD1306_DrawPixel+0xb8>)
 8000ea8:	54d1      	strb	r1, [r2, r3]
 8000eaa:	e01d      	b.n	8000ee8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000eac:	88fa      	ldrh	r2, [r7, #6]
 8000eae:	88bb      	ldrh	r3, [r7, #4]
 8000eb0:	08db      	lsrs	r3, r3, #3
 8000eb2:	b298      	uxth	r0, r3
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	01db      	lsls	r3, r3, #7
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef4 <SSD1306_DrawPixel+0xb8>)
 8000ebc:	5cd3      	ldrb	r3, [r2, r3]
 8000ebe:	b25a      	sxtb	r2, r3
 8000ec0:	88bb      	ldrh	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	b259      	sxtb	r1, r3
 8000ed6:	88fa      	ldrh	r2, [r7, #6]
 8000ed8:	4603      	mov	r3, r0
 8000eda:	01db      	lsls	r3, r3, #7
 8000edc:	4413      	add	r3, r2
 8000ede:	b2c9      	uxtb	r1, r1
 8000ee0:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <SSD1306_DrawPixel+0xb8>)
 8000ee2:	54d1      	strb	r1, [r2, r3]
 8000ee4:	e000      	b.n	8000ee8 <SSD1306_DrawPixel+0xac>
		return;
 8000ee6:	bf00      	nop
	}
}
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000860 	.word	0x20000860
 8000ef4:	20000460 	.word	0x20000460

08000ef8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	460a      	mov	r2, r1
 8000f02:	80fb      	strh	r3, [r7, #6]
 8000f04:	4613      	mov	r3, r2
 8000f06:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000f08:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <SSD1306_GotoXY+0x28>)
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	@ (8000f20 <SSD1306_GotoXY+0x28>)
 8000f10:	88bb      	ldrh	r3, [r7, #4]
 8000f12:	8053      	strh	r3, [r2, #2]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000860 	.word	0x20000860

08000f24 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	4613      	mov	r3, r2
 8000f32:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f34:	4b39      	ldr	r3, [pc, #228]	@ (800101c <SSD1306_Putc+0xf8>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
	if (
 8000f40:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f42:	dc07      	bgt.n	8000f54 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000f44:	4b35      	ldr	r3, [pc, #212]	@ (800101c <SSD1306_Putc+0xf8>)
 8000f46:	885b      	ldrh	r3, [r3, #2]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	785b      	ldrb	r3, [r3, #1]
 8000f4e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000f50:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f52:	dd01      	ble.n	8000f58 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	e05d      	b.n	8001014 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e04b      	b.n	8000ff6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	3b20      	subs	r3, #32
 8000f66:	6839      	ldr	r1, [r7, #0]
 8000f68:	7849      	ldrb	r1, [r1, #1]
 8000f6a:	fb01 f303 	mul.w	r3, r1, r3
 8000f6e:	4619      	mov	r1, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	440b      	add	r3, r1
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	e030      	b.n	8000fe4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d010      	beq.n	8000fb4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000f92:	4b22      	ldr	r3, [pc, #136]	@ (800101c <SSD1306_Putc+0xf8>)
 8000f94:	881a      	ldrh	r2, [r3, #0]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b298      	uxth	r0, r3
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <SSD1306_Putc+0xf8>)
 8000fa0:	885a      	ldrh	r2, [r3, #2]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	79ba      	ldrb	r2, [r7, #6]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f7ff ff45 	bl	8000e3c <SSD1306_DrawPixel>
 8000fb2:	e014      	b.n	8000fde <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000fb4:	4b19      	ldr	r3, [pc, #100]	@ (800101c <SSD1306_Putc+0xf8>)
 8000fb6:	881a      	ldrh	r2, [r3, #0]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b298      	uxth	r0, r3
 8000fc0:	4b16      	ldr	r3, [pc, #88]	@ (800101c <SSD1306_Putc+0xf8>)
 8000fc2:	885a      	ldrh	r2, [r3, #2]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	4413      	add	r3, r2
 8000fca:	b299      	uxth	r1, r3
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	bf0c      	ite	eq
 8000fd2:	2301      	moveq	r3, #1
 8000fd4:	2300      	movne	r3, #0
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	f7ff ff2f 	bl	8000e3c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d3c8      	bcc.n	8000f82 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	785b      	ldrb	r3, [r3, #1]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d3ad      	bcc.n	8000f5e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <SSD1306_Putc+0xf8>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	4413      	add	r3, r2
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b03      	ldr	r3, [pc, #12]	@ (800101c <SSD1306_Putc+0xf8>)
 8001010:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001012:	79fb      	ldrb	r3, [r7, #7]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000860 	.word	0x20000860

08001020 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	4613      	mov	r3, r2
 800102c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800102e:	e012      	b.n	8001056 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	79fa      	ldrb	r2, [r7, #7]
 8001036:	68b9      	ldr	r1, [r7, #8]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff73 	bl	8000f24 <SSD1306_Putc>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d002      	beq.n	8001050 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	e008      	b.n	8001062 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	3301      	adds	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1e8      	bne.n	8001030 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	781b      	ldrb	r3, [r3, #0]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff fecc 	bl	8000e0c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001074:	f7ff fe9c 	bl	8000db0 <SSD1306_UpdateScreen>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001082:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <ssd1306_I2C_Init+0x24>)
 8001084:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001086:	e002      	b.n	800108e <ssd1306_I2C_Init+0x12>
		p--;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f9      	bne.n	8001088 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&H_I2C);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	0003d090 	.word	0x0003d090

080010a4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b0c7      	sub	sp, #284	@ 0x11c
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	4604      	mov	r4, r0
 80010ac:	4608      	mov	r0, r1
 80010ae:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80010b2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80010b6:	600a      	str	r2, [r1, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010be:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80010c2:	4622      	mov	r2, r4
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010ca:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80010ce:	4602      	mov	r2, r0
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80010da:	460a      	mov	r2, r1
 80010dc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80010de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010e6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80010ea:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80010ee:	7812      	ldrb	r2, [r2, #0]
 80010f0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80010f8:	e015      	b.n	8001126 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80010fa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80010fe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001102:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	441a      	add	r2, r3
 800110a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800110e:	3301      	adds	r3, #1
 8001110:	7811      	ldrb	r1, [r2, #0]
 8001112:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001116:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800111a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800111c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001120:	3301      	adds	r3, #1
 8001122:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001126:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800112a:	b29b      	uxth	r3, r3
 800112c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001130:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001134:	8812      	ldrh	r2, [r2, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d8df      	bhi.n	80010fa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&H_I2C, address, dt, count+1, 10);
 800113a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800113e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b299      	uxth	r1, r3
 8001146:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800114a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	b29b      	uxth	r3, r3
 8001154:	f107 020c 	add.w	r2, r7, #12
 8001158:	200a      	movs	r0, #10
 800115a:	9000      	str	r0, [sp, #0]
 800115c:	4803      	ldr	r0, [pc, #12]	@ (800116c <ssd1306_I2C_WriteMulti+0xc8>)
 800115e:	f001 fb8b 	bl	8002878 <HAL_I2C_Master_Transmit>
}
 8001162:	bf00      	nop
 8001164:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001168:	46bd      	mov	sp, r7
 800116a:	bd90      	pop	{r4, r7, pc}
 800116c:	2000040c 	.word	0x2000040c

08001170 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af02      	add	r7, sp, #8
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	460b      	mov	r3, r1
 800117c:	71bb      	strb	r3, [r7, #6]
 800117e:	4613      	mov	r3, r2
 8001180:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001182:	79bb      	ldrb	r3, [r7, #6]
 8001184:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001186:	797b      	ldrb	r3, [r7, #5]
 8001188:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&H_I2C, address, dt, 2, 10);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	b299      	uxth	r1, r3
 800118e:	f107 020c 	add.w	r2, r7, #12
 8001192:	230a      	movs	r3, #10
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2302      	movs	r3, #2
 8001198:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <ssd1306_I2C_Write+0x38>)
 800119a:	f001 fb6d 	bl	8002878 <HAL_I2C_Master_Transmit>
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000040c 	.word	0x2000040c

080011ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <HAL_MspInit+0x68>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	4a17      	ldr	r2, [pc, #92]	@ (8001214 <HAL_MspInit+0x68>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6193      	str	r3, [r2, #24]
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_MspInit+0x68>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <HAL_MspInit+0x68>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	4a11      	ldr	r2, [pc, #68]	@ (8001214 <HAL_MspInit+0x68>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	61d3      	str	r3, [r2, #28]
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <HAL_MspInit+0x68>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	210f      	movs	r1, #15
 80011e6:	f06f 0001 	mvn.w	r0, #1
 80011ea:	f001 f83a 	bl	8002262 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HAL_MspInit+0x6c>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <HAL_MspInit+0x6c>)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000

0800121c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08e      	sub	sp, #56	@ 0x38
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001232:	4b34      	ldr	r3, [pc, #208]	@ (8001304 <HAL_InitTick+0xe8>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a33      	ldr	r2, [pc, #204]	@ (8001304 <HAL_InitTick+0xe8>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b31      	ldr	r3, [pc, #196]	@ (8001304 <HAL_InitTick+0xe8>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800124a:	f107 0210 	add.w	r2, r7, #16
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f002 fb73 	bl	8003940 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800125e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001260:	2b00      	cmp	r3, #0
 8001262:	d103      	bne.n	800126c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001264:	f002 fb58 	bl	8003918 <HAL_RCC_GetPCLK1Freq>
 8001268:	6378      	str	r0, [r7, #52]	@ 0x34
 800126a:	e004      	b.n	8001276 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800126c:	f002 fb54 	bl	8003918 <HAL_RCC_GetPCLK1Freq>
 8001270:	4603      	mov	r3, r0
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001278:	4a23      	ldr	r2, [pc, #140]	@ (8001308 <HAL_InitTick+0xec>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9b      	lsrs	r3, r3, #18
 8001280:	3b01      	subs	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001284:	4b21      	ldr	r3, [pc, #132]	@ (800130c <HAL_InitTick+0xf0>)
 8001286:	4a22      	ldr	r2, [pc, #136]	@ (8001310 <HAL_InitTick+0xf4>)
 8001288:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800128a:	4b20      	ldr	r3, [pc, #128]	@ (800130c <HAL_InitTick+0xf0>)
 800128c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001290:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001292:	4a1e      	ldr	r2, [pc, #120]	@ (800130c <HAL_InitTick+0xf0>)
 8001294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001296:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001298:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <HAL_InitTick+0xf0>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <HAL_InitTick+0xf0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b19      	ldr	r3, [pc, #100]	@ (800130c <HAL_InitTick+0xf0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80012aa:	4818      	ldr	r0, [pc, #96]	@ (800130c <HAL_InitTick+0xf0>)
 80012ac:	f002 fb96 	bl	80039dc <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d11b      	bne.n	80012f6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80012be:	4813      	ldr	r0, [pc, #76]	@ (800130c <HAL_InitTick+0xf0>)
 80012c0:	f002 fbe4 	bl	8003a8c <HAL_TIM_Base_Start_IT>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80012ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d111      	bne.n	80012f6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012d2:	201e      	movs	r0, #30
 80012d4:	f000 ffe1 	bl	800229a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b0f      	cmp	r3, #15
 80012dc:	d808      	bhi.n	80012f0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80012de:	2200      	movs	r2, #0
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	201e      	movs	r0, #30
 80012e4:	f000 ffbd 	bl	8002262 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001314 <HAL_InitTick+0xf8>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e002      	b.n	80012f6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3738      	adds	r7, #56	@ 0x38
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	431bde83 	.word	0x431bde83
 800130c:	20000868 	.word	0x20000868
 8001310:	40000800 	.word	0x40000800
 8001314:	20000034 	.word	0x20000034

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <NMI_Handler+0x4>

08001320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <MemManage_Handler+0x4>

08001330 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <UsageFault_Handler+0x4>

08001340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001352:	f000 fcae 	bl	8001cb2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200000ac 	.word	0x200000ac

08001360 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001364:	4802      	ldr	r0, [pc, #8]	@ (8001370 <TIM4_IRQHandler+0x10>)
 8001366:	f002 fbe3 	bl	8003b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000868 	.word	0x20000868

08001374 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001380:	f7ff fff8 	bl	8001374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001384:	480b      	ldr	r0, [pc, #44]	@ (80013b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001386:	490c      	ldr	r1, [pc, #48]	@ (80013b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001388:	4a0c      	ldr	r2, [pc, #48]	@ (80013bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a09      	ldr	r2, [pc, #36]	@ (80013c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800139c:	4c09      	ldr	r4, [pc, #36]	@ (80013c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013aa:	f003 ffdb 	bl	8005364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ae:	f7ff fb27 	bl	8000a00 <main>
  bx lr
 80013b2:	4770      	bx	lr
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80013bc:	08008a84 	.word	0x08008a84
  ldr r2, =_sbss
 80013c0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80013c4:	20001748 	.word	0x20001748

080013c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC1_2_IRQHandler>
	...

080013cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <HAL_Init+0x28>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	@ (80013f4 <HAL_Init+0x28>)
 80013d6:	f043 0310 	orr.w	r3, r3, #16
 80013da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 ff35 	bl	800224c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	200f      	movs	r0, #15
 80013e4:	f7ff ff1a 	bl	800121c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f7ff fee0 	bl	80011ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40022000 	.word	0x40022000

080013f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <HAL_IncTick+0x1c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <HAL_IncTick+0x20>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a03      	ldr	r2, [pc, #12]	@ (8001418 <HAL_IncTick+0x20>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	20000038 	.word	0x20000038
 8001418:	200008b0 	.word	0x200008b0

0800141c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b02      	ldr	r3, [pc, #8]	@ (800142c <HAL_GetTick+0x10>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	200008b0 	.word	0x200008b0

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff fff0 	bl	800141c <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffe0 	bl	800141c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000038 	.word	0x20000038

08001478 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e0ed      	b.n	8001666 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d102      	bne.n	800149c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7fe fe90 	bl	80001bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f042 0201 	orr.w	r2, r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ac:	f7ff ffb6 	bl	800141c <HAL_GetTick>
 80014b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014b2:	e012      	b.n	80014da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014b4:	f7ff ffb2 	bl	800141c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b0a      	cmp	r3, #10
 80014c0:	d90b      	bls.n	80014da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2205      	movs	r2, #5
 80014d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0c5      	b.n	8001666 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0e5      	beq.n	80014b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0202 	bic.w	r2, r2, #2
 80014f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f8:	f7ff ff90 	bl	800141c <HAL_GetTick>
 80014fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014fe:	e012      	b.n	8001526 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001500:	f7ff ff8c 	bl	800141c <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b0a      	cmp	r3, #10
 800150c:	d90b      	bls.n	8001526 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001512:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2205      	movs	r2, #5
 800151e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e09f      	b.n	8001666 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1e5      	bne.n	8001500 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	7e1b      	ldrb	r3, [r3, #24]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d108      	bne.n	800154e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e007      	b.n	800155e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800155c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7e5b      	ldrb	r3, [r3, #25]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d108      	bne.n	8001578 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e007      	b.n	8001588 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001586:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7e9b      	ldrb	r3, [r3, #26]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d108      	bne.n	80015a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0220 	orr.w	r2, r2, #32
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	e007      	b.n	80015b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0220 	bic.w	r2, r2, #32
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7edb      	ldrb	r3, [r3, #27]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d108      	bne.n	80015cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0210 	bic.w	r2, r2, #16
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e007      	b.n	80015dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0210 	orr.w	r2, r2, #16
 80015da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7f1b      	ldrb	r3, [r3, #28]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d108      	bne.n	80015f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0208 	orr.w	r2, r2, #8
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e007      	b.n	8001606 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0208 	bic.w	r2, r2, #8
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7f5b      	ldrb	r3, [r3, #29]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d108      	bne.n	8001620 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0204 	orr.w	r2, r2, #4
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e007      	b.n	8001630 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0204 	bic.w	r2, r2, #4
 800162e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	ea42 0103 	orr.w	r1, r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	1e5a      	subs	r2, r3, #1
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800166e:	b480      	push	{r7}
 8001670:	b087      	sub	sp, #28
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001684:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001686:	7cfb      	ldrb	r3, [r7, #19]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d003      	beq.n	8001694 <HAL_CAN_ConfigFilter+0x26>
 800168c:	7cfb      	ldrb	r3, [r7, #19]
 800168e:	2b02      	cmp	r3, #2
 8001690:	f040 80aa 	bne.w	80017e8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800169a:	f043 0201 	orr.w	r2, r3, #1
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	2201      	movs	r2, #1
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43db      	mvns	r3, r3
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d123      	bne.n	8001716 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	401a      	ands	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3248      	adds	r2, #72	@ 0x48
 80016f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800170a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800170c:	6979      	ldr	r1, [r7, #20]
 800170e:	3348      	adds	r3, #72	@ 0x48
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d122      	bne.n	8001764 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	431a      	orrs	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800173e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3248      	adds	r2, #72	@ 0x48
 8001744:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001758:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800175a:	6979      	ldr	r1, [r7, #20]
 800175c:	3348      	adds	r3, #72	@ 0x48
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d109      	bne.n	8001780 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	43db      	mvns	r3, r3
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800177e:	e007      	b.n	8001790 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	431a      	orrs	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d109      	bne.n	80017ac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80017aa:	e007      	b.n	80017bc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	431a      	orrs	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d107      	bne.n	80017d4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	431a      	orrs	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017da:	f023 0201 	bic.w	r2, r3, #1
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e006      	b.n	80017f6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
  }
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	371c      	adds	r7, #28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b01      	cmp	r3, #1
 8001812:	d12e      	bne.n	8001872 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2202      	movs	r2, #2
 8001818:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0201 	bic.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800182c:	f7ff fdf6 	bl	800141c <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001832:	e012      	b.n	800185a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001834:	f7ff fdf2 	bl	800141c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b0a      	cmp	r3, #10
 8001840:	d90b      	bls.n	800185a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2205      	movs	r2, #5
 8001852:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e012      	b.n	8001880 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1e5      	bne.n	8001834 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e006      	b.n	8001880 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001876:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
  }
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	@ 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800189c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018a6:	7ffb      	ldrb	r3, [r7, #31]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d003      	beq.n	80018b4 <HAL_CAN_AddTxMessage+0x2c>
 80018ac:	7ffb      	ldrb	r3, [r7, #31]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	f040 80ad 	bne.w	8001a0e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10a      	bne.n	80018d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d105      	bne.n	80018d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8095 	beq.w	80019fe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	0e1b      	lsrs	r3, r3, #24
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80018de:	2201      	movs	r2, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10d      	bne.n	800190c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018fa:	68f9      	ldr	r1, [r7, #12]
 80018fc:	6809      	ldr	r1, [r1, #0]
 80018fe:	431a      	orrs	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3318      	adds	r3, #24
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	440b      	add	r3, r1
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e00f      	b.n	800192c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001916:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800191c:	68f9      	ldr	r1, [r7, #12]
 800191e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001920:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3318      	adds	r3, #24
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	440b      	add	r3, r1
 800192a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6819      	ldr	r1, [r3, #0]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3318      	adds	r3, #24
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	440b      	add	r3, r1
 800193c:	3304      	adds	r3, #4
 800193e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	7d1b      	ldrb	r3, [r3, #20]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d111      	bne.n	800196c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3318      	adds	r3, #24
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	4413      	add	r3, r2
 8001954:	3304      	adds	r3, #4
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	6811      	ldr	r1, [r2, #0]
 800195c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3318      	adds	r3, #24
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	440b      	add	r3, r1
 8001968:	3304      	adds	r3, #4
 800196a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3307      	adds	r3, #7
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	061a      	lsls	r2, r3, #24
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3306      	adds	r3, #6
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3305      	adds	r3, #5
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	4313      	orrs	r3, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	3204      	adds	r2, #4
 800198c:	7812      	ldrb	r2, [r2, #0]
 800198e:	4610      	mov	r0, r2
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	6811      	ldr	r1, [r2, #0]
 8001994:	ea43 0200 	orr.w	r2, r3, r0
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	440b      	add	r3, r1
 800199e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80019a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3303      	adds	r3, #3
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	061a      	lsls	r2, r3, #24
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3302      	adds	r3, #2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	041b      	lsls	r3, r3, #16
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3301      	adds	r3, #1
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	4313      	orrs	r3, r2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	7812      	ldrb	r2, [r2, #0]
 80019c4:	4610      	mov	r0, r2
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	6811      	ldr	r1, [r2, #0]
 80019ca:	ea43 0200 	orr.w	r2, r3, r0
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	440b      	add	r3, r1
 80019d4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80019d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3318      	adds	r3, #24
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	4413      	add	r3, r2
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	6811      	ldr	r1, [r2, #0]
 80019ec:	f043 0201 	orr.w	r2, r3, #1
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3318      	adds	r3, #24
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	440b      	add	r3, r1
 80019f8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e00e      	b.n	8001a1c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a02:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e006      	b.n	8001a1c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
  }
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3724      	adds	r7, #36	@ 0x24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a26:	b480      	push	{r7}
 8001a28:	b087      	sub	sp, #28
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d003      	beq.n	8001a4a <HAL_CAN_GetRxMessage+0x24>
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	f040 8103 	bne.w	8001c50 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10e      	bne.n	8001a6e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d116      	bne.n	8001a8c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0f7      	b.n	8001c5e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a80:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0e8      	b.n	8001c5e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	331b      	adds	r3, #27
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	4413      	add	r3, r2
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0204 	and.w	r2, r3, #4
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	331b      	adds	r3, #27
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	4413      	add	r3, r2
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0d5b      	lsrs	r3, r3, #21
 8001aba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e00b      	b.n	8001adc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	331b      	adds	r3, #27
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	4413      	add	r3, r2
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	08db      	lsrs	r3, r3, #3
 8001ad4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	331b      	adds	r3, #27
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	4413      	add	r3, r2
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0202 	and.w	r2, r3, #2
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	331b      	adds	r3, #27
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	4413      	add	r3, r2
 8001afe:	3304      	adds	r3, #4
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	611a      	str	r2, [r3, #16]
 8001b10:	e00b      	b.n	8001b2a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	331b      	adds	r3, #27
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	3304      	adds	r3, #4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 020f 	and.w	r2, r3, #15
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	331b      	adds	r3, #27
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	4413      	add	r3, r2
 8001b36:	3304      	adds	r3, #4
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	331b      	adds	r3, #27
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3304      	adds	r3, #4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	0c1b      	lsrs	r3, r3, #16
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4413      	add	r3, r2
 8001b64:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0a1a      	lsrs	r2, r3, #8
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4413      	add	r3, r2
 8001b94:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0c1a      	lsrs	r2, r3, #16
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0e1a      	lsrs	r2, r3, #24
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	3303      	adds	r3, #3
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0a1a      	lsrs	r2, r3, #8
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	3305      	adds	r3, #5
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	0c1a      	lsrs	r2, r3, #16
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	3306      	adds	r3, #6
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	0e1a      	lsrs	r2, r3, #24
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	3307      	adds	r3, #7
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d108      	bne.n	8001c3c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0220 	orr.w	r2, r2, #32
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	e007      	b.n	8001c4c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0220 	orr.w	r2, r2, #32
 8001c4a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e006      	b.n	8001c5e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
  }
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	371c      	adds	r7, #28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c78:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d002      	beq.n	8001c86 <HAL_CAN_ActivateNotification+0x1e>
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d109      	bne.n	8001c9a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6959      	ldr	r1, [r3, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e006      	b.n	8001ca8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
  }
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b08a      	sub	sp, #40	@ 0x28
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d07c      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d023      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2201      	movs	r2, #1
 8001d08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f983 	bl	8002020 <HAL_CAN_TxMailbox0CompleteCallback>
 8001d1a:	e016      	b.n	8001d4a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d004      	beq.n	8001d30 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d2e:	e00c      	b.n	8001d4a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d004      	beq.n	8001d44 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d42:	e002      	b.n	8001d4a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f986 	bl	8002056 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d024      	beq.n	8001d9e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f962 	bl	8002032 <HAL_CAN_TxMailbox1CompleteCallback>
 8001d6e:	e016      	b.n	8001d9e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d004      	beq.n	8001d84 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d82:	e00c      	b.n	8001d9e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d96:	e002      	b.n	8001d9e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f965 	bl	8002068 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d024      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001db0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f941 	bl	8002044 <HAL_CAN_TxMailbox2CompleteCallback>
 8001dc2:	e016      	b.n	8001df2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d004      	beq.n	8001dd8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd6:	e00c      	b.n	8001df2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d004      	beq.n	8001dec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dea:	e002      	b.n	8001df2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f944 	bl	800207a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00c      	beq.n	8001e16 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2210      	movs	r2, #16
 8001e14:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00b      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d006      	beq.n	8001e38 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2208      	movs	r2, #8
 8001e30:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f92a 	bl	800208c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d009      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7fe fcdf 	bl	8000814 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00c      	beq.n	8001e7a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d007      	beq.n	8001e7a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2210      	movs	r2, #16
 8001e78:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	f003 0320 	and.w	r3, r3, #32
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00b      	beq.n	8001e9c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d006      	beq.n	8001e9c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2208      	movs	r2, #8
 8001e94:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f90a 	bl	80020b0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d009      	beq.n	8001eba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f8f2 	bl	800209e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00b      	beq.n	8001edc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d006      	beq.n	8001edc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f8f3 	bl	80020c2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f8eb 	bl	80020d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d07b      	beq.n	8002000 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d072      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d043      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d03e      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f80:	2b60      	cmp	r3, #96	@ 0x60
 8001f82:	d02b      	beq.n	8001fdc <HAL_CAN_IRQHandler+0x32a>
 8001f84:	2b60      	cmp	r3, #96	@ 0x60
 8001f86:	d82e      	bhi.n	8001fe6 <HAL_CAN_IRQHandler+0x334>
 8001f88:	2b50      	cmp	r3, #80	@ 0x50
 8001f8a:	d022      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x320>
 8001f8c:	2b50      	cmp	r3, #80	@ 0x50
 8001f8e:	d82a      	bhi.n	8001fe6 <HAL_CAN_IRQHandler+0x334>
 8001f90:	2b40      	cmp	r3, #64	@ 0x40
 8001f92:	d019      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x316>
 8001f94:	2b40      	cmp	r3, #64	@ 0x40
 8001f96:	d826      	bhi.n	8001fe6 <HAL_CAN_IRQHandler+0x334>
 8001f98:	2b30      	cmp	r3, #48	@ 0x30
 8001f9a:	d010      	beq.n	8001fbe <HAL_CAN_IRQHandler+0x30c>
 8001f9c:	2b30      	cmp	r3, #48	@ 0x30
 8001f9e:	d822      	bhi.n	8001fe6 <HAL_CAN_IRQHandler+0x334>
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d002      	beq.n	8001faa <HAL_CAN_IRQHandler+0x2f8>
 8001fa4:	2b20      	cmp	r3, #32
 8001fa6:	d005      	beq.n	8001fb4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fa8:	e01d      	b.n	8001fe6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	f043 0308 	orr.w	r3, r3, #8
 8001fb0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fb2:	e019      	b.n	8001fe8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fbc:	e014      	b.n	8001fe8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	f043 0320 	orr.w	r3, r3, #32
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fc6:	e00f      	b.n	8001fe8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fd0:	e00a      	b.n	8001fe8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fda:	e005      	b.n	8001fe8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fe4:	e000      	b.n	8001fe8 <HAL_CAN_IRQHandler+0x336>
            break;
 8001fe6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699a      	ldr	r2, [r3, #24]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ff6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	2b00      	cmp	r3, #0
 8002004:	d008      	beq.n	8002018 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f867 	bl	80020e6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	@ 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212a:	4a04      	ldr	r2, [pc, #16]	@ (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	60d3      	str	r3, [r2, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	@ (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db0b      	blt.n	8002186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	4906      	ldr	r1, [pc, #24]	@ (8002190 <__NVIC_EnableIRQ+0x34>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2001      	movs	r0, #1
 800217e:	fa00 f202 	lsl.w	r2, r0, r2
 8002182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	@ (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	@ (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	@ 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	@ 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff4f 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff64 	bl	8002140 <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ffb2 	bl	80021e8 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff81 	bl	8002194 <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff57 	bl	800215c <__NVIC_EnableIRQ>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b08b      	sub	sp, #44	@ 0x2c
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ca:	e169      	b.n	80025a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022cc:	2201      	movs	r2, #1
 80022ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69fa      	ldr	r2, [r7, #28]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	f040 8158 	bne.w	800259a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a9a      	ldr	r2, [pc, #616]	@ (8002558 <HAL_GPIO_Init+0x2a0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d05e      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 80022f4:	4a98      	ldr	r2, [pc, #608]	@ (8002558 <HAL_GPIO_Init+0x2a0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d875      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 80022fa:	4a98      	ldr	r2, [pc, #608]	@ (800255c <HAL_GPIO_Init+0x2a4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d058      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 8002300:	4a96      	ldr	r2, [pc, #600]	@ (800255c <HAL_GPIO_Init+0x2a4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d86f      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 8002306:	4a96      	ldr	r2, [pc, #600]	@ (8002560 <HAL_GPIO_Init+0x2a8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d052      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 800230c:	4a94      	ldr	r2, [pc, #592]	@ (8002560 <HAL_GPIO_Init+0x2a8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d869      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 8002312:	4a94      	ldr	r2, [pc, #592]	@ (8002564 <HAL_GPIO_Init+0x2ac>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d04c      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 8002318:	4a92      	ldr	r2, [pc, #584]	@ (8002564 <HAL_GPIO_Init+0x2ac>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d863      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 800231e:	4a92      	ldr	r2, [pc, #584]	@ (8002568 <HAL_GPIO_Init+0x2b0>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d046      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
 8002324:	4a90      	ldr	r2, [pc, #576]	@ (8002568 <HAL_GPIO_Init+0x2b0>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d85d      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 800232a:	2b12      	cmp	r3, #18
 800232c:	d82a      	bhi.n	8002384 <HAL_GPIO_Init+0xcc>
 800232e:	2b12      	cmp	r3, #18
 8002330:	d859      	bhi.n	80023e6 <HAL_GPIO_Init+0x12e>
 8002332:	a201      	add	r2, pc, #4	@ (adr r2, 8002338 <HAL_GPIO_Init+0x80>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	080023b3 	.word	0x080023b3
 800233c:	0800238d 	.word	0x0800238d
 8002340:	0800239f 	.word	0x0800239f
 8002344:	080023e1 	.word	0x080023e1
 8002348:	080023e7 	.word	0x080023e7
 800234c:	080023e7 	.word	0x080023e7
 8002350:	080023e7 	.word	0x080023e7
 8002354:	080023e7 	.word	0x080023e7
 8002358:	080023e7 	.word	0x080023e7
 800235c:	080023e7 	.word	0x080023e7
 8002360:	080023e7 	.word	0x080023e7
 8002364:	080023e7 	.word	0x080023e7
 8002368:	080023e7 	.word	0x080023e7
 800236c:	080023e7 	.word	0x080023e7
 8002370:	080023e7 	.word	0x080023e7
 8002374:	080023e7 	.word	0x080023e7
 8002378:	080023e7 	.word	0x080023e7
 800237c:	08002395 	.word	0x08002395
 8002380:	080023a9 	.word	0x080023a9
 8002384:	4a79      	ldr	r2, [pc, #484]	@ (800256c <HAL_GPIO_Init+0x2b4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800238a:	e02c      	b.n	80023e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	623b      	str	r3, [r7, #32]
          break;
 8002392:	e029      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	3304      	adds	r3, #4
 800239a:	623b      	str	r3, [r7, #32]
          break;
 800239c:	e024      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	3308      	adds	r3, #8
 80023a4:	623b      	str	r3, [r7, #32]
          break;
 80023a6:	e01f      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	330c      	adds	r3, #12
 80023ae:	623b      	str	r3, [r7, #32]
          break;
 80023b0:	e01a      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023ba:	2304      	movs	r3, #4
 80023bc:	623b      	str	r3, [r7, #32]
          break;
 80023be:	e013      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c8:	2308      	movs	r3, #8
 80023ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	611a      	str	r2, [r3, #16]
          break;
 80023d2:	e009      	b.n	80023e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d4:	2308      	movs	r3, #8
 80023d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	615a      	str	r2, [r3, #20]
          break;
 80023de:	e003      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
          break;
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x130>
          break;
 80023e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2bff      	cmp	r3, #255	@ 0xff
 80023ec:	d801      	bhi.n	80023f2 <HAL_GPIO_Init+0x13a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	e001      	b.n	80023f6 <HAL_GPIO_Init+0x13e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3304      	adds	r3, #4
 80023f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2bff      	cmp	r3, #255	@ 0xff
 80023fc:	d802      	bhi.n	8002404 <HAL_GPIO_Init+0x14c>
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	e002      	b.n	800240a <HAL_GPIO_Init+0x152>
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	3b08      	subs	r3, #8
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	210f      	movs	r1, #15
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	401a      	ands	r2, r3
 800241c:	6a39      	ldr	r1, [r7, #32]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	431a      	orrs	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80b1 	beq.w	800259a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002438:	4b4d      	ldr	r3, [pc, #308]	@ (8002570 <HAL_GPIO_Init+0x2b8>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	4a4c      	ldr	r2, [pc, #304]	@ (8002570 <HAL_GPIO_Init+0x2b8>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6193      	str	r3, [r2, #24]
 8002444:	4b4a      	ldr	r3, [pc, #296]	@ (8002570 <HAL_GPIO_Init+0x2b8>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002450:	4a48      	ldr	r2, [pc, #288]	@ (8002574 <HAL_GPIO_Init+0x2bc>)
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4013      	ands	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a40      	ldr	r2, [pc, #256]	@ (8002578 <HAL_GPIO_Init+0x2c0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d013      	beq.n	80024a4 <HAL_GPIO_Init+0x1ec>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a3f      	ldr	r2, [pc, #252]	@ (800257c <HAL_GPIO_Init+0x2c4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00d      	beq.n	80024a0 <HAL_GPIO_Init+0x1e8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3e      	ldr	r2, [pc, #248]	@ (8002580 <HAL_GPIO_Init+0x2c8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d007      	beq.n	800249c <HAL_GPIO_Init+0x1e4>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a3d      	ldr	r2, [pc, #244]	@ (8002584 <HAL_GPIO_Init+0x2cc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d101      	bne.n	8002498 <HAL_GPIO_Init+0x1e0>
 8002494:	2303      	movs	r3, #3
 8002496:	e006      	b.n	80024a6 <HAL_GPIO_Init+0x1ee>
 8002498:	2304      	movs	r3, #4
 800249a:	e004      	b.n	80024a6 <HAL_GPIO_Init+0x1ee>
 800249c:	2302      	movs	r3, #2
 800249e:	e002      	b.n	80024a6 <HAL_GPIO_Init+0x1ee>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_GPIO_Init+0x1ee>
 80024a4:	2300      	movs	r3, #0
 80024a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a8:	f002 0203 	and.w	r2, r2, #3
 80024ac:	0092      	lsls	r2, r2, #2
 80024ae:	4093      	lsls	r3, r2
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024b6:	492f      	ldr	r1, [pc, #188]	@ (8002574 <HAL_GPIO_Init+0x2bc>)
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002588 <HAL_GPIO_Init+0x2d0>)
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	492c      	ldr	r1, [pc, #176]	@ (8002588 <HAL_GPIO_Init+0x2d0>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	608b      	str	r3, [r1, #8]
 80024dc:	e006      	b.n	80024ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024de:	4b2a      	ldr	r3, [pc, #168]	@ (8002588 <HAL_GPIO_Init+0x2d0>)
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	4928      	ldr	r1, [pc, #160]	@ (8002588 <HAL_GPIO_Init+0x2d0>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024f8:	4b23      	ldr	r3, [pc, #140]	@ (8002588 <HAL_GPIO_Init+0x2d0>)
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	4922      	ldr	r1, [pc, #136]	@ (8002588 <HAL_GPIO_Init+0x2d0>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	60cb      	str	r3, [r1, #12]
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002506:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <HAL_GPIO_Init+0x2d0>)
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	43db      	mvns	r3, r3
 800250e:	491e      	ldr	r1, [pc, #120]	@ (8002588 <HAL_GPIO_Init+0x2d0>)
 8002510:	4013      	ands	r3, r2
 8002512:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d006      	beq.n	800252e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002520:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <HAL_GPIO_Init+0x2d0>)
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	4918      	ldr	r1, [pc, #96]	@ (8002588 <HAL_GPIO_Init+0x2d0>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
 800252c:	e006      	b.n	800253c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800252e:	4b16      	ldr	r3, [pc, #88]	@ (8002588 <HAL_GPIO_Init+0x2d0>)
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	43db      	mvns	r3, r3
 8002536:	4914      	ldr	r1, [pc, #80]	@ (8002588 <HAL_GPIO_Init+0x2d0>)
 8002538:	4013      	ands	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d021      	beq.n	800258c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002548:	4b0f      	ldr	r3, [pc, #60]	@ (8002588 <HAL_GPIO_Init+0x2d0>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	490e      	ldr	r1, [pc, #56]	@ (8002588 <HAL_GPIO_Init+0x2d0>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]
 8002554:	e021      	b.n	800259a <HAL_GPIO_Init+0x2e2>
 8002556:	bf00      	nop
 8002558:	10320000 	.word	0x10320000
 800255c:	10310000 	.word	0x10310000
 8002560:	10220000 	.word	0x10220000
 8002564:	10210000 	.word	0x10210000
 8002568:	10120000 	.word	0x10120000
 800256c:	10110000 	.word	0x10110000
 8002570:	40021000 	.word	0x40021000
 8002574:	40010000 	.word	0x40010000
 8002578:	40010800 	.word	0x40010800
 800257c:	40010c00 	.word	0x40010c00
 8002580:	40011000 	.word	0x40011000
 8002584:	40011400 	.word	0x40011400
 8002588:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800258c:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <HAL_GPIO_Init+0x304>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	43db      	mvns	r3, r3
 8002594:	4909      	ldr	r1, [pc, #36]	@ (80025bc <HAL_GPIO_Init+0x304>)
 8002596:	4013      	ands	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	3301      	adds	r3, #1
 800259e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	fa22 f303 	lsr.w	r3, r2, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f47f ae8e 	bne.w	80022cc <HAL_GPIO_Init+0x14>
  }
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	372c      	adds	r7, #44	@ 0x2c
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40010400 	.word	0x40010400

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025dc:	e003      	b.n	80025e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025de:	887b      	ldrh	r3, [r7, #2]
 80025e0:	041a      	lsls	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	611a      	str	r2, [r3, #16]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e12b      	b.n	800285a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe f9b2 	bl	8000980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2224      	movs	r2, #36	@ 0x24
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002654:	f001 f960 	bl	8003918 <HAL_RCC_GetPCLK1Freq>
 8002658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4a81      	ldr	r2, [pc, #516]	@ (8002864 <HAL_I2C_Init+0x274>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d807      	bhi.n	8002674 <HAL_I2C_Init+0x84>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a80      	ldr	r2, [pc, #512]	@ (8002868 <HAL_I2C_Init+0x278>)
 8002668:	4293      	cmp	r3, r2
 800266a:	bf94      	ite	ls
 800266c:	2301      	movls	r3, #1
 800266e:	2300      	movhi	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e006      	b.n	8002682 <HAL_I2C_Init+0x92>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a7d      	ldr	r2, [pc, #500]	@ (800286c <HAL_I2C_Init+0x27c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	bf94      	ite	ls
 800267c:	2301      	movls	r3, #1
 800267e:	2300      	movhi	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0e7      	b.n	800285a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4a78      	ldr	r2, [pc, #480]	@ (8002870 <HAL_I2C_Init+0x280>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	0c9b      	lsrs	r3, r3, #18
 8002694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002864 <HAL_I2C_Init+0x274>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d802      	bhi.n	80026c4 <HAL_I2C_Init+0xd4>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	3301      	adds	r3, #1
 80026c2:	e009      	b.n	80026d8 <HAL_I2C_Init+0xe8>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026ca:	fb02 f303 	mul.w	r3, r2, r3
 80026ce:	4a69      	ldr	r2, [pc, #420]	@ (8002874 <HAL_I2C_Init+0x284>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	099b      	lsrs	r3, r3, #6
 80026d6:	3301      	adds	r3, #1
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	430b      	orrs	r3, r1
 80026de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	495c      	ldr	r1, [pc, #368]	@ (8002864 <HAL_I2C_Init+0x274>)
 80026f4:	428b      	cmp	r3, r1
 80026f6:	d819      	bhi.n	800272c <HAL_I2C_Init+0x13c>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e59      	subs	r1, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fbb1 f3f3 	udiv	r3, r1, r3
 8002706:	1c59      	adds	r1, r3, #1
 8002708:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800270c:	400b      	ands	r3, r1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_I2C_Init+0x138>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1e59      	subs	r1, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002720:	3301      	adds	r3, #1
 8002722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002726:	e051      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 8002728:	2304      	movs	r3, #4
 800272a:	e04f      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d111      	bne.n	8002758 <HAL_I2C_Init+0x168>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e58      	subs	r0, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	440b      	add	r3, r1
 8002742:	fbb0 f3f3 	udiv	r3, r0, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	e012      	b.n	800277e <HAL_I2C_Init+0x18e>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1e58      	subs	r0, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	0099      	lsls	r1, r3, #2
 8002768:	440b      	add	r3, r1
 800276a:	fbb0 f3f3 	udiv	r3, r0, r3
 800276e:	3301      	adds	r3, #1
 8002770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_I2C_Init+0x196>
 8002782:	2301      	movs	r3, #1
 8002784:	e022      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10e      	bne.n	80027ac <HAL_I2C_Init+0x1bc>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1e58      	subs	r0, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	440b      	add	r3, r1
 800279c:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027aa:	e00f      	b.n	80027cc <HAL_I2C_Init+0x1dc>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1e58      	subs	r0, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6859      	ldr	r1, [r3, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	0099      	lsls	r1, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	6809      	ldr	r1, [r1, #0]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6911      	ldr	r1, [r2, #16]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68d2      	ldr	r2, [r2, #12]
 8002806:	4311      	orrs	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	430b      	orrs	r3, r1
 800280e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	000186a0 	.word	0x000186a0
 8002868:	001e847f 	.word	0x001e847f
 800286c:	003d08ff 	.word	0x003d08ff
 8002870:	431bde83 	.word	0x431bde83
 8002874:	10624dd3 	.word	0x10624dd3

08002878 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	461a      	mov	r2, r3
 8002884:	460b      	mov	r3, r1
 8002886:	817b      	strh	r3, [r7, #10]
 8002888:	4613      	mov	r3, r2
 800288a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800288c:	f7fe fdc6 	bl	800141c <HAL_GetTick>
 8002890:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b20      	cmp	r3, #32
 800289c:	f040 80e0 	bne.w	8002a60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2319      	movs	r3, #25
 80028a6:	2201      	movs	r2, #1
 80028a8:	4970      	ldr	r1, [pc, #448]	@ (8002a6c <HAL_I2C_Master_Transmit+0x1f4>)
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fa92 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
 80028b8:	e0d3      	b.n	8002a62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_I2C_Master_Transmit+0x50>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e0cc      	b.n	8002a62 <HAL_I2C_Master_Transmit+0x1ea>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d007      	beq.n	80028ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2221      	movs	r2, #33	@ 0x21
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2210      	movs	r2, #16
 800290a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	893a      	ldrh	r2, [r7, #8]
 800291e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4a50      	ldr	r2, [pc, #320]	@ (8002a70 <HAL_I2C_Master_Transmit+0x1f8>)
 800292e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002930:	8979      	ldrh	r1, [r7, #10]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	6a3a      	ldr	r2, [r7, #32]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f9ca 	bl	8002cd0 <I2C_MasterRequestWrite>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e08d      	b.n	8002a62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800295c:	e066      	b.n	8002a2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	6a39      	ldr	r1, [r7, #32]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fb50 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	2b04      	cmp	r3, #4
 8002974:	d107      	bne.n	8002986 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002984:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e06b      	b.n	8002a62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d11b      	bne.n	8002a00 <HAL_I2C_Master_Transmit+0x188>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d017      	beq.n	8002a00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	6a39      	ldr	r1, [r7, #32]
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fb47 	bl	8003098 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d107      	bne.n	8002a28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e01a      	b.n	8002a62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d194      	bne.n	800295e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e000      	b.n	8002a62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
  }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	00100002 	.word	0x00100002
 8002a70:	ffff0000 	.word	0xffff0000

08002a74 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	@ 0x28
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	460b      	mov	r3, r1
 8002a82:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7fe fcca 	bl	800141c <HAL_GetTick>
 8002a88:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	f040 8111 	bne.w	8002cbe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	2319      	movs	r3, #25
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4988      	ldr	r1, [pc, #544]	@ (8002cc8 <HAL_I2C_IsDeviceReady+0x254>)
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f994 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e104      	b.n	8002cc0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_I2C_IsDeviceReady+0x50>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e0fd      	b.n	8002cc0 <HAL_I2C_IsDeviceReady+0x24c>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d007      	beq.n	8002aea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002af8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2224      	movs	r2, #36	@ 0x24
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4a70      	ldr	r2, [pc, #448]	@ (8002ccc <HAL_I2C_IsDeviceReady+0x258>)
 8002b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b1c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f952 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00d      	beq.n	8002b52 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b44:	d103      	bne.n	8002b4e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0b6      	b.n	8002cc0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b52:	897b      	ldrh	r3, [r7, #10]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b60:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b62:	f7fe fc5b 	bl	800141c <HAL_GetTick>
 8002b66:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	bf0c      	ite	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	2300      	movne	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b8c:	bf0c      	ite	eq
 8002b8e:	2301      	moveq	r3, #1
 8002b90:	2300      	movne	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b96:	e025      	b.n	8002be4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b98:	f7fe fc40 	bl	800141c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d302      	bcc.n	8002bae <HAL_I2C_IsDeviceReady+0x13a>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	22a0      	movs	r2, #160	@ 0xa0
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2ba0      	cmp	r3, #160	@ 0xa0
 8002bee:	d005      	beq.n	8002bfc <HAL_I2C_IsDeviceReady+0x188>
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <HAL_I2C_IsDeviceReady+0x188>
 8002bf6:	7dbb      	ldrb	r3, [r7, #22]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0cd      	beq.n	8002b98 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d129      	bne.n	8002c66 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c20:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2319      	movs	r3, #25
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4921      	ldr	r1, [pc, #132]	@ (8002cc8 <HAL_I2C_IsDeviceReady+0x254>)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f8c6 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e036      	b.n	8002cc0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e02c      	b.n	8002cc0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c74:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c7e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2319      	movs	r3, #25
 8002c86:	2201      	movs	r2, #1
 8002c88:	490f      	ldr	r1, [pc, #60]	@ (8002cc8 <HAL_I2C_IsDeviceReady+0x254>)
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f8a2 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e012      	b.n	8002cc0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	f4ff af32 	bcc.w	8002b0e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002cbe:	2302      	movs	r3, #2
  }
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	00100002 	.word	0x00100002
 8002ccc:	ffff0000 	.word	0xffff0000

08002cd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d006      	beq.n	8002cfa <I2C_MasterRequestWrite+0x2a>
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d003      	beq.n	8002cfa <I2C_MasterRequestWrite+0x2a>
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cf8:	d108      	bne.n	8002d0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e00b      	b.n	8002d24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	2b12      	cmp	r3, #18
 8002d12:	d107      	bne.n	8002d24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f84f 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00d      	beq.n	8002d58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d4a:	d103      	bne.n	8002d54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e035      	b.n	8002dc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d60:	d108      	bne.n	8002d74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d62:	897b      	ldrh	r3, [r7, #10]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d70:	611a      	str	r2, [r3, #16]
 8002d72:	e01b      	b.n	8002dac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d74:	897b      	ldrh	r3, [r7, #10]
 8002d76:	11db      	asrs	r3, r3, #7
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f003 0306 	and.w	r3, r3, #6
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f063 030f 	orn	r3, r3, #15
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	490e      	ldr	r1, [pc, #56]	@ (8002dcc <I2C_MasterRequestWrite+0xfc>)
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f898 	bl	8002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e010      	b.n	8002dc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002da2:	897b      	ldrh	r3, [r7, #10]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4907      	ldr	r1, [pc, #28]	@ (8002dd0 <I2C_MasterRequestWrite+0x100>)
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f888 	bl	8002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	00010008 	.word	0x00010008
 8002dd0:	00010002 	.word	0x00010002

08002dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de4:	e048      	b.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d044      	beq.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dee:	f7fe fb15 	bl	800141c <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d302      	bcc.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d139      	bne.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	0c1b      	lsrs	r3, r3, #16
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d10d      	bne.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	43da      	mvns	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	e00c      	b.n	8002e44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	43da      	mvns	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4013      	ands	r3, r2
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d116      	bne.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	f043 0220 	orr.w	r2, r3, #32
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e023      	b.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	0c1b      	lsrs	r3, r3, #16
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10d      	bne.n	8002e9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	e00c      	b.n	8002eb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d093      	beq.n	8002de6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ed6:	e071      	b.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee6:	d123      	bne.n	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1c:	f043 0204 	orr.w	r2, r3, #4
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e067      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d041      	beq.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f38:	f7fe fa70 	bl	800141c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d302      	bcc.n	8002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d136      	bne.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	0c1b      	lsrs	r3, r3, #16
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10c      	bne.n	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4013      	ands	r3, r2
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf14      	ite	ne
 8002f6a:	2301      	movne	r3, #1
 8002f6c:	2300      	moveq	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	e00b      	b.n	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	43da      	mvns	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf14      	ite	ne
 8002f84:	2301      	movne	r3, #1
 8002f86:	2300      	moveq	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d016      	beq.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa8:	f043 0220 	orr.w	r2, r3, #32
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e021      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	0c1b      	lsrs	r3, r3, #16
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d10c      	bne.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	43da      	mvns	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e00b      	b.n	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4013      	ands	r3, r2
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bf14      	ite	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	2300      	moveq	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f47f af6d 	bne.w	8002ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003014:	e034      	b.n	8003080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f886 	bl	8003128 <I2C_IsAcknowledgeFailed>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e034      	b.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d028      	beq.n	8003080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fe f9f5 	bl	800141c <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d11d      	bne.n	8003080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304e:	2b80      	cmp	r3, #128	@ 0x80
 8003050:	d016      	beq.n	8003080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e007      	b.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308a:	2b80      	cmp	r3, #128	@ 0x80
 800308c:	d1c3      	bne.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030a4:	e034      	b.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f83e 	bl	8003128 <I2C_IsAcknowledgeFailed>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e034      	b.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d028      	beq.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030be:	f7fe f9ad 	bl	800141c <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d302      	bcc.n	80030d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d11d      	bne.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d016      	beq.n	8003110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fc:	f043 0220 	orr.w	r2, r3, #32
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e007      	b.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b04      	cmp	r3, #4
 800311c:	d1c3      	bne.n	80030a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800313e:	d11b      	bne.n	8003178 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003148:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	f043 0204 	orr.w	r2, r3, #4
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e272      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8087 	beq.w	80032b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031a4:	4b92      	ldr	r3, [pc, #584]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 030c 	and.w	r3, r3, #12
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d00c      	beq.n	80031ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031b0:	4b8f      	ldr	r3, [pc, #572]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d112      	bne.n	80031e2 <HAL_RCC_OscConfig+0x5e>
 80031bc:	4b8c      	ldr	r3, [pc, #560]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c8:	d10b      	bne.n	80031e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ca:	4b89      	ldr	r3, [pc, #548]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d06c      	beq.n	80032b0 <HAL_RCC_OscConfig+0x12c>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d168      	bne.n	80032b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e24c      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031ea:	d106      	bne.n	80031fa <HAL_RCC_OscConfig+0x76>
 80031ec:	4b80      	ldr	r3, [pc, #512]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a7f      	ldr	r2, [pc, #508]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	e02e      	b.n	8003258 <HAL_RCC_OscConfig+0xd4>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10c      	bne.n	800321c <HAL_RCC_OscConfig+0x98>
 8003202:	4b7b      	ldr	r3, [pc, #492]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a7a      	ldr	r2, [pc, #488]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003208:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	4b78      	ldr	r3, [pc, #480]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a77      	ldr	r2, [pc, #476]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003214:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e01d      	b.n	8003258 <HAL_RCC_OscConfig+0xd4>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0xbc>
 8003226:	4b72      	ldr	r3, [pc, #456]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a71      	ldr	r2, [pc, #452]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 800322c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b6f      	ldr	r3, [pc, #444]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6e      	ldr	r2, [pc, #440]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0xd4>
 8003240:	4b6b      	ldr	r3, [pc, #428]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a6a      	ldr	r2, [pc, #424]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b68      	ldr	r3, [pc, #416]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a67      	ldr	r2, [pc, #412]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003252:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003256:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe f8dc 	bl	800141c <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003268:	f7fe f8d8 	bl	800141c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	@ 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e200      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b5d      	ldr	r3, [pc, #372]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0xe4>
 8003286:	e014      	b.n	80032b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe f8c8 	bl	800141c <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003290:	f7fe f8c4 	bl	800141c <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	@ 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e1ec      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	4b53      	ldr	r3, [pc, #332]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x10c>
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d063      	beq.n	8003386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032be:	4b4c      	ldr	r3, [pc, #304]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032ca:	4b49      	ldr	r3, [pc, #292]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d11c      	bne.n	8003310 <HAL_RCC_OscConfig+0x18c>
 80032d6:	4b46      	ldr	r3, [pc, #280]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d116      	bne.n	8003310 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e2:	4b43      	ldr	r3, [pc, #268]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_RCC_OscConfig+0x176>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e1c0      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fa:	4b3d      	ldr	r3, [pc, #244]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4939      	ldr	r1, [pc, #228]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330e:	e03a      	b.n	8003386 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003318:	4b36      	ldr	r3, [pc, #216]	@ (80033f4 <HAL_RCC_OscConfig+0x270>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7fe f87d 	bl	800141c <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003326:	f7fe f879 	bl	800141c <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e1a1      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	4b2d      	ldr	r3, [pc, #180]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003344:	4b2a      	ldr	r3, [pc, #168]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4927      	ldr	r1, [pc, #156]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 8003354:	4313      	orrs	r3, r2
 8003356:	600b      	str	r3, [r1, #0]
 8003358:	e015      	b.n	8003386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335a:	4b26      	ldr	r3, [pc, #152]	@ (80033f4 <HAL_RCC_OscConfig+0x270>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fe f85c 	bl	800141c <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003368:	f7fe f858 	bl	800141c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e180      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	4b1d      	ldr	r3, [pc, #116]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d03a      	beq.n	8003408 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d019      	beq.n	80033ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339a:	4b17      	ldr	r3, [pc, #92]	@ (80033f8 <HAL_RCC_OscConfig+0x274>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a0:	f7fe f83c 	bl	800141c <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a8:	f7fe f838 	bl	800141c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e160      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	4b0d      	ldr	r3, [pc, #52]	@ (80033f0 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033c6:	2001      	movs	r0, #1
 80033c8:	f000 faea 	bl	80039a0 <RCC_Delay>
 80033cc:	e01c      	b.n	8003408 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ce:	4b0a      	ldr	r3, [pc, #40]	@ (80033f8 <HAL_RCC_OscConfig+0x274>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d4:	f7fe f822 	bl	800141c <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033da:	e00f      	b.n	80033fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033dc:	f7fe f81e 	bl	800141c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d908      	bls.n	80033fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e146      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	42420000 	.word	0x42420000
 80033f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fc:	4b92      	ldr	r3, [pc, #584]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e9      	bne.n	80033dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80a6 	beq.w	8003562 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341a:	4b8b      	ldr	r3, [pc, #556]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10d      	bne.n	8003442 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	4b88      	ldr	r3, [pc, #544]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4a87      	ldr	r2, [pc, #540]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003430:	61d3      	str	r3, [r2, #28]
 8003432:	4b85      	ldr	r3, [pc, #532]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343e:	2301      	movs	r3, #1
 8003440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003442:	4b82      	ldr	r3, [pc, #520]	@ (800364c <HAL_RCC_OscConfig+0x4c8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d118      	bne.n	8003480 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344e:	4b7f      	ldr	r3, [pc, #508]	@ (800364c <HAL_RCC_OscConfig+0x4c8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a7e      	ldr	r2, [pc, #504]	@ (800364c <HAL_RCC_OscConfig+0x4c8>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345a:	f7fd ffdf 	bl	800141c <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003462:	f7fd ffdb 	bl	800141c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b64      	cmp	r3, #100	@ 0x64
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e103      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	4b75      	ldr	r3, [pc, #468]	@ (800364c <HAL_RCC_OscConfig+0x4c8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d106      	bne.n	8003496 <HAL_RCC_OscConfig+0x312>
 8003488:	4b6f      	ldr	r3, [pc, #444]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4a6e      	ldr	r2, [pc, #440]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	6213      	str	r3, [r2, #32]
 8003494:	e02d      	b.n	80034f2 <HAL_RCC_OscConfig+0x36e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x334>
 800349e:	4b6a      	ldr	r3, [pc, #424]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	4a69      	ldr	r2, [pc, #420]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	6213      	str	r3, [r2, #32]
 80034aa:	4b67      	ldr	r3, [pc, #412]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	4a66      	ldr	r2, [pc, #408]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	f023 0304 	bic.w	r3, r3, #4
 80034b4:	6213      	str	r3, [r2, #32]
 80034b6:	e01c      	b.n	80034f2 <HAL_RCC_OscConfig+0x36e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d10c      	bne.n	80034da <HAL_RCC_OscConfig+0x356>
 80034c0:	4b61      	ldr	r3, [pc, #388]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4a60      	ldr	r2, [pc, #384]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	f043 0304 	orr.w	r3, r3, #4
 80034ca:	6213      	str	r3, [r2, #32]
 80034cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	6213      	str	r3, [r2, #32]
 80034d8:	e00b      	b.n	80034f2 <HAL_RCC_OscConfig+0x36e>
 80034da:	4b5b      	ldr	r3, [pc, #364]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4a5a      	ldr	r2, [pc, #360]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6213      	str	r3, [r2, #32]
 80034e6:	4b58      	ldr	r3, [pc, #352]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a57      	ldr	r2, [pc, #348]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	f023 0304 	bic.w	r3, r3, #4
 80034f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d015      	beq.n	8003526 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fa:	f7fd ff8f 	bl	800141c <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003500:	e00a      	b.n	8003518 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003502:	f7fd ff8b 	bl	800141c <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e0b1      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003518:	4b4b      	ldr	r3, [pc, #300]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ee      	beq.n	8003502 <HAL_RCC_OscConfig+0x37e>
 8003524:	e014      	b.n	8003550 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003526:	f7fd ff79 	bl	800141c <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352c:	e00a      	b.n	8003544 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352e:	f7fd ff75 	bl	800141c <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800353c:	4293      	cmp	r3, r2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e09b      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003544:	4b40      	ldr	r3, [pc, #256]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ee      	bne.n	800352e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003556:	4b3c      	ldr	r3, [pc, #240]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	4a3b      	ldr	r2, [pc, #236]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 800355c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003560:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8087 	beq.w	800367a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800356c:	4b36      	ldr	r3, [pc, #216]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b08      	cmp	r3, #8
 8003576:	d061      	beq.n	800363c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d146      	bne.n	800360e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003580:	4b33      	ldr	r3, [pc, #204]	@ (8003650 <HAL_RCC_OscConfig+0x4cc>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003586:	f7fd ff49 	bl	800141c <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358e:	f7fd ff45 	bl	800141c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e06d      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a0:	4b29      	ldr	r3, [pc, #164]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b4:	d108      	bne.n	80035c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035b6:	4b24      	ldr	r3, [pc, #144]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	4921      	ldr	r1, [pc, #132]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a19      	ldr	r1, [r3, #32]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	430b      	orrs	r3, r1
 80035da:	491b      	ldr	r1, [pc, #108]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003650 <HAL_RCC_OscConfig+0x4cc>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e6:	f7fd ff19 	bl	800141c <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ee:	f7fd ff15 	bl	800141c <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e03d      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003600:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x46a>
 800360c:	e035      	b.n	800367a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360e:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <HAL_RCC_OscConfig+0x4cc>)
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fd ff02 	bl	800141c <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361c:	f7fd fefe 	bl	800141c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e026      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362e:	4b06      	ldr	r3, [pc, #24]	@ (8003648 <HAL_RCC_OscConfig+0x4c4>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x498>
 800363a:	e01e      	b.n	800367a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d107      	bne.n	8003654 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e019      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
 8003648:	40021000 	.word	0x40021000
 800364c:	40007000 	.word	0x40007000
 8003650:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003654:	4b0b      	ldr	r3, [pc, #44]	@ (8003684 <HAL_RCC_OscConfig+0x500>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	429a      	cmp	r2, r3
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d001      	beq.n	800367a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000

08003688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0d0      	b.n	800383e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800369c:	4b6a      	ldr	r3, [pc, #424]	@ (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d910      	bls.n	80036cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b67      	ldr	r3, [pc, #412]	@ (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 0207 	bic.w	r2, r3, #7
 80036b2:	4965      	ldr	r1, [pc, #404]	@ (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b63      	ldr	r3, [pc, #396]	@ (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0b8      	b.n	800383e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d020      	beq.n	800371a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e4:	4b59      	ldr	r3, [pc, #356]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a58      	ldr	r2, [pc, #352]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 80036ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036fc:	4b53      	ldr	r3, [pc, #332]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	4a52      	ldr	r2, [pc, #328]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003706:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003708:	4b50      	ldr	r3, [pc, #320]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	494d      	ldr	r1, [pc, #308]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003716:	4313      	orrs	r3, r2
 8003718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d040      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	4b47      	ldr	r3, [pc, #284]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d115      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e07f      	b.n	800383e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003746:	4b41      	ldr	r3, [pc, #260]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e073      	b.n	800383e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003756:	4b3d      	ldr	r3, [pc, #244]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e06b      	b.n	800383e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003766:	4b39      	ldr	r3, [pc, #228]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f023 0203 	bic.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4936      	ldr	r1, [pc, #216]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003778:	f7fd fe50 	bl	800141c <HAL_GetTick>
 800377c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377e:	e00a      	b.n	8003796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003780:	f7fd fe4c 	bl	800141c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e053      	b.n	800383e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	4b2d      	ldr	r3, [pc, #180]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 020c 	and.w	r2, r3, #12
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d1eb      	bne.n	8003780 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a8:	4b27      	ldr	r3, [pc, #156]	@ (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d210      	bcs.n	80037d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b24      	ldr	r3, [pc, #144]	@ (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 0207 	bic.w	r2, r3, #7
 80037be:	4922      	ldr	r1, [pc, #136]	@ (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b20      	ldr	r3, [pc, #128]	@ (8003848 <HAL_RCC_ClockConfig+0x1c0>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e032      	b.n	800383e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e4:	4b19      	ldr	r3, [pc, #100]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4916      	ldr	r1, [pc, #88]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003802:	4b12      	ldr	r3, [pc, #72]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	490e      	ldr	r1, [pc, #56]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	4313      	orrs	r3, r2
 8003814:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003816:	f000 f821 	bl	800385c <HAL_RCC_GetSysClockFreq>
 800381a:	4602      	mov	r2, r0
 800381c:	4b0b      	ldr	r3, [pc, #44]	@ (800384c <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	490a      	ldr	r1, [pc, #40]	@ (8003850 <HAL_RCC_ClockConfig+0x1c8>)
 8003828:	5ccb      	ldrb	r3, [r1, r3]
 800382a:	fa22 f303 	lsr.w	r3, r2, r3
 800382e:	4a09      	ldr	r2, [pc, #36]	@ (8003854 <HAL_RCC_ClockConfig+0x1cc>)
 8003830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003832:	4b09      	ldr	r3, [pc, #36]	@ (8003858 <HAL_RCC_ClockConfig+0x1d0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fd fcf0 	bl	800121c <HAL_InitTick>

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40022000 	.word	0x40022000
 800384c:	40021000 	.word	0x40021000
 8003850:	08008a50 	.word	0x08008a50
 8003854:	20000030 	.word	0x20000030
 8003858:	20000034 	.word	0x20000034

0800385c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	2300      	movs	r3, #0
 8003870:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003876:	4b1e      	ldr	r3, [pc, #120]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b04      	cmp	r3, #4
 8003884:	d002      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0x30>
 8003886:	2b08      	cmp	r3, #8
 8003888:	d003      	beq.n	8003892 <HAL_RCC_GetSysClockFreq+0x36>
 800388a:	e027      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800388c:	4b19      	ldr	r3, [pc, #100]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800388e:	613b      	str	r3, [r7, #16]
      break;
 8003890:	e027      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	0c9b      	lsrs	r3, r3, #18
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	4a17      	ldr	r2, [pc, #92]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800389c:	5cd3      	ldrb	r3, [r2, r3]
 800389e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d010      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038aa:	4b11      	ldr	r3, [pc, #68]	@ (80038f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	0c5b      	lsrs	r3, r3, #17
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	4a11      	ldr	r2, [pc, #68]	@ (80038fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80038b6:	5cd3      	ldrb	r3, [r2, r3]
 80038b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a0d      	ldr	r2, [pc, #52]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80038be:	fb03 f202 	mul.w	r2, r3, r2
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	e004      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003900 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038d0:	fb02 f303 	mul.w	r3, r2, r3
 80038d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	613b      	str	r3, [r7, #16]
      break;
 80038da:	e002      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038dc:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80038de:	613b      	str	r3, [r7, #16]
      break;
 80038e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038e2:	693b      	ldr	r3, [r7, #16]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000
 80038f4:	007a1200 	.word	0x007a1200
 80038f8:	08008a68 	.word	0x08008a68
 80038fc:	08008a78 	.word	0x08008a78
 8003900:	003d0900 	.word	0x003d0900

08003904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003908:	4b02      	ldr	r3, [pc, #8]	@ (8003914 <HAL_RCC_GetHCLKFreq+0x10>)
 800390a:	681b      	ldr	r3, [r3, #0]
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	20000030 	.word	0x20000030

08003918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800391c:	f7ff fff2 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 8003920:	4602      	mov	r2, r0
 8003922:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	0a1b      	lsrs	r3, r3, #8
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	4903      	ldr	r1, [pc, #12]	@ (800393c <HAL_RCC_GetPCLK1Freq+0x24>)
 800392e:	5ccb      	ldrb	r3, [r1, r3]
 8003930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003934:	4618      	mov	r0, r3
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40021000 	.word	0x40021000
 800393c:	08008a60 	.word	0x08008a60

08003940 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	220f      	movs	r2, #15
 800394e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003950:	4b11      	ldr	r3, [pc, #68]	@ (8003998 <HAL_RCC_GetClockConfig+0x58>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0203 	and.w	r2, r3, #3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800395c:	4b0e      	ldr	r3, [pc, #56]	@ (8003998 <HAL_RCC_GetClockConfig+0x58>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003968:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <HAL_RCC_GetClockConfig+0x58>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003974:	4b08      	ldr	r3, [pc, #32]	@ (8003998 <HAL_RCC_GetClockConfig+0x58>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	08db      	lsrs	r3, r3, #3
 800397a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003982:	4b06      	ldr	r3, [pc, #24]	@ (800399c <HAL_RCC_GetClockConfig+0x5c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0207 	and.w	r2, r3, #7
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	40021000 	.word	0x40021000
 800399c:	40022000 	.word	0x40022000

080039a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039a8:	4b0a      	ldr	r3, [pc, #40]	@ (80039d4 <RCC_Delay+0x34>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a0a      	ldr	r2, [pc, #40]	@ (80039d8 <RCC_Delay+0x38>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	0a5b      	lsrs	r3, r3, #9
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
 80039ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039bc:	bf00      	nop
  }
  while (Delay --);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1e5a      	subs	r2, r3, #1
 80039c2:	60fa      	str	r2, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f9      	bne.n	80039bc <RCC_Delay+0x1c>
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr
 80039d4:	20000030 	.word	0x20000030
 80039d8:	10624dd3 	.word	0x10624dd3

080039dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e041      	b.n	8003a72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f839 	bl	8003a7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3304      	adds	r3, #4
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f000 f99c 	bl	8003d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d001      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e03a      	b.n	8003b1a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a18      	ldr	r2, [pc, #96]	@ (8003b24 <HAL_TIM_Base_Start_IT+0x98>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00e      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0x58>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ace:	d009      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0x58>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a14      	ldr	r2, [pc, #80]	@ (8003b28 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <HAL_TIM_Base_Start_IT+0x58>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a13      	ldr	r2, [pc, #76]	@ (8003b2c <HAL_TIM_Base_Start_IT+0xa0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d111      	bne.n	8003b08 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b06      	cmp	r3, #6
 8003af4:	d010      	beq.n	8003b18 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0201 	orr.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b06:	e007      	b.n	8003b18 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	40012c00 	.word	0x40012c00
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800

08003b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d020      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01b      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0202 	mvn.w	r2, #2
 8003b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f8d1 	bl	8003d22 <HAL_TIM_IC_CaptureCallback>
 8003b80:	e005      	b.n	8003b8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f8c4 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f8d3 	bl	8003d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d020      	beq.n	8003be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01b      	beq.n	8003be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0204 	mvn.w	r2, #4
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8ab 	bl	8003d22 <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f89e 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f8ad 	bl	8003d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d020      	beq.n	8003c2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01b      	beq.n	8003c2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0208 	mvn.w	r2, #8
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2204      	movs	r2, #4
 8003c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f885 	bl	8003d22 <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f878 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f887 	bl	8003d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d020      	beq.n	8003c78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01b      	beq.n	8003c78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0210 	mvn.w	r2, #16
 8003c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f85f 	bl	8003d22 <HAL_TIM_IC_CaptureCallback>
 8003c64:	e005      	b.n	8003c72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f852 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f861 	bl	8003d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00c      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0201 	mvn.w	r2, #1
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fc ff30 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00c      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f8c3 	bl	8003e46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00c      	beq.n	8003ce4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d007      	beq.n	8003ce4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f831 	bl	8003d46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00c      	beq.n	8003d08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0220 	mvn.w	r2, #32
 8003d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f896 	bl	8003e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr

08003d22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr

08003d46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8003e28 <TIM_Base_SetConfig+0xd0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d76:	d007      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003e2c <TIM_Base_SetConfig+0xd4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a2b      	ldr	r2, [pc, #172]	@ (8003e30 <TIM_Base_SetConfig+0xd8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d108      	bne.n	8003d9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a22      	ldr	r2, [pc, #136]	@ (8003e28 <TIM_Base_SetConfig+0xd0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da8:	d007      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1f      	ldr	r2, [pc, #124]	@ (8003e2c <TIM_Base_SetConfig+0xd4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e30 <TIM_Base_SetConfig+0xd8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d108      	bne.n	8003dcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0d      	ldr	r2, [pc, #52]	@ (8003e28 <TIM_Base_SetConfig+0xd0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d103      	bne.n	8003e00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f023 0201 	bic.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	611a      	str	r2, [r3, #16]
  }
}
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr
 8003e28:	40012c00 	.word	0x40012c00
 8003e2c:	40000400 	.word	0x40000400
 8003e30:	40000800 	.word	0x40000800

08003e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e6a:	2b84      	cmp	r3, #132	@ 0x84
 8003e6c:	d005      	beq.n	8003e7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	3303      	adds	r3, #3
 8003e78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e8a:	f000 faf7 	bl	800447c <vTaskStartScheduler>
  
  return osOK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e96:	b089      	sub	sp, #36	@ 0x24
 8003e98:	af04      	add	r7, sp, #16
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d020      	beq.n	8003ee8 <osThreadCreate+0x54>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01c      	beq.n	8003ee8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685c      	ldr	r4, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691e      	ldr	r6, [r3, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ffc9 	bl	8003e58 <makeFreeRtosPriority>
 8003ec6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ed0:	9202      	str	r2, [sp, #8]
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	9100      	str	r1, [sp, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	4632      	mov	r2, r6
 8003eda:	4629      	mov	r1, r5
 8003edc:	4620      	mov	r0, r4
 8003ede:	f000 f8e8 	bl	80040b2 <xTaskCreateStatic>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	e01c      	b.n	8003f22 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685c      	ldr	r4, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ef4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff ffab 	bl	8003e58 <makeFreeRtosPriority>
 8003f02:	4602      	mov	r2, r0
 8003f04:	f107 030c 	add.w	r3, r7, #12
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	9200      	str	r2, [sp, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	4632      	mov	r2, r6
 8003f10:	4629      	mov	r1, r5
 8003f12:	4620      	mov	r0, r4
 8003f14:	f000 f92d 	bl	8004172 <xTaskCreate>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e000      	b.n	8003f24 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f22:	68fb      	ldr	r3, [r7, #12]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f2c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <osDelay+0x16>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	e000      	b.n	8003f44 <osDelay+0x18>
 8003f42:	2301      	movs	r3, #1
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fa63 	bl	8004410 <vTaskDelay>
  
  return osOK;
 8003f4a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f103 0208 	add.w	r2, r3, #8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f103 0208 	add.w	r2, r3, #8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f103 0208 	add.w	r2, r3, #8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr

08003faa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	601a      	str	r2, [r3, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d103      	bne.n	8004010 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	e00c      	b.n	800402a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3308      	adds	r3, #8
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e002      	b.n	800401e <vListInsert+0x2e>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	d2f6      	bcs.n	8004018 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	601a      	str	r2, [r3, #0]
}
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6892      	ldr	r2, [r2, #8]
 8004076:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6852      	ldr	r2, [r2, #4]
 8004080:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	429a      	cmp	r2, r3
 800408a:	d103      	bne.n	8004094 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	1e5a      	subs	r2, r3, #1
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b08e      	sub	sp, #56	@ 0x38
 80040b6:	af04      	add	r7, sp, #16
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
 80040be:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10b      	bne.n	80040de <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	e7fd      	b.n	80040da <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10b      	bne.n	80040fc <xTaskCreateStatic+0x4a>
	__asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	61fb      	str	r3, [r7, #28]
}
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
 80040fa:	e7fd      	b.n	80040f8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040fc:	23a0      	movs	r3, #160	@ 0xa0
 80040fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	2ba0      	cmp	r3, #160	@ 0xa0
 8004104:	d00b      	beq.n	800411e <xTaskCreateStatic+0x6c>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	61bb      	str	r3, [r7, #24]
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	e7fd      	b.n	800411a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800411e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004122:	2b00      	cmp	r3, #0
 8004124:	d01e      	beq.n	8004164 <xTaskCreateStatic+0xb2>
 8004126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01b      	beq.n	8004164 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800412c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004134:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	2202      	movs	r2, #2
 800413a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800413e:	2300      	movs	r3, #0
 8004140:	9303      	str	r3, [sp, #12]
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	9302      	str	r3, [sp, #8]
 8004146:	f107 0314 	add.w	r3, r7, #20
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f850 	bl	80041fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800415c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800415e:	f000 f8ed 	bl	800433c <prvAddNewTaskToReadyList>
 8004162:	e001      	b.n	8004168 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004168:	697b      	ldr	r3, [r7, #20]
	}
 800416a:	4618      	mov	r0, r3
 800416c:	3728      	adds	r7, #40	@ 0x28
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004172:	b580      	push	{r7, lr}
 8004174:	b08c      	sub	sp, #48	@ 0x30
 8004176:	af04      	add	r7, sp, #16
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	603b      	str	r3, [r7, #0]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fea2 	bl	8004ed0 <pvPortMalloc>
 800418c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00e      	beq.n	80041b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004194:	20a0      	movs	r0, #160	@ 0xa0
 8004196:	f000 fe9b 	bl	8004ed0 <pvPortMalloc>
 800419a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80041a8:	e005      	b.n	80041b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041aa:	6978      	ldr	r0, [r7, #20]
 80041ac:	f000 ff5e 	bl	800506c <vPortFree>
 80041b0:	e001      	b.n	80041b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d017      	beq.n	80041ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041c4:	88fa      	ldrh	r2, [r7, #6]
 80041c6:	2300      	movs	r3, #0
 80041c8:	9303      	str	r3, [sp, #12]
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	9302      	str	r3, [sp, #8]
 80041ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f80e 	bl	80041fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041e0:	69f8      	ldr	r0, [r7, #28]
 80041e2:	f000 f8ab 	bl	800433c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041e6:	2301      	movs	r3, #1
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e002      	b.n	80041f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041ec:	f04f 33ff 	mov.w	r3, #4294967295
 80041f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041f2:	69bb      	ldr	r3, [r7, #24]
	}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800420a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004214:	3b01      	subs	r3, #1
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	f023 0307 	bic.w	r3, r3, #7
 8004222:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00b      	beq.n	8004246 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	617b      	str	r3, [r7, #20]
}
 8004240:	bf00      	nop
 8004242:	bf00      	nop
 8004244:	e7fd      	b.n	8004242 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01f      	beq.n	800428c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	e012      	b.n	8004278 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	4413      	add	r3, r2
 8004258:	7819      	ldrb	r1, [r3, #0]
 800425a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	3334      	adds	r3, #52	@ 0x34
 8004262:	460a      	mov	r2, r1
 8004264:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d006      	beq.n	8004280 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3301      	adds	r3, #1
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2b0f      	cmp	r3, #15
 800427c:	d9e9      	bls.n	8004252 <prvInitialiseNewTask+0x56>
 800427e:	e000      	b.n	8004282 <prvInitialiseNewTask+0x86>
			{
				break;
 8004280:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800428a:	e003      	b.n	8004294 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004296:	2b06      	cmp	r3, #6
 8004298:	d901      	bls.n	800429e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800429a:	2306      	movs	r3, #6
 800429c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042a8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	2200      	movs	r2, #0
 80042ae:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	3304      	adds	r3, #4
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff fe6c 	bl	8003f92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042bc:	3318      	adds	r3, #24
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fe67 	bl	8003f92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042cc:	f1c3 0207 	rsb	r2, r3, #7
 80042d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042dc:	2200      	movs	r2, #0
 80042de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ec:	334c      	adds	r3, #76	@ 0x4c
 80042ee:	224c      	movs	r2, #76	@ 0x4c
 80042f0:	2100      	movs	r1, #0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 ffd8 	bl	80052a8 <memset>
 80042f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004330 <prvInitialiseNewTask+0x134>)
 80042fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	4a0c      	ldr	r2, [pc, #48]	@ (8004334 <prvInitialiseNewTask+0x138>)
 8004302:	655a      	str	r2, [r3, #84]	@ 0x54
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	4a0c      	ldr	r2, [pc, #48]	@ (8004338 <prvInitialiseNewTask+0x13c>)
 8004308:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	68f9      	ldr	r1, [r7, #12]
 800430e:	69b8      	ldr	r0, [r7, #24]
 8004310:	f000 fc28 	bl	8004b64 <pxPortInitialiseStack>
 8004314:	4602      	mov	r2, r0
 8004316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004318:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800431a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004326:	bf00      	nop
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20001608 	.word	0x20001608
 8004334:	20001670 	.word	0x20001670
 8004338:	200016d8 	.word	0x200016d8

0800433c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004344:	f000 fd02 	bl	8004d4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004348:	4b2a      	ldr	r3, [pc, #168]	@ (80043f4 <prvAddNewTaskToReadyList+0xb8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3301      	adds	r3, #1
 800434e:	4a29      	ldr	r2, [pc, #164]	@ (80043f4 <prvAddNewTaskToReadyList+0xb8>)
 8004350:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004352:	4b29      	ldr	r3, [pc, #164]	@ (80043f8 <prvAddNewTaskToReadyList+0xbc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800435a:	4a27      	ldr	r2, [pc, #156]	@ (80043f8 <prvAddNewTaskToReadyList+0xbc>)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004360:	4b24      	ldr	r3, [pc, #144]	@ (80043f4 <prvAddNewTaskToReadyList+0xb8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d110      	bne.n	800438a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004368:	f000 fad2 	bl	8004910 <prvInitialiseTaskLists>
 800436c:	e00d      	b.n	800438a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800436e:	4b23      	ldr	r3, [pc, #140]	@ (80043fc <prvAddNewTaskToReadyList+0xc0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004376:	4b20      	ldr	r3, [pc, #128]	@ (80043f8 <prvAddNewTaskToReadyList+0xbc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004380:	429a      	cmp	r2, r3
 8004382:	d802      	bhi.n	800438a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004384:	4a1c      	ldr	r2, [pc, #112]	@ (80043f8 <prvAddNewTaskToReadyList+0xbc>)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800438a:	4b1d      	ldr	r3, [pc, #116]	@ (8004400 <prvAddNewTaskToReadyList+0xc4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3301      	adds	r3, #1
 8004390:	4a1b      	ldr	r2, [pc, #108]	@ (8004400 <prvAddNewTaskToReadyList+0xc4>)
 8004392:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004398:	2201      	movs	r2, #1
 800439a:	409a      	lsls	r2, r3
 800439c:	4b19      	ldr	r3, [pc, #100]	@ (8004404 <prvAddNewTaskToReadyList+0xc8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	4a18      	ldr	r2, [pc, #96]	@ (8004404 <prvAddNewTaskToReadyList+0xc8>)
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <prvAddNewTaskToReadyList+0xcc>)
 80043b4:	441a      	add	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f7ff fdf4 	bl	8003faa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043c2:	f000 fcf3 	bl	8004dac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043c6:	4b0d      	ldr	r3, [pc, #52]	@ (80043fc <prvAddNewTaskToReadyList+0xc0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00e      	beq.n	80043ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043ce:	4b0a      	ldr	r3, [pc, #40]	@ (80043f8 <prvAddNewTaskToReadyList+0xbc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	429a      	cmp	r2, r3
 80043da:	d207      	bcs.n	80043ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043dc:	4b0b      	ldr	r3, [pc, #44]	@ (800440c <prvAddNewTaskToReadyList+0xd0>)
 80043de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	200009b4 	.word	0x200009b4
 80043f8:	200008b4 	.word	0x200008b4
 80043fc:	200009c0 	.word	0x200009c0
 8004400:	200009d0 	.word	0x200009d0
 8004404:	200009bc 	.word	0x200009bc
 8004408:	200008b8 	.word	0x200008b8
 800440c:	e000ed04 	.word	0xe000ed04

08004410 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d018      	beq.n	8004454 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004422:	4b14      	ldr	r3, [pc, #80]	@ (8004474 <vTaskDelay+0x64>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <vTaskDelay+0x32>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	60bb      	str	r3, [r7, #8]
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	e7fd      	b.n	800443e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004442:	f000 f885 	bl	8004550 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004446:	2100      	movs	r1, #0
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fb25 	bl	8004a98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800444e:	f000 f88d 	bl	800456c <xTaskResumeAll>
 8004452:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d107      	bne.n	800446a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800445a:	4b07      	ldr	r3, [pc, #28]	@ (8004478 <vTaskDelay+0x68>)
 800445c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800446a:	bf00      	nop
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	200009dc 	.word	0x200009dc
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	@ 0x28
 8004480:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004486:	2300      	movs	r3, #0
 8004488:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800448a:	463a      	mov	r2, r7
 800448c:	1d39      	adds	r1, r7, #4
 800448e:	f107 0308 	add.w	r3, r7, #8
 8004492:	4618      	mov	r0, r3
 8004494:	f7fb ff9e 	bl	80003d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	9202      	str	r2, [sp, #8]
 80044a0:	9301      	str	r3, [sp, #4]
 80044a2:	2300      	movs	r3, #0
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	2300      	movs	r3, #0
 80044a8:	460a      	mov	r2, r1
 80044aa:	4921      	ldr	r1, [pc, #132]	@ (8004530 <vTaskStartScheduler+0xb4>)
 80044ac:	4821      	ldr	r0, [pc, #132]	@ (8004534 <vTaskStartScheduler+0xb8>)
 80044ae:	f7ff fe00 	bl	80040b2 <xTaskCreateStatic>
 80044b2:	4603      	mov	r3, r0
 80044b4:	4a20      	ldr	r2, [pc, #128]	@ (8004538 <vTaskStartScheduler+0xbc>)
 80044b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004538 <vTaskStartScheduler+0xbc>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044c0:	2301      	movs	r3, #1
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	e001      	b.n	80044ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d11b      	bne.n	8004508 <vTaskStartScheduler+0x8c>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	613b      	str	r3, [r7, #16]
}
 80044e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044e4:	4b15      	ldr	r3, [pc, #84]	@ (800453c <vTaskStartScheduler+0xc0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	334c      	adds	r3, #76	@ 0x4c
 80044ea:	4a15      	ldr	r2, [pc, #84]	@ (8004540 <vTaskStartScheduler+0xc4>)
 80044ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044ee:	4b15      	ldr	r3, [pc, #84]	@ (8004544 <vTaskStartScheduler+0xc8>)
 80044f0:	f04f 32ff 	mov.w	r2, #4294967295
 80044f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044f6:	4b14      	ldr	r3, [pc, #80]	@ (8004548 <vTaskStartScheduler+0xcc>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044fc:	4b13      	ldr	r3, [pc, #76]	@ (800454c <vTaskStartScheduler+0xd0>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004502:	f000 fbb1 	bl	8004c68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004506:	e00f      	b.n	8004528 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450e:	d10b      	bne.n	8004528 <vTaskStartScheduler+0xac>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	60fb      	str	r3, [r7, #12]
}
 8004522:	bf00      	nop
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <vTaskStartScheduler+0xa8>
}
 8004528:	bf00      	nop
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	080054ec 	.word	0x080054ec
 8004534:	080048e1 	.word	0x080048e1
 8004538:	200009d8 	.word	0x200009d8
 800453c:	200008b4 	.word	0x200008b4
 8004540:	20000040 	.word	0x20000040
 8004544:	200009d4 	.word	0x200009d4
 8004548:	200009c0 	.word	0x200009c0
 800454c:	200009b8 	.word	0x200009b8

08004550 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004554:	4b04      	ldr	r3, [pc, #16]	@ (8004568 <vTaskSuspendAll+0x18>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	4a03      	ldr	r2, [pc, #12]	@ (8004568 <vTaskSuspendAll+0x18>)
 800455c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800455e:	bf00      	nop
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	200009dc 	.word	0x200009dc

0800456c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800457a:	4b42      	ldr	r3, [pc, #264]	@ (8004684 <xTaskResumeAll+0x118>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <xTaskResumeAll+0x2e>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	603b      	str	r3, [r7, #0]
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	e7fd      	b.n	8004596 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800459a:	f000 fbd7 	bl	8004d4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800459e:	4b39      	ldr	r3, [pc, #228]	@ (8004684 <xTaskResumeAll+0x118>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	4a37      	ldr	r2, [pc, #220]	@ (8004684 <xTaskResumeAll+0x118>)
 80045a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a8:	4b36      	ldr	r3, [pc, #216]	@ (8004684 <xTaskResumeAll+0x118>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d161      	bne.n	8004674 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045b0:	4b35      	ldr	r3, [pc, #212]	@ (8004688 <xTaskResumeAll+0x11c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d05d      	beq.n	8004674 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045b8:	e02e      	b.n	8004618 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ba:	4b34      	ldr	r3, [pc, #208]	@ (800468c <xTaskResumeAll+0x120>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3318      	adds	r3, #24
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fd4a 	bl	8004060 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff fd45 	bl	8004060 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045da:	2201      	movs	r2, #1
 80045dc:	409a      	lsls	r2, r3
 80045de:	4b2c      	ldr	r3, [pc, #176]	@ (8004690 <xTaskResumeAll+0x124>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004690 <xTaskResumeAll+0x124>)
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4a27      	ldr	r2, [pc, #156]	@ (8004694 <xTaskResumeAll+0x128>)
 80045f6:	441a      	add	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	4610      	mov	r0, r2
 8004600:	f7ff fcd3 	bl	8003faa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004608:	4b23      	ldr	r3, [pc, #140]	@ (8004698 <xTaskResumeAll+0x12c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460e:	429a      	cmp	r2, r3
 8004610:	d302      	bcc.n	8004618 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004612:	4b22      	ldr	r3, [pc, #136]	@ (800469c <xTaskResumeAll+0x130>)
 8004614:	2201      	movs	r2, #1
 8004616:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004618:	4b1c      	ldr	r3, [pc, #112]	@ (800468c <xTaskResumeAll+0x120>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1cc      	bne.n	80045ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004626:	f000 fa17 	bl	8004a58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800462a:	4b1d      	ldr	r3, [pc, #116]	@ (80046a0 <xTaskResumeAll+0x134>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d010      	beq.n	8004658 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004636:	f000 f837 	bl	80046a8 <xTaskIncrementTick>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004640:	4b16      	ldr	r3, [pc, #88]	@ (800469c <xTaskResumeAll+0x130>)
 8004642:	2201      	movs	r2, #1
 8004644:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3b01      	subs	r3, #1
 800464a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f1      	bne.n	8004636 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004652:	4b13      	ldr	r3, [pc, #76]	@ (80046a0 <xTaskResumeAll+0x134>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004658:	4b10      	ldr	r3, [pc, #64]	@ (800469c <xTaskResumeAll+0x130>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004660:	2301      	movs	r3, #1
 8004662:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004664:	4b0f      	ldr	r3, [pc, #60]	@ (80046a4 <xTaskResumeAll+0x138>)
 8004666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004674:	f000 fb9a 	bl	8004dac <vPortExitCritical>

	return xAlreadyYielded;
 8004678:	68bb      	ldr	r3, [r7, #8]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	200009dc 	.word	0x200009dc
 8004688:	200009b4 	.word	0x200009b4
 800468c:	20000974 	.word	0x20000974
 8004690:	200009bc 	.word	0x200009bc
 8004694:	200008b8 	.word	0x200008b8
 8004698:	200008b4 	.word	0x200008b4
 800469c:	200009c8 	.word	0x200009c8
 80046a0:	200009c4 	.word	0x200009c4
 80046a4:	e000ed04 	.word	0xe000ed04

080046a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b2:	4b4f      	ldr	r3, [pc, #316]	@ (80047f0 <xTaskIncrementTick+0x148>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f040 808f 	bne.w	80047da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046bc:	4b4d      	ldr	r3, [pc, #308]	@ (80047f4 <xTaskIncrementTick+0x14c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3301      	adds	r3, #1
 80046c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046c4:	4a4b      	ldr	r2, [pc, #300]	@ (80047f4 <xTaskIncrementTick+0x14c>)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d121      	bne.n	8004714 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80046d0:	4b49      	ldr	r3, [pc, #292]	@ (80047f8 <xTaskIncrementTick+0x150>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00b      	beq.n	80046f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	603b      	str	r3, [r7, #0]
}
 80046ec:	bf00      	nop
 80046ee:	bf00      	nop
 80046f0:	e7fd      	b.n	80046ee <xTaskIncrementTick+0x46>
 80046f2:	4b41      	ldr	r3, [pc, #260]	@ (80047f8 <xTaskIncrementTick+0x150>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	4b40      	ldr	r3, [pc, #256]	@ (80047fc <xTaskIncrementTick+0x154>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a3e      	ldr	r2, [pc, #248]	@ (80047f8 <xTaskIncrementTick+0x150>)
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	4a3e      	ldr	r2, [pc, #248]	@ (80047fc <xTaskIncrementTick+0x154>)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	4b3e      	ldr	r3, [pc, #248]	@ (8004800 <xTaskIncrementTick+0x158>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3301      	adds	r3, #1
 800470c:	4a3c      	ldr	r2, [pc, #240]	@ (8004800 <xTaskIncrementTick+0x158>)
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	f000 f9a2 	bl	8004a58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004714:	4b3b      	ldr	r3, [pc, #236]	@ (8004804 <xTaskIncrementTick+0x15c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	429a      	cmp	r2, r3
 800471c:	d348      	bcc.n	80047b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800471e:	4b36      	ldr	r3, [pc, #216]	@ (80047f8 <xTaskIncrementTick+0x150>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d104      	bne.n	8004732 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004728:	4b36      	ldr	r3, [pc, #216]	@ (8004804 <xTaskIncrementTick+0x15c>)
 800472a:	f04f 32ff 	mov.w	r2, #4294967295
 800472e:	601a      	str	r2, [r3, #0]
					break;
 8004730:	e03e      	b.n	80047b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004732:	4b31      	ldr	r3, [pc, #196]	@ (80047f8 <xTaskIncrementTick+0x150>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	429a      	cmp	r2, r3
 8004748:	d203      	bcs.n	8004752 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800474a:	4a2e      	ldr	r2, [pc, #184]	@ (8004804 <xTaskIncrementTick+0x15c>)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004750:	e02e      	b.n	80047b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	3304      	adds	r3, #4
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fc82 	bl	8004060 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	3318      	adds	r3, #24
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fc79 	bl	8004060 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	2201      	movs	r2, #1
 8004774:	409a      	lsls	r2, r3
 8004776:	4b24      	ldr	r3, [pc, #144]	@ (8004808 <xTaskIncrementTick+0x160>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4313      	orrs	r3, r2
 800477c:	4a22      	ldr	r2, [pc, #136]	@ (8004808 <xTaskIncrementTick+0x160>)
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4a1f      	ldr	r2, [pc, #124]	@ (800480c <xTaskIncrementTick+0x164>)
 800478e:	441a      	add	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	3304      	adds	r3, #4
 8004794:	4619      	mov	r1, r3
 8004796:	4610      	mov	r0, r2
 8004798:	f7ff fc07 	bl	8003faa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004810 <xTaskIncrementTick+0x168>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d3b9      	bcc.n	800471e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80047aa:	2301      	movs	r3, #1
 80047ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ae:	e7b6      	b.n	800471e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047b0:	4b17      	ldr	r3, [pc, #92]	@ (8004810 <xTaskIncrementTick+0x168>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b6:	4915      	ldr	r1, [pc, #84]	@ (800480c <xTaskIncrementTick+0x164>)
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d901      	bls.n	80047cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80047c8:	2301      	movs	r3, #1
 80047ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047cc:	4b11      	ldr	r3, [pc, #68]	@ (8004814 <xTaskIncrementTick+0x16c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80047d4:	2301      	movs	r3, #1
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	e004      	b.n	80047e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047da:	4b0f      	ldr	r3, [pc, #60]	@ (8004818 <xTaskIncrementTick+0x170>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3301      	adds	r3, #1
 80047e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004818 <xTaskIncrementTick+0x170>)
 80047e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047e4:	697b      	ldr	r3, [r7, #20]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	200009dc 	.word	0x200009dc
 80047f4:	200009b8 	.word	0x200009b8
 80047f8:	2000096c 	.word	0x2000096c
 80047fc:	20000970 	.word	0x20000970
 8004800:	200009cc 	.word	0x200009cc
 8004804:	200009d4 	.word	0x200009d4
 8004808:	200009bc 	.word	0x200009bc
 800480c:	200008b8 	.word	0x200008b8
 8004810:	200008b4 	.word	0x200008b4
 8004814:	200009c8 	.word	0x200009c8
 8004818:	200009c4 	.word	0x200009c4

0800481c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004822:	4b29      	ldr	r3, [pc, #164]	@ (80048c8 <vTaskSwitchContext+0xac>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800482a:	4b28      	ldr	r3, [pc, #160]	@ (80048cc <vTaskSwitchContext+0xb0>)
 800482c:	2201      	movs	r2, #1
 800482e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004830:	e045      	b.n	80048be <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004832:	4b26      	ldr	r3, [pc, #152]	@ (80048cc <vTaskSwitchContext+0xb0>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004838:	4b25      	ldr	r3, [pc, #148]	@ (80048d0 <vTaskSwitchContext+0xb4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	fab3 f383 	clz	r3, r3
 8004844:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004846:	7afb      	ldrb	r3, [r7, #11]
 8004848:	f1c3 031f 	rsb	r3, r3, #31
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	4921      	ldr	r1, [pc, #132]	@ (80048d4 <vTaskSwitchContext+0xb8>)
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	607b      	str	r3, [r7, #4]
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	e7fd      	b.n	8004876 <vTaskSwitchContext+0x5a>
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4a13      	ldr	r2, [pc, #76]	@ (80048d4 <vTaskSwitchContext+0xb8>)
 8004886:	4413      	add	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	605a      	str	r2, [r3, #4]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	3308      	adds	r3, #8
 800489c:	429a      	cmp	r2, r3
 800489e:	d104      	bne.n	80048aa <vTaskSwitchContext+0x8e>
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	605a      	str	r2, [r3, #4]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4a09      	ldr	r2, [pc, #36]	@ (80048d8 <vTaskSwitchContext+0xbc>)
 80048b2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048b4:	4b08      	ldr	r3, [pc, #32]	@ (80048d8 <vTaskSwitchContext+0xbc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	334c      	adds	r3, #76	@ 0x4c
 80048ba:	4a08      	ldr	r2, [pc, #32]	@ (80048dc <vTaskSwitchContext+0xc0>)
 80048bc:	6013      	str	r3, [r2, #0]
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr
 80048c8:	200009dc 	.word	0x200009dc
 80048cc:	200009c8 	.word	0x200009c8
 80048d0:	200009bc 	.word	0x200009bc
 80048d4:	200008b8 	.word	0x200008b8
 80048d8:	200008b4 	.word	0x200008b4
 80048dc:	20000040 	.word	0x20000040

080048e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048e8:	f000 f852 	bl	8004990 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048ec:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <prvIdleTask+0x28>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d9f9      	bls.n	80048e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048f4:	4b05      	ldr	r3, [pc, #20]	@ (800490c <prvIdleTask+0x2c>)
 80048f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004904:	e7f0      	b.n	80048e8 <prvIdleTask+0x8>
 8004906:	bf00      	nop
 8004908:	200008b8 	.word	0x200008b8
 800490c:	e000ed04 	.word	0xe000ed04

08004910 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
 800491a:	e00c      	b.n	8004936 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4a12      	ldr	r2, [pc, #72]	@ (8004970 <prvInitialiseTaskLists+0x60>)
 8004928:	4413      	add	r3, r2
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff fb12 	bl	8003f54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3301      	adds	r3, #1
 8004934:	607b      	str	r3, [r7, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b06      	cmp	r3, #6
 800493a:	d9ef      	bls.n	800491c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800493c:	480d      	ldr	r0, [pc, #52]	@ (8004974 <prvInitialiseTaskLists+0x64>)
 800493e:	f7ff fb09 	bl	8003f54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004942:	480d      	ldr	r0, [pc, #52]	@ (8004978 <prvInitialiseTaskLists+0x68>)
 8004944:	f7ff fb06 	bl	8003f54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004948:	480c      	ldr	r0, [pc, #48]	@ (800497c <prvInitialiseTaskLists+0x6c>)
 800494a:	f7ff fb03 	bl	8003f54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800494e:	480c      	ldr	r0, [pc, #48]	@ (8004980 <prvInitialiseTaskLists+0x70>)
 8004950:	f7ff fb00 	bl	8003f54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004954:	480b      	ldr	r0, [pc, #44]	@ (8004984 <prvInitialiseTaskLists+0x74>)
 8004956:	f7ff fafd 	bl	8003f54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800495a:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <prvInitialiseTaskLists+0x78>)
 800495c:	4a05      	ldr	r2, [pc, #20]	@ (8004974 <prvInitialiseTaskLists+0x64>)
 800495e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004960:	4b0a      	ldr	r3, [pc, #40]	@ (800498c <prvInitialiseTaskLists+0x7c>)
 8004962:	4a05      	ldr	r2, [pc, #20]	@ (8004978 <prvInitialiseTaskLists+0x68>)
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	200008b8 	.word	0x200008b8
 8004974:	20000944 	.word	0x20000944
 8004978:	20000958 	.word	0x20000958
 800497c:	20000974 	.word	0x20000974
 8004980:	20000988 	.word	0x20000988
 8004984:	200009a0 	.word	0x200009a0
 8004988:	2000096c 	.word	0x2000096c
 800498c:	20000970 	.word	0x20000970

08004990 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004996:	e019      	b.n	80049cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004998:	f000 f9d8 	bl	8004d4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800499c:	4b10      	ldr	r3, [pc, #64]	@ (80049e0 <prvCheckTasksWaitingTermination+0x50>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff fb59 	bl	8004060 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049ae:	4b0d      	ldr	r3, [pc, #52]	@ (80049e4 <prvCheckTasksWaitingTermination+0x54>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	4a0b      	ldr	r2, [pc, #44]	@ (80049e4 <prvCheckTasksWaitingTermination+0x54>)
 80049b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049b8:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <prvCheckTasksWaitingTermination+0x58>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3b01      	subs	r3, #1
 80049be:	4a0a      	ldr	r2, [pc, #40]	@ (80049e8 <prvCheckTasksWaitingTermination+0x58>)
 80049c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049c2:	f000 f9f3 	bl	8004dac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f810 	bl	80049ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049cc:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <prvCheckTasksWaitingTermination+0x58>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e1      	bne.n	8004998 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20000988 	.word	0x20000988
 80049e4:	200009b4 	.word	0x200009b4
 80049e8:	2000099c 	.word	0x2000099c

080049ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	334c      	adds	r3, #76	@ 0x4c
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fc5d 	bl	80052b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d108      	bne.n	8004a1a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fb2d 	bl	800506c <vPortFree>
				vPortFree( pxTCB );
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fb2a 	bl	800506c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a18:	e019      	b.n	8004a4e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d103      	bne.n	8004a2c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fb21 	bl	800506c <vPortFree>
	}
 8004a2a:	e010      	b.n	8004a4e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d00b      	beq.n	8004a4e <prvDeleteTCB+0x62>
	__asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	60fb      	str	r3, [r7, #12]
}
 8004a48:	bf00      	nop
 8004a4a:	bf00      	nop
 8004a4c:	e7fd      	b.n	8004a4a <prvDeleteTCB+0x5e>
	}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <prvResetNextTaskUnblockTime+0x38>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a68:	4b0a      	ldr	r3, [pc, #40]	@ (8004a94 <prvResetNextTaskUnblockTime+0x3c>)
 8004a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a70:	e008      	b.n	8004a84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a72:	4b07      	ldr	r3, [pc, #28]	@ (8004a90 <prvResetNextTaskUnblockTime+0x38>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	4a04      	ldr	r2, [pc, #16]	@ (8004a94 <prvResetNextTaskUnblockTime+0x3c>)
 8004a82:	6013      	str	r3, [r2, #0]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	2000096c 	.word	0x2000096c
 8004a94:	200009d4 	.word	0x200009d4

08004a98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004aa2:	4b29      	ldr	r3, [pc, #164]	@ (8004b48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aa8:	4b28      	ldr	r3, [pc, #160]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff fad6 	bl	8004060 <uxListRemove>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10b      	bne.n	8004ad2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004aba:	4b24      	ldr	r3, [pc, #144]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43da      	mvns	r2, r3
 8004ac8:	4b21      	ldr	r3, [pc, #132]	@ (8004b50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4013      	ands	r3, r2
 8004ace:	4a20      	ldr	r2, [pc, #128]	@ (8004b50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ad0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad8:	d10a      	bne.n	8004af0 <prvAddCurrentTaskToDelayedList+0x58>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d007      	beq.n	8004af0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	481a      	ldr	r0, [pc, #104]	@ (8004b54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004aea:	f7ff fa5e 	bl	8003faa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004aee:	e026      	b.n	8004b3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4413      	add	r3, r2
 8004af6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004af8:	4b14      	ldr	r3, [pc, #80]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d209      	bcs.n	8004b1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b08:	4b13      	ldr	r3, [pc, #76]	@ (8004b58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3304      	adds	r3, #4
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f7ff fa6b 	bl	8003ff0 <vListInsert>
}
 8004b1a:	e010      	b.n	8004b3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4b0a      	ldr	r3, [pc, #40]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3304      	adds	r3, #4
 8004b26:	4619      	mov	r1, r3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	f7ff fa61 	bl	8003ff0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d202      	bcs.n	8004b3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b38:	4a09      	ldr	r2, [pc, #36]	@ (8004b60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	6013      	str	r3, [r2, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	200009b8 	.word	0x200009b8
 8004b4c:	200008b4 	.word	0x200008b4
 8004b50:	200009bc 	.word	0x200009bc
 8004b54:	200009a0 	.word	0x200009a0
 8004b58:	20000970 	.word	0x20000970
 8004b5c:	2000096c 	.word	0x2000096c
 8004b60:	200009d4 	.word	0x200009d4

08004b64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3b04      	subs	r3, #4
 8004b74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3b04      	subs	r3, #4
 8004b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f023 0201 	bic.w	r2, r3, #1
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3b04      	subs	r3, #4
 8004b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b94:	4a08      	ldr	r2, [pc, #32]	@ (8004bb8 <pxPortInitialiseStack+0x54>)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3b14      	subs	r3, #20
 8004b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3b20      	subs	r3, #32
 8004baa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bac:	68fb      	ldr	r3, [r7, #12]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr
 8004bb8:	08004bbd 	.word	0x08004bbd

08004bbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bc6:	4b12      	ldr	r3, [pc, #72]	@ (8004c10 <prvTaskExitError+0x54>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	d00b      	beq.n	8004be8 <prvTaskExitError+0x2c>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	60fb      	str	r3, [r7, #12]
}
 8004be2:	bf00      	nop
 8004be4:	bf00      	nop
 8004be6:	e7fd      	b.n	8004be4 <prvTaskExitError+0x28>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	60bb      	str	r3, [r7, #8]
}
 8004bfa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bfc:	bf00      	nop
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0fc      	beq.n	8004bfe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr
 8004c10:	2000003c 	.word	0x2000003c
	...

08004c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c20:	4b07      	ldr	r3, [pc, #28]	@ (8004c40 <pxCurrentTCBConst2>)
 8004c22:	6819      	ldr	r1, [r3, #0]
 8004c24:	6808      	ldr	r0, [r1, #0]
 8004c26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c2a:	f380 8809 	msr	PSP, r0
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8811 	msr	BASEPRI, r0
 8004c3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004c3e:	4770      	bx	lr

08004c40 <pxCurrentTCBConst2>:
 8004c40:	200008b4 	.word	0x200008b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop

08004c48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004c48:	4806      	ldr	r0, [pc, #24]	@ (8004c64 <prvPortStartFirstTask+0x1c>)
 8004c4a:	6800      	ldr	r0, [r0, #0]
 8004c4c:	6800      	ldr	r0, [r0, #0]
 8004c4e:	f380 8808 	msr	MSP, r0
 8004c52:	b662      	cpsie	i
 8004c54:	b661      	cpsie	f
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	df00      	svc	0
 8004c60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c62:	bf00      	nop
 8004c64:	e000ed08 	.word	0xe000ed08

08004c68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c6e:	4b32      	ldr	r3, [pc, #200]	@ (8004d38 <xPortStartScheduler+0xd0>)
 8004c70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	22ff      	movs	r2, #255	@ 0xff
 8004c7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	4b2a      	ldr	r3, [pc, #168]	@ (8004d3c <xPortStartScheduler+0xd4>)
 8004c94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c96:	4b2a      	ldr	r3, [pc, #168]	@ (8004d40 <xPortStartScheduler+0xd8>)
 8004c98:	2207      	movs	r2, #7
 8004c9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c9c:	e009      	b.n	8004cb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004c9e:	4b28      	ldr	r3, [pc, #160]	@ (8004d40 <xPortStartScheduler+0xd8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	4a26      	ldr	r2, [pc, #152]	@ (8004d40 <xPortStartScheduler+0xd8>)
 8004ca6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cb2:	78fb      	ldrb	r3, [r7, #3]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cba:	2b80      	cmp	r3, #128	@ 0x80
 8004cbc:	d0ef      	beq.n	8004c9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cbe:	4b20      	ldr	r3, [pc, #128]	@ (8004d40 <xPortStartScheduler+0xd8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f1c3 0307 	rsb	r3, r3, #7
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d00b      	beq.n	8004ce2 <xPortStartScheduler+0x7a>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	60bb      	str	r3, [r7, #8]
}
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	e7fd      	b.n	8004cde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ce2:	4b17      	ldr	r3, [pc, #92]	@ (8004d40 <xPortStartScheduler+0xd8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	4a15      	ldr	r2, [pc, #84]	@ (8004d40 <xPortStartScheduler+0xd8>)
 8004cea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cec:	4b14      	ldr	r3, [pc, #80]	@ (8004d40 <xPortStartScheduler+0xd8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cf4:	4a12      	ldr	r2, [pc, #72]	@ (8004d40 <xPortStartScheduler+0xd8>)
 8004cf6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d00:	4b10      	ldr	r3, [pc, #64]	@ (8004d44 <xPortStartScheduler+0xdc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a0f      	ldr	r2, [pc, #60]	@ (8004d44 <xPortStartScheduler+0xdc>)
 8004d06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d44 <xPortStartScheduler+0xdc>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a0c      	ldr	r2, [pc, #48]	@ (8004d44 <xPortStartScheduler+0xdc>)
 8004d12:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d18:	f000 f8b8 	bl	8004e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d48 <xPortStartScheduler+0xe0>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d22:	f7ff ff91 	bl	8004c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d26:	f7ff fd79 	bl	800481c <vTaskSwitchContext>
	prvTaskExitError();
 8004d2a:	f7ff ff47 	bl	8004bbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	e000e400 	.word	0xe000e400
 8004d3c:	200009e0 	.word	0x200009e0
 8004d40:	200009e4 	.word	0x200009e4
 8004d44:	e000ed20 	.word	0xe000ed20
 8004d48:	2000003c 	.word	0x2000003c

08004d4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	607b      	str	r3, [r7, #4]
}
 8004d64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d66:	4b0f      	ldr	r3, [pc, #60]	@ (8004da4 <vPortEnterCritical+0x58>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8004da4 <vPortEnterCritical+0x58>)
 8004d6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d70:	4b0c      	ldr	r3, [pc, #48]	@ (8004da4 <vPortEnterCritical+0x58>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d110      	bne.n	8004d9a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d78:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <vPortEnterCritical+0x5c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <vPortEnterCritical+0x4e>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	603b      	str	r3, [r7, #0]
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	e7fd      	b.n	8004d96 <vPortEnterCritical+0x4a>
	}
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr
 8004da4:	2000003c 	.word	0x2000003c
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004db2:	4b12      	ldr	r3, [pc, #72]	@ (8004dfc <vPortExitCritical+0x50>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10b      	bne.n	8004dd2 <vPortExitCritical+0x26>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	607b      	str	r3, [r7, #4]
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	e7fd      	b.n	8004dce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dfc <vPortExitCritical+0x50>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	4a08      	ldr	r2, [pc, #32]	@ (8004dfc <vPortExitCritical+0x50>)
 8004dda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ddc:	4b07      	ldr	r3, [pc, #28]	@ (8004dfc <vPortExitCritical+0x50>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d105      	bne.n	8004df0 <vPortExitCritical+0x44>
 8004de4:	2300      	movs	r3, #0
 8004de6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	2000003c 	.word	0x2000003c

08004e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e00:	f3ef 8009 	mrs	r0, PSP
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	4b0d      	ldr	r3, [pc, #52]	@ (8004e40 <pxCurrentTCBConst>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e10:	6010      	str	r0, [r2, #0]
 8004e12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004e16:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e1a:	f380 8811 	msr	BASEPRI, r0
 8004e1e:	f7ff fcfd 	bl	800481c <vTaskSwitchContext>
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f380 8811 	msr	BASEPRI, r0
 8004e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e2e:	6819      	ldr	r1, [r3, #0]
 8004e30:	6808      	ldr	r0, [r1, #0]
 8004e32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e36:	f380 8809 	msr	PSP, r0
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	4770      	bx	lr

08004e40 <pxCurrentTCBConst>:
 8004e40:	200008b4 	.word	0x200008b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop

08004e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	607b      	str	r3, [r7, #4]
}
 8004e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e62:	f7ff fc21 	bl	80046a8 <xTaskIncrementTick>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e6c:	4b06      	ldr	r3, [pc, #24]	@ (8004e88 <SysTick_Handler+0x40>)
 8004e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	2300      	movs	r3, #0
 8004e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	f383 8811 	msr	BASEPRI, r3
}
 8004e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e90:	4b0a      	ldr	r3, [pc, #40]	@ (8004ebc <vPortSetupTimerInterrupt+0x30>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e96:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec0 <vPortSetupTimerInterrupt+0x34>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <vPortSetupTimerInterrupt+0x38>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a09      	ldr	r2, [pc, #36]	@ (8004ec8 <vPortSetupTimerInterrupt+0x3c>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	099b      	lsrs	r3, r3, #6
 8004ea8:	4a08      	ldr	r2, [pc, #32]	@ (8004ecc <vPortSetupTimerInterrupt+0x40>)
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004eae:	4b03      	ldr	r3, [pc, #12]	@ (8004ebc <vPortSetupTimerInterrupt+0x30>)
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	601a      	str	r2, [r3, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	e000e010 	.word	0xe000e010
 8004ec0:	e000e018 	.word	0xe000e018
 8004ec4:	20000030 	.word	0x20000030
 8004ec8:	10624dd3 	.word	0x10624dd3
 8004ecc:	e000e014 	.word	0xe000e014

08004ed0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08a      	sub	sp, #40	@ 0x28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004edc:	f7ff fb38 	bl	8004550 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ee0:	4b5c      	ldr	r3, [pc, #368]	@ (8005054 <pvPortMalloc+0x184>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ee8:	f000 f924 	bl	8005134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004eec:	4b5a      	ldr	r3, [pc, #360]	@ (8005058 <pvPortMalloc+0x188>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f040 8095 	bne.w	8005024 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01e      	beq.n	8004f3e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f00:	2208      	movs	r2, #8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4413      	add	r3, r2
 8004f06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d015      	beq.n	8004f3e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f023 0307 	bic.w	r3, r3, #7
 8004f18:	3308      	adds	r3, #8
 8004f1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <pvPortMalloc+0x6e>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	617b      	str	r3, [r7, #20]
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	e7fd      	b.n	8004f3a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d06f      	beq.n	8005024 <pvPortMalloc+0x154>
 8004f44:	4b45      	ldr	r3, [pc, #276]	@ (800505c <pvPortMalloc+0x18c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d86a      	bhi.n	8005024 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f4e:	4b44      	ldr	r3, [pc, #272]	@ (8005060 <pvPortMalloc+0x190>)
 8004f50:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f52:	4b43      	ldr	r3, [pc, #268]	@ (8005060 <pvPortMalloc+0x190>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f58:	e004      	b.n	8004f64 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d903      	bls.n	8004f76 <pvPortMalloc+0xa6>
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f1      	bne.n	8004f5a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f76:	4b37      	ldr	r3, [pc, #220]	@ (8005054 <pvPortMalloc+0x184>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d051      	beq.n	8005024 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2208      	movs	r2, #8
 8004f86:	4413      	add	r3, r2
 8004f88:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	1ad2      	subs	r2, r2, r3
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d920      	bls.n	8004fe4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00b      	beq.n	8004fcc <pvPortMalloc+0xfc>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	613b      	str	r3, [r7, #16]
}
 8004fc6:	bf00      	nop
 8004fc8:	bf00      	nop
 8004fca:	e7fd      	b.n	8004fc8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	1ad2      	subs	r2, r2, r3
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fde:	69b8      	ldr	r0, [r7, #24]
 8004fe0:	f000 f90a 	bl	80051f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800505c <pvPortMalloc+0x18c>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	4a1b      	ldr	r2, [pc, #108]	@ (800505c <pvPortMalloc+0x18c>)
 8004ff0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800505c <pvPortMalloc+0x18c>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8005064 <pvPortMalloc+0x194>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d203      	bcs.n	8005006 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ffe:	4b17      	ldr	r3, [pc, #92]	@ (800505c <pvPortMalloc+0x18c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a18      	ldr	r2, [pc, #96]	@ (8005064 <pvPortMalloc+0x194>)
 8005004:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	4b13      	ldr	r3, [pc, #76]	@ (8005058 <pvPortMalloc+0x188>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	431a      	orrs	r2, r3
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800501a:	4b13      	ldr	r3, [pc, #76]	@ (8005068 <pvPortMalloc+0x198>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3301      	adds	r3, #1
 8005020:	4a11      	ldr	r2, [pc, #68]	@ (8005068 <pvPortMalloc+0x198>)
 8005022:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005024:	f7ff faa2 	bl	800456c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <pvPortMalloc+0x17a>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	60fb      	str	r3, [r7, #12]
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	e7fd      	b.n	8005046 <pvPortMalloc+0x176>
	return pvReturn;
 800504a:	69fb      	ldr	r3, [r7, #28]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3728      	adds	r7, #40	@ 0x28
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	200015f0 	.word	0x200015f0
 8005058:	20001604 	.word	0x20001604
 800505c:	200015f4 	.word	0x200015f4
 8005060:	200015e8 	.word	0x200015e8
 8005064:	200015f8 	.word	0x200015f8
 8005068:	200015fc 	.word	0x200015fc

0800506c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d04f      	beq.n	800511e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800507e:	2308      	movs	r3, #8
 8005080:	425b      	negs	r3, r3
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4413      	add	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	4b25      	ldr	r3, [pc, #148]	@ (8005128 <vPortFree+0xbc>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4013      	ands	r3, r2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <vPortFree+0x46>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	60fb      	str	r3, [r7, #12]
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	e7fd      	b.n	80050ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <vPortFree+0x66>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	60bb      	str	r3, [r7, #8]
}
 80050cc:	bf00      	nop
 80050ce:	bf00      	nop
 80050d0:	e7fd      	b.n	80050ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	4b14      	ldr	r3, [pc, #80]	@ (8005128 <vPortFree+0xbc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01e      	beq.n	800511e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d11a      	bne.n	800511e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005128 <vPortFree+0xbc>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	43db      	mvns	r3, r3
 80050f2:	401a      	ands	r2, r3
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050f8:	f7ff fa2a 	bl	8004550 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	4b0a      	ldr	r3, [pc, #40]	@ (800512c <vPortFree+0xc0>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4413      	add	r3, r2
 8005106:	4a09      	ldr	r2, [pc, #36]	@ (800512c <vPortFree+0xc0>)
 8005108:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800510a:	6938      	ldr	r0, [r7, #16]
 800510c:	f000 f874 	bl	80051f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005110:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <vPortFree+0xc4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3301      	adds	r3, #1
 8005116:	4a06      	ldr	r2, [pc, #24]	@ (8005130 <vPortFree+0xc4>)
 8005118:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800511a:	f7ff fa27 	bl	800456c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800511e:	bf00      	nop
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20001604 	.word	0x20001604
 800512c:	200015f4 	.word	0x200015f4
 8005130:	20001600 	.word	0x20001600

08005134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800513a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800513e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005140:	4b27      	ldr	r3, [pc, #156]	@ (80051e0 <prvHeapInit+0xac>)
 8005142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00c      	beq.n	8005168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3307      	adds	r3, #7
 8005152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0307 	bic.w	r3, r3, #7
 800515a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	4a1f      	ldr	r2, [pc, #124]	@ (80051e0 <prvHeapInit+0xac>)
 8005164:	4413      	add	r3, r2
 8005166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800516c:	4a1d      	ldr	r2, [pc, #116]	@ (80051e4 <prvHeapInit+0xb0>)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005172:	4b1c      	ldr	r3, [pc, #112]	@ (80051e4 <prvHeapInit+0xb0>)
 8005174:	2200      	movs	r2, #0
 8005176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	4413      	add	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005180:	2208      	movs	r2, #8
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1a9b      	subs	r3, r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0307 	bic.w	r3, r3, #7
 800518e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4a15      	ldr	r2, [pc, #84]	@ (80051e8 <prvHeapInit+0xb4>)
 8005194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005196:	4b14      	ldr	r3, [pc, #80]	@ (80051e8 <prvHeapInit+0xb4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2200      	movs	r2, #0
 800519c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800519e:	4b12      	ldr	r3, [pc, #72]	@ (80051e8 <prvHeapInit+0xb4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	1ad2      	subs	r2, r2, r3
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051b4:	4b0c      	ldr	r3, [pc, #48]	@ (80051e8 <prvHeapInit+0xb4>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4a0a      	ldr	r2, [pc, #40]	@ (80051ec <prvHeapInit+0xb8>)
 80051c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4a09      	ldr	r2, [pc, #36]	@ (80051f0 <prvHeapInit+0xbc>)
 80051ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051cc:	4b09      	ldr	r3, [pc, #36]	@ (80051f4 <prvHeapInit+0xc0>)
 80051ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80051d2:	601a      	str	r2, [r3, #0]
}
 80051d4:	bf00      	nop
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	200009e8 	.word	0x200009e8
 80051e4:	200015e8 	.word	0x200015e8
 80051e8:	200015f0 	.word	0x200015f0
 80051ec:	200015f8 	.word	0x200015f8
 80051f0:	200015f4 	.word	0x200015f4
 80051f4:	20001604 	.word	0x20001604

080051f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005200:	4b27      	ldr	r3, [pc, #156]	@ (80052a0 <prvInsertBlockIntoFreeList+0xa8>)
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e002      	b.n	800520c <prvInsertBlockIntoFreeList+0x14>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d8f7      	bhi.n	8005206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	4413      	add	r3, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	429a      	cmp	r2, r3
 8005226:	d108      	bne.n	800523a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	441a      	add	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	441a      	add	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d118      	bne.n	8005280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b14      	ldr	r3, [pc, #80]	@ (80052a4 <prvInsertBlockIntoFreeList+0xac>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d00d      	beq.n	8005276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	441a      	add	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	e008      	b.n	8005288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005276:	4b0b      	ldr	r3, [pc, #44]	@ (80052a4 <prvInsertBlockIntoFreeList+0xac>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e003      	b.n	8005288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	429a      	cmp	r2, r3
 800528e:	d002      	beq.n	8005296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005296:	bf00      	nop
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr
 80052a0:	200015e8 	.word	0x200015e8
 80052a4:	200015f0 	.word	0x200015f0

080052a8 <memset>:
 80052a8:	4603      	mov	r3, r0
 80052aa:	4402      	add	r2, r0
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d100      	bne.n	80052b2 <memset+0xa>
 80052b0:	4770      	bx	lr
 80052b2:	f803 1b01 	strb.w	r1, [r3], #1
 80052b6:	e7f9      	b.n	80052ac <memset+0x4>

080052b8 <_reclaim_reent>:
 80052b8:	4b29      	ldr	r3, [pc, #164]	@ (8005360 <_reclaim_reent+0xa8>)
 80052ba:	b570      	push	{r4, r5, r6, lr}
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4604      	mov	r4, r0
 80052c0:	4283      	cmp	r3, r0
 80052c2:	d04b      	beq.n	800535c <_reclaim_reent+0xa4>
 80052c4:	69c3      	ldr	r3, [r0, #28]
 80052c6:	b1ab      	cbz	r3, 80052f4 <_reclaim_reent+0x3c>
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	b16b      	cbz	r3, 80052e8 <_reclaim_reent+0x30>
 80052cc:	2500      	movs	r5, #0
 80052ce:	69e3      	ldr	r3, [r4, #28]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	5959      	ldr	r1, [r3, r5]
 80052d4:	2900      	cmp	r1, #0
 80052d6:	d13b      	bne.n	8005350 <_reclaim_reent+0x98>
 80052d8:	3504      	adds	r5, #4
 80052da:	2d80      	cmp	r5, #128	@ 0x80
 80052dc:	d1f7      	bne.n	80052ce <_reclaim_reent+0x16>
 80052de:	69e3      	ldr	r3, [r4, #28]
 80052e0:	4620      	mov	r0, r4
 80052e2:	68d9      	ldr	r1, [r3, #12]
 80052e4:	f000 f864 	bl	80053b0 <_free_r>
 80052e8:	69e3      	ldr	r3, [r4, #28]
 80052ea:	6819      	ldr	r1, [r3, #0]
 80052ec:	b111      	cbz	r1, 80052f4 <_reclaim_reent+0x3c>
 80052ee:	4620      	mov	r0, r4
 80052f0:	f000 f85e 	bl	80053b0 <_free_r>
 80052f4:	6961      	ldr	r1, [r4, #20]
 80052f6:	b111      	cbz	r1, 80052fe <_reclaim_reent+0x46>
 80052f8:	4620      	mov	r0, r4
 80052fa:	f000 f859 	bl	80053b0 <_free_r>
 80052fe:	69e1      	ldr	r1, [r4, #28]
 8005300:	b111      	cbz	r1, 8005308 <_reclaim_reent+0x50>
 8005302:	4620      	mov	r0, r4
 8005304:	f000 f854 	bl	80053b0 <_free_r>
 8005308:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800530a:	b111      	cbz	r1, 8005312 <_reclaim_reent+0x5a>
 800530c:	4620      	mov	r0, r4
 800530e:	f000 f84f 	bl	80053b0 <_free_r>
 8005312:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005314:	b111      	cbz	r1, 800531c <_reclaim_reent+0x64>
 8005316:	4620      	mov	r0, r4
 8005318:	f000 f84a 	bl	80053b0 <_free_r>
 800531c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800531e:	b111      	cbz	r1, 8005326 <_reclaim_reent+0x6e>
 8005320:	4620      	mov	r0, r4
 8005322:	f000 f845 	bl	80053b0 <_free_r>
 8005326:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005328:	b111      	cbz	r1, 8005330 <_reclaim_reent+0x78>
 800532a:	4620      	mov	r0, r4
 800532c:	f000 f840 	bl	80053b0 <_free_r>
 8005330:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005332:	b111      	cbz	r1, 800533a <_reclaim_reent+0x82>
 8005334:	4620      	mov	r0, r4
 8005336:	f000 f83b 	bl	80053b0 <_free_r>
 800533a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800533c:	b111      	cbz	r1, 8005344 <_reclaim_reent+0x8c>
 800533e:	4620      	mov	r0, r4
 8005340:	f000 f836 	bl	80053b0 <_free_r>
 8005344:	6a23      	ldr	r3, [r4, #32]
 8005346:	b14b      	cbz	r3, 800535c <_reclaim_reent+0xa4>
 8005348:	4620      	mov	r0, r4
 800534a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800534e:	4718      	bx	r3
 8005350:	680e      	ldr	r6, [r1, #0]
 8005352:	4620      	mov	r0, r4
 8005354:	f000 f82c 	bl	80053b0 <_free_r>
 8005358:	4631      	mov	r1, r6
 800535a:	e7bb      	b.n	80052d4 <_reclaim_reent+0x1c>
 800535c:	bd70      	pop	{r4, r5, r6, pc}
 800535e:	bf00      	nop
 8005360:	20000040 	.word	0x20000040

08005364 <__libc_init_array>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	2600      	movs	r6, #0
 8005368:	4d0c      	ldr	r5, [pc, #48]	@ (800539c <__libc_init_array+0x38>)
 800536a:	4c0d      	ldr	r4, [pc, #52]	@ (80053a0 <__libc_init_array+0x3c>)
 800536c:	1b64      	subs	r4, r4, r5
 800536e:	10a4      	asrs	r4, r4, #2
 8005370:	42a6      	cmp	r6, r4
 8005372:	d109      	bne.n	8005388 <__libc_init_array+0x24>
 8005374:	f000 f870 	bl	8005458 <_init>
 8005378:	2600      	movs	r6, #0
 800537a:	4d0a      	ldr	r5, [pc, #40]	@ (80053a4 <__libc_init_array+0x40>)
 800537c:	4c0a      	ldr	r4, [pc, #40]	@ (80053a8 <__libc_init_array+0x44>)
 800537e:	1b64      	subs	r4, r4, r5
 8005380:	10a4      	asrs	r4, r4, #2
 8005382:	42a6      	cmp	r6, r4
 8005384:	d105      	bne.n	8005392 <__libc_init_array+0x2e>
 8005386:	bd70      	pop	{r4, r5, r6, pc}
 8005388:	f855 3b04 	ldr.w	r3, [r5], #4
 800538c:	4798      	blx	r3
 800538e:	3601      	adds	r6, #1
 8005390:	e7ee      	b.n	8005370 <__libc_init_array+0xc>
 8005392:	f855 3b04 	ldr.w	r3, [r5], #4
 8005396:	4798      	blx	r3
 8005398:	3601      	adds	r6, #1
 800539a:	e7f2      	b.n	8005382 <__libc_init_array+0x1e>
 800539c:	08008a7c 	.word	0x08008a7c
 80053a0:	08008a7c 	.word	0x08008a7c
 80053a4:	08008a7c 	.word	0x08008a7c
 80053a8:	08008a80 	.word	0x08008a80

080053ac <__retarget_lock_acquire_recursive>:
 80053ac:	4770      	bx	lr

080053ae <__retarget_lock_release_recursive>:
 80053ae:	4770      	bx	lr

080053b0 <_free_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	4605      	mov	r5, r0
 80053b4:	2900      	cmp	r1, #0
 80053b6:	d040      	beq.n	800543a <_free_r+0x8a>
 80053b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053bc:	1f0c      	subs	r4, r1, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bfb8      	it	lt
 80053c2:	18e4      	addlt	r4, r4, r3
 80053c4:	f000 f83c 	bl	8005440 <__malloc_lock>
 80053c8:	4a1c      	ldr	r2, [pc, #112]	@ (800543c <_free_r+0x8c>)
 80053ca:	6813      	ldr	r3, [r2, #0]
 80053cc:	b933      	cbnz	r3, 80053dc <_free_r+0x2c>
 80053ce:	6063      	str	r3, [r4, #4]
 80053d0:	6014      	str	r4, [r2, #0]
 80053d2:	4628      	mov	r0, r5
 80053d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053d8:	f000 b838 	b.w	800544c <__malloc_unlock>
 80053dc:	42a3      	cmp	r3, r4
 80053de:	d908      	bls.n	80053f2 <_free_r+0x42>
 80053e0:	6820      	ldr	r0, [r4, #0]
 80053e2:	1821      	adds	r1, r4, r0
 80053e4:	428b      	cmp	r3, r1
 80053e6:	bf01      	itttt	eq
 80053e8:	6819      	ldreq	r1, [r3, #0]
 80053ea:	685b      	ldreq	r3, [r3, #4]
 80053ec:	1809      	addeq	r1, r1, r0
 80053ee:	6021      	streq	r1, [r4, #0]
 80053f0:	e7ed      	b.n	80053ce <_free_r+0x1e>
 80053f2:	461a      	mov	r2, r3
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	b10b      	cbz	r3, 80053fc <_free_r+0x4c>
 80053f8:	42a3      	cmp	r3, r4
 80053fa:	d9fa      	bls.n	80053f2 <_free_r+0x42>
 80053fc:	6811      	ldr	r1, [r2, #0]
 80053fe:	1850      	adds	r0, r2, r1
 8005400:	42a0      	cmp	r0, r4
 8005402:	d10b      	bne.n	800541c <_free_r+0x6c>
 8005404:	6820      	ldr	r0, [r4, #0]
 8005406:	4401      	add	r1, r0
 8005408:	1850      	adds	r0, r2, r1
 800540a:	4283      	cmp	r3, r0
 800540c:	6011      	str	r1, [r2, #0]
 800540e:	d1e0      	bne.n	80053d2 <_free_r+0x22>
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	4408      	add	r0, r1
 8005416:	6010      	str	r0, [r2, #0]
 8005418:	6053      	str	r3, [r2, #4]
 800541a:	e7da      	b.n	80053d2 <_free_r+0x22>
 800541c:	d902      	bls.n	8005424 <_free_r+0x74>
 800541e:	230c      	movs	r3, #12
 8005420:	602b      	str	r3, [r5, #0]
 8005422:	e7d6      	b.n	80053d2 <_free_r+0x22>
 8005424:	6820      	ldr	r0, [r4, #0]
 8005426:	1821      	adds	r1, r4, r0
 8005428:	428b      	cmp	r3, r1
 800542a:	bf01      	itttt	eq
 800542c:	6819      	ldreq	r1, [r3, #0]
 800542e:	685b      	ldreq	r3, [r3, #4]
 8005430:	1809      	addeq	r1, r1, r0
 8005432:	6021      	streq	r1, [r4, #0]
 8005434:	6063      	str	r3, [r4, #4]
 8005436:	6054      	str	r4, [r2, #4]
 8005438:	e7cb      	b.n	80053d2 <_free_r+0x22>
 800543a:	bd38      	pop	{r3, r4, r5, pc}
 800543c:	20001744 	.word	0x20001744

08005440 <__malloc_lock>:
 8005440:	4801      	ldr	r0, [pc, #4]	@ (8005448 <__malloc_lock+0x8>)
 8005442:	f7ff bfb3 	b.w	80053ac <__retarget_lock_acquire_recursive>
 8005446:	bf00      	nop
 8005448:	20001740 	.word	0x20001740

0800544c <__malloc_unlock>:
 800544c:	4801      	ldr	r0, [pc, #4]	@ (8005454 <__malloc_unlock+0x8>)
 800544e:	f7ff bfae 	b.w	80053ae <__retarget_lock_release_recursive>
 8005452:	bf00      	nop
 8005454:	20001740 	.word	0x20001740

08005458 <_init>:
 8005458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545a:	bf00      	nop
 800545c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545e:	bc08      	pop	{r3}
 8005460:	469e      	mov	lr, r3
 8005462:	4770      	bx	lr

08005464 <_fini>:
 8005464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005466:	bf00      	nop
 8005468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800546a:	bc08      	pop	{r3}
 800546c:	469e      	mov	lr, r3
 800546e:	4770      	bx	lr
