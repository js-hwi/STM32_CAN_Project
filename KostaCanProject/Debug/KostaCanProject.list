
KostaCanProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003cc0  08003cc0  00004cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d4c  08003d4c  00005060  2**0
                  CONTENTS
  4 .ARM          00000000  08003d4c  08003d4c  00005060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d4c  08003d4c  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d4c  08003d4c  00004d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d50  08003d50  00004d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003d54  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001234  20000060  08003db4  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001294  08003db4  00005294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe25  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c30  00000000  00000000  00014eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00017ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000beb  00000000  00000000  00018a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001928d  00000000  00000000  00019663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114f7  00000000  00000000  000328f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092b52  00000000  00000000  00043de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6939  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000427c  00000000  00000000  000d697c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000dabf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08003ca8 	.word	0x08003ca8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08003ca8 	.word	0x08003ca8

08000150 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000154:	4b17      	ldr	r3, [pc, #92]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000156:	4a18      	ldr	r2, [pc, #96]	@ (80001b8 <MX_CAN_Init+0x68>)
 8000158:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800015a:	4b16      	ldr	r3, [pc, #88]	@ (80001b4 <MX_CAN_Init+0x64>)
 800015c:	2209      	movs	r2, #9
 800015e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000160:	4b14      	ldr	r3, [pc, #80]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000162:	2200      	movs	r2, #0
 8000164:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000166:	4b13      	ldr	r3, [pc, #76]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000168:	2200      	movs	r2, #0
 800016a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 800016c:	4b11      	ldr	r3, [pc, #68]	@ (80001b4 <MX_CAN_Init+0x64>)
 800016e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000172:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000174:	4b0f      	ldr	r3, [pc, #60]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000176:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800017a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017c:	4b0d      	ldr	r3, [pc, #52]	@ (80001b4 <MX_CAN_Init+0x64>)
 800017e:	2200      	movs	r2, #0
 8000180:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000182:	4b0c      	ldr	r3, [pc, #48]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000184:	2200      	movs	r2, #0
 8000186:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000188:	4b0a      	ldr	r3, [pc, #40]	@ (80001b4 <MX_CAN_Init+0x64>)
 800018a:	2200      	movs	r2, #0
 800018c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018e:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000190:	2200      	movs	r2, #0
 8000192:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000194:	4b07      	ldr	r3, [pc, #28]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000196:	2200      	movs	r2, #0
 8000198:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800019a:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <MX_CAN_Init+0x64>)
 800019c:	2200      	movs	r2, #0
 800019e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <MX_CAN_Init+0x64>)
 80001a2:	f000 fb47 	bl	8000834 <HAL_CAN_Init>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001ac:	f000 f9fa 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	2000007c 	.word	0x2000007c
 80001b8:	40006400 	.word	0x40006400

080001bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	f107 0310 	add.w	r3, r7, #16
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a20      	ldr	r2, [pc, #128]	@ (8000258 <HAL_CAN_MspInit+0x9c>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d139      	bne.n	8000250 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001dc:	4b1f      	ldr	r3, [pc, #124]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001de:	69db      	ldr	r3, [r3, #28]
 80001e0:	4a1e      	ldr	r2, [pc, #120]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001e6:	61d3      	str	r3, [r2, #28]
 80001e8:	4b1c      	ldr	r3, [pc, #112]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001ea:	69db      	ldr	r3, [r3, #28]
 80001ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f4:	4b19      	ldr	r3, [pc, #100]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a18      	ldr	r2, [pc, #96]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001fa:	f043 0304 	orr.w	r3, r3, #4
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b16      	ldr	r3, [pc, #88]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0304 	and.w	r3, r3, #4
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800020c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000210:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	4619      	mov	r1, r3
 8000220:	480f      	ldr	r0, [pc, #60]	@ (8000260 <HAL_CAN_MspInit+0xa4>)
 8000222:	f001 fa27 	bl	8001674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800022a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800022c:	2302      	movs	r3, #2
 800022e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000230:	2303      	movs	r3, #3
 8000232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	4619      	mov	r1, r3
 800023a:	4809      	ldr	r0, [pc, #36]	@ (8000260 <HAL_CAN_MspInit+0xa4>)
 800023c:	f001 fa1a 	bl	8001674 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000240:	2200      	movs	r2, #0
 8000242:	2105      	movs	r1, #5
 8000244:	2014      	movs	r0, #20
 8000246:	f001 f9ea 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800024a:	2014      	movs	r0, #20
 800024c:	f001 fa03 	bl	8001656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000250:	bf00      	nop
 8000252:	3720      	adds	r7, #32
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40006400 	.word	0x40006400
 800025c:	40021000 	.word	0x40021000
 8000260:	40010800 	.word	0x40010800

08000264 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	4a06      	ldr	r2, [pc, #24]	@ (800028c <vApplicationGetIdleTaskMemory+0x28>)
 8000274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	4a05      	ldr	r2, [pc, #20]	@ (8000290 <vApplicationGetIdleTaskMemory+0x2c>)
 800027a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2280      	movs	r2, #128	@ 0x80
 8000280:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000282:	bf00      	nop
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	20000114 	.word	0x20000114
 8000290:	200001b4 	.word	0x200001b4

08000294 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000294:	b5b0      	push	{r4, r5, r7, lr}
 8000296:	b08e      	sub	sp, #56	@ 0x38
 8000298:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800029a:	4b14      	ldr	r3, [pc, #80]	@ (80002ec <MX_FREERTOS_Init+0x58>)
 800029c:	f107 041c 	add.w	r4, r7, #28
 80002a0:	461d      	mov	r5, r3
 80002a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002ae:	f107 031c 	add.w	r3, r7, #28
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 fa1b 	bl	80026f0 <osThreadCreate>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4a0c      	ldr	r2, [pc, #48]	@ (80002f0 <MX_FREERTOS_Init+0x5c>)
 80002be:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 256);
 80002c0:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <MX_FREERTOS_Init+0x60>)
 80002c2:	463c      	mov	r4, r7
 80002c4:	461d      	mov	r5, r3
 80002c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80002d2:	463b      	mov	r3, r7
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fa0a 	bl	80026f0 <osThreadCreate>
 80002dc:	4603      	mov	r3, r0
 80002de:	4a06      	ldr	r2, [pc, #24]	@ (80002f8 <MX_FREERTOS_Init+0x64>)
 80002e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80002e2:	bf00      	nop
 80002e4:	3738      	adds	r7, #56	@ 0x38
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bdb0      	pop	{r4, r5, r7, pc}
 80002ea:	bf00      	nop
 80002ec:	08003ccc 	.word	0x08003ccc
 80002f0:	2000010c 	.word	0x2000010c
 80002f4:	08003cf4 	.word	0x08003cf4
 80002f8:	20000110 	.word	0x20000110

080002fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	canfil.FilterBank = 0;
 8000304:	4b25      	ldr	r3, [pc, #148]	@ (800039c <StartDefaultTask+0xa0>)
 8000306:	2200      	movs	r2, #0
 8000308:	615a      	str	r2, [r3, #20]
		  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800030a:	4b24      	ldr	r3, [pc, #144]	@ (800039c <StartDefaultTask+0xa0>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
		  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000310:	4b22      	ldr	r3, [pc, #136]	@ (800039c <StartDefaultTask+0xa0>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
		  canfil.FilterIdHigh = 0;
 8000316:	4b21      	ldr	r3, [pc, #132]	@ (800039c <StartDefaultTask+0xa0>)
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
		  canfil.FilterIdLow = 0;
 800031c:	4b1f      	ldr	r3, [pc, #124]	@ (800039c <StartDefaultTask+0xa0>)
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
		  canfil.FilterMaskIdHigh = 0;
 8000322:	4b1e      	ldr	r3, [pc, #120]	@ (800039c <StartDefaultTask+0xa0>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
		  canfil.FilterMaskIdLow = 0;
 8000328:	4b1c      	ldr	r3, [pc, #112]	@ (800039c <StartDefaultTask+0xa0>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
		  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800032e:	4b1b      	ldr	r3, [pc, #108]	@ (800039c <StartDefaultTask+0xa0>)
 8000330:	2201      	movs	r2, #1
 8000332:	61da      	str	r2, [r3, #28]
		  canfil.FilterActivation = ENABLE;
 8000334:	4b19      	ldr	r3, [pc, #100]	@ (800039c <StartDefaultTask+0xa0>)
 8000336:	2201      	movs	r2, #1
 8000338:	621a      	str	r2, [r3, #32]
		  canfil.SlaveStartFilterBank = 14;
 800033a:	4b18      	ldr	r3, [pc, #96]	@ (800039c <StartDefaultTask+0xa0>)
 800033c:	220e      	movs	r2, #14
 800033e:	625a      	str	r2, [r3, #36]	@ 0x24

		  txHeader.DLC = 8;
 8000340:	4b17      	ldr	r3, [pc, #92]	@ (80003a0 <StartDefaultTask+0xa4>)
 8000342:	2208      	movs	r2, #8
 8000344:	611a      	str	r2, [r3, #16]
		  txHeader.IDE = CAN_ID_STD;
 8000346:	4b16      	ldr	r3, [pc, #88]	@ (80003a0 <StartDefaultTask+0xa4>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
		  txHeader.RTR = CAN_RTR_DATA;
 800034c:	4b14      	ldr	r3, [pc, #80]	@ (80003a0 <StartDefaultTask+0xa4>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
		  txHeader.StdId = 0x40;
 8000352:	4b13      	ldr	r3, [pc, #76]	@ (80003a0 <StartDefaultTask+0xa4>)
 8000354:	2240      	movs	r2, #64	@ 0x40
 8000356:	601a      	str	r2, [r3, #0]
		  //txHeader.ExtId = 0x02;
		  txHeader.TransmitGlobalTime = DISABLE;
 8000358:	4b11      	ldr	r3, [pc, #68]	@ (80003a0 <StartDefaultTask+0xa4>)
 800035a:	2200      	movs	r2, #0
 800035c:	751a      	strb	r2, [r3, #20]

		  HAL_CAN_ConfigFilter(&hcan,&canfil);
 800035e:	490f      	ldr	r1, [pc, #60]	@ (800039c <StartDefaultTask+0xa0>)
 8000360:	4810      	ldr	r0, [pc, #64]	@ (80003a4 <StartDefaultTask+0xa8>)
 8000362:	f000 fb62 	bl	8000a2a <HAL_CAN_ConfigFilter>
		  HAL_CAN_Start(&hcan);
 8000366:	480f      	ldr	r0, [pc, #60]	@ (80003a4 <StartDefaultTask+0xa8>)
 8000368:	f000 fc28 	bl	8000bbc <HAL_CAN_Start>
		  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 800036c:	2102      	movs	r1, #2
 800036e:	480d      	ldr	r0, [pc, #52]	@ (80003a4 <StartDefaultTask+0xa8>)
 8000370:	f000 fe58 	bl	8001024 <HAL_CAN_ActivateNotification>

		  /* Infinite loop */
		  for(;;)
		  {
			  uint8_t csend[] = {0xAA,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
 8000374:	4a0c      	ldr	r2, [pc, #48]	@ (80003a8 <StartDefaultTask+0xac>)
 8000376:	f107 0308 	add.w	r3, r7, #8
 800037a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800037e:	e883 0003 	stmia.w	r3, {r0, r1}
			  HAL_CAN_AddTxMessage(&hcan,&txHeader,csend,&canMailbox);
 8000382:	f107 0208 	add.w	r2, r7, #8
 8000386:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <StartDefaultTask+0xb0>)
 8000388:	4905      	ldr	r1, [pc, #20]	@ (80003a0 <StartDefaultTask+0xa4>)
 800038a:	4806      	ldr	r0, [pc, #24]	@ (80003a4 <StartDefaultTask+0xa8>)
 800038c:	f000 fc5a 	bl	8000c44 <HAL_CAN_AddTxMessage>

			  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

			  osDelay(1000);
 8000390:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000394:	f002 f9f8 	bl	8002788 <osDelay>
		  {
 8000398:	bf00      	nop
 800039a:	e7eb      	b.n	8000374 <StartDefaultTask+0x78>
 800039c:	200000e0 	.word	0x200000e0
 80003a0:	200000c0 	.word	0x200000c0
 80003a4:	2000007c 	.word	0x2000007c
 80003a8:	08003d10 	.word	0x08003d10
 80003ac:	20000108 	.word	0x20000108

080003b0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  osDelay(1000);
 80003b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003bc:	f002 f9e4 	bl	8002788 <osDelay>
 80003c0:	e7fa      	b.n	80003b8 <StartTask02+0x8>
	...

080003c4 <HAL_CAN_RxFifo0MsgPendingCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 80003cc:	4b07      	ldr	r3, [pc, #28]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80003ce:	4a08      	ldr	r2, [pc, #32]	@ (80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80003d0:	2100      	movs	r1, #0
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f000 fd05 	bl	8000de2 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003dc:	4805      	ldr	r0, [pc, #20]	@ (80003f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80003de:	f001 fae5 	bl	80019ac <HAL_GPIO_TogglePin>

	//if (rxHeader.StdId == 0x0F6) {
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	//}

}
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	200000d8 	.word	0x200000d8
 80003f0:	200000a4 	.word	0x200000a4
 80003f4:	40011000 	.word	0x40011000

080003f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040c:	4b2e      	ldr	r3, [pc, #184]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a2d      	ldr	r2, [pc, #180]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 8000412:	f043 0310 	orr.w	r3, r3, #16
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b2b      	ldr	r3, [pc, #172]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0310 	and.w	r3, r3, #16
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000424:	4b28      	ldr	r3, [pc, #160]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a27      	ldr	r2, [pc, #156]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b25      	ldr	r3, [pc, #148]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0320 	and.w	r3, r3, #32
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043c:	4b22      	ldr	r3, [pc, #136]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a21      	ldr	r2, [pc, #132]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 8000442:	f043 0308 	orr.w	r3, r3, #8
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b1f      	ldr	r3, [pc, #124]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0308 	and.w	r3, r3, #8
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	4b1c      	ldr	r3, [pc, #112]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a1b      	ldr	r2, [pc, #108]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b19      	ldr	r3, [pc, #100]	@ (80004c8 <MX_GPIO_Init+0xd0>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0304 	and.w	r3, r3, #4
 8000468:	603b      	str	r3, [r7, #0]
 800046a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000472:	4816      	ldr	r0, [pc, #88]	@ (80004cc <MX_GPIO_Init+0xd4>)
 8000474:	f001 fa82 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin, GPIO_PIN_SET);
 8000478:	2201      	movs	r2, #1
 800047a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800047e:	4814      	ldr	r0, [pc, #80]	@ (80004d0 <MX_GPIO_Init+0xd8>)
 8000480:	f001 fa7c 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8000484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048a:	2301      	movs	r3, #1
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800048e:	2301      	movs	r3, #1
 8000490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000492:	2303      	movs	r3, #3
 8000494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	480b      	ldr	r0, [pc, #44]	@ (80004cc <MX_GPIO_Init+0xd4>)
 800049e:	f001 f8e9 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin;
 80004a2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80004a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	2301      	movs	r3, #1
 80004aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ac:	2301      	movs	r3, #1
 80004ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b0:	2303      	movs	r3, #3
 80004b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	4805      	ldr	r0, [pc, #20]	@ (80004d0 <MX_GPIO_Init+0xd8>)
 80004bc:	f001 f8da 	bl	8001674 <HAL_GPIO_Init>

}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40011000 	.word	0x40011000
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 f97a 	bl	80007d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f80a 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f7ff ff8a 	bl	80003f8 <MX_GPIO_Init>
  MX_CAN_Init();
 80004e4:	f7ff fe34 	bl	8000150 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80004e8:	f7ff fed4 	bl	8000294 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80004ec:	f002 f8f9 	bl	80026e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <main+0x1c>

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b090      	sub	sp, #64	@ 0x40
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0318 	add.w	r3, r7, #24
 80004fe:	2228      	movs	r2, #40	@ 0x28
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f003 faf8 	bl	8003af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000516:	2301      	movs	r3, #1
 8000518:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800051a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800051e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000524:	2301      	movs	r3, #1
 8000526:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000528:	2302      	movs	r3, #2
 800052a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800052c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000530:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000532:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000536:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000538:	f107 0318 	add.w	r3, r7, #24
 800053c:	4618      	mov	r0, r3
 800053e:	f001 fa4f 	bl	80019e0 <HAL_RCC_OscConfig>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000548:	f000 f82c 	bl	80005a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054c:	230f      	movs	r3, #15
 800054e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000550:	2302      	movs	r3, #2
 8000552:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000558:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800055c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2102      	movs	r1, #2
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fcbc 	bl	8001ee4 <HAL_RCC_ClockConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000572:	f000 f817 	bl	80005a4 <Error_Handler>
  }
}
 8000576:	bf00      	nop
 8000578:	3740      	adds	r7, #64	@ 0x40
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a04      	ldr	r2, [pc, #16]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d101      	bne.n	8000596 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000592:	f000 f933 	bl	80007fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40000800 	.word	0x40000800

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <Error_Handler+0x8>

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b6:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <HAL_MspInit+0x68>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <HAL_MspInit+0x68>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6193      	str	r3, [r2, #24]
 80005c2:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <HAL_MspInit+0x68>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_MspInit+0x68>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a11      	ldr	r2, [pc, #68]	@ (8000618 <HAL_MspInit+0x68>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <HAL_MspInit+0x68>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	210f      	movs	r1, #15
 80005ea:	f06f 0001 	mvn.w	r0, #1
 80005ee:	f001 f816 	bl	800161e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005f2:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <HAL_MspInit+0x6c>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	4a04      	ldr	r2, [pc, #16]	@ (800061c <HAL_MspInit+0x6c>)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000
 800061c:	40010000 	.word	0x40010000

08000620 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08e      	sub	sp, #56	@ 0x38
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000628:	2300      	movs	r3, #0
 800062a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800062c:	2300      	movs	r3, #0
 800062e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000630:	2300      	movs	r3, #0
 8000632:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000636:	4b34      	ldr	r3, [pc, #208]	@ (8000708 <HAL_InitTick+0xe8>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a33      	ldr	r2, [pc, #204]	@ (8000708 <HAL_InitTick+0xe8>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b31      	ldr	r3, [pc, #196]	@ (8000708 <HAL_InitTick+0xe8>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800064e:	f107 0210 	add.w	r2, r7, #16
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4611      	mov	r1, r2
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fd9f 	bl	800219c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800065e:	6a3b      	ldr	r3, [r7, #32]
 8000660:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000664:	2b00      	cmp	r3, #0
 8000666:	d103      	bne.n	8000670 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000668:	f001 fd84 	bl	8002174 <HAL_RCC_GetPCLK1Freq>
 800066c:	6378      	str	r0, [r7, #52]	@ 0x34
 800066e:	e004      	b.n	800067a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000670:	f001 fd80 	bl	8002174 <HAL_RCC_GetPCLK1Freq>
 8000674:	4603      	mov	r3, r0
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800067a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800067c:	4a23      	ldr	r2, [pc, #140]	@ (800070c <HAL_InitTick+0xec>)
 800067e:	fba2 2303 	umull	r2, r3, r2, r3
 8000682:	0c9b      	lsrs	r3, r3, #18
 8000684:	3b01      	subs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000688:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <HAL_InitTick+0xf0>)
 800068a:	4a22      	ldr	r2, [pc, #136]	@ (8000714 <HAL_InitTick+0xf4>)
 800068c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800068e:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <HAL_InitTick+0xf0>)
 8000690:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000694:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000696:	4a1e      	ldr	r2, [pc, #120]	@ (8000710 <HAL_InitTick+0xf0>)
 8000698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800069a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_InitTick+0xf0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_InitTick+0xf0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_InitTick+0xf0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80006ae:	4818      	ldr	r0, [pc, #96]	@ (8000710 <HAL_InitTick+0xf0>)
 80006b0:	f001 fdc2 	bl	8002238 <HAL_TIM_Base_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80006ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d11b      	bne.n	80006fa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80006c2:	4813      	ldr	r0, [pc, #76]	@ (8000710 <HAL_InitTick+0xf0>)
 80006c4:	f001 fe10 	bl	80022e8 <HAL_TIM_Base_Start_IT>
 80006c8:	4603      	mov	r3, r0
 80006ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80006ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d111      	bne.n	80006fa <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006d6:	201e      	movs	r0, #30
 80006d8:	f000 ffbd 	bl	8001656 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b0f      	cmp	r3, #15
 80006e0:	d808      	bhi.n	80006f4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80006e2:	2200      	movs	r2, #0
 80006e4:	6879      	ldr	r1, [r7, #4]
 80006e6:	201e      	movs	r0, #30
 80006e8:	f000 ff99 	bl	800161e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000718 <HAL_InitTick+0xf8>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	e002      	b.n	80006fa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80006f4:	2301      	movs	r3, #1
 80006f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3738      	adds	r7, #56	@ 0x38
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000
 800070c:	431bde83 	.word	0x431bde83
 8000710:	200003b4 	.word	0x200003b4
 8000714:	40000800 	.word	0x40000800
 8000718:	20000004 	.word	0x20000004

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <NMI_Handler+0x4>

08000724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <HardFault_Handler+0x4>

0800072c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <MemManage_Handler+0x4>

08000734 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <UsageFault_Handler+0x4>

08000744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000754:	4802      	ldr	r0, [pc, #8]	@ (8000760 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000756:	f000 fc8a 	bl	800106e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000007c 	.word	0x2000007c

08000764 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000768:	4802      	ldr	r0, [pc, #8]	@ (8000774 <TIM4_IRQHandler+0x10>)
 800076a:	f001 fe0f 	bl	800238c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200003b4 	.word	0x200003b4

08000778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000784:	f7ff fff8 	bl	8000778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000788:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800078a:	490c      	ldr	r1, [pc, #48]	@ (80007bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800078c:	4a0c      	ldr	r2, [pc, #48]	@ (80007c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a09      	ldr	r2, [pc, #36]	@ (80007c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007a0:	4c09      	ldr	r4, [pc, #36]	@ (80007c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ae:	f003 fa01 	bl	8003bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007b2:	f7ff fe8f 	bl	80004d4 <main>
  bx lr
 80007b6:	4770      	bx	lr
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80007c0:	08003d54 	.word	0x08003d54
  ldr r2, =_sbss
 80007c4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007c8:	20001294 	.word	0x20001294

080007cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC1_2_IRQHandler>
	...

080007d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <HAL_Init+0x28>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a07      	ldr	r2, [pc, #28]	@ (80007f8 <HAL_Init+0x28>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e0:	2003      	movs	r0, #3
 80007e2:	f000 ff11 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e6:	200f      	movs	r0, #15
 80007e8:	f7ff ff1a 	bl	8000620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ec:	f7ff fee0 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40022000 	.word	0x40022000

080007fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <HAL_IncTick+0x1c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b05      	ldr	r3, [pc, #20]	@ (800081c <HAL_IncTick+0x20>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4a03      	ldr	r2, [pc, #12]	@ (800081c <HAL_IncTick+0x20>)
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000008 	.word	0x20000008
 800081c:	200003fc 	.word	0x200003fc

08000820 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;
 8000824:	4b02      	ldr	r3, [pc, #8]	@ (8000830 <HAL_GetTick+0x10>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	200003fc 	.word	0x200003fc

08000834 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d101      	bne.n	8000846 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e0ed      	b.n	8000a22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d102      	bne.n	8000858 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff fcb2 	bl	80001bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f042 0201 	orr.w	r2, r2, #1
 8000866:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000868:	f7ff ffda 	bl	8000820 <HAL_GetTick>
 800086c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800086e:	e012      	b.n	8000896 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000870:	f7ff ffd6 	bl	8000820 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	2b0a      	cmp	r3, #10
 800087c:	d90b      	bls.n	8000896 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000882:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2205      	movs	r2, #5
 800088e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e0c5      	b.n	8000a22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0e5      	beq.n	8000870 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f022 0202 	bic.w	r2, r2, #2
 80008b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008b4:	f7ff ffb4 	bl	8000820 <HAL_GetTick>
 80008b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008ba:	e012      	b.n	80008e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008bc:	f7ff ffb0 	bl	8000820 <HAL_GetTick>
 80008c0:	4602      	mov	r2, r0
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	2b0a      	cmp	r3, #10
 80008c8:	d90b      	bls.n	80008e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2205      	movs	r2, #5
 80008da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e09f      	b.n	8000a22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f003 0302 	and.w	r3, r3, #2
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1e5      	bne.n	80008bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7e1b      	ldrb	r3, [r3, #24]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d108      	bne.n	800090a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	e007      	b.n	800091a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000918:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	7e5b      	ldrb	r3, [r3, #25]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d108      	bne.n	8000934 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	e007      	b.n	8000944 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000942:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7e9b      	ldrb	r3, [r3, #26]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d108      	bne.n	800095e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f042 0220 	orr.w	r2, r2, #32
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	e007      	b.n	800096e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f022 0220 	bic.w	r2, r2, #32
 800096c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	7edb      	ldrb	r3, [r3, #27]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d108      	bne.n	8000988 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f022 0210 	bic.w	r2, r2, #16
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	e007      	b.n	8000998 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f042 0210 	orr.w	r2, r2, #16
 8000996:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7f1b      	ldrb	r3, [r3, #28]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d108      	bne.n	80009b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f042 0208 	orr.w	r2, r2, #8
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	e007      	b.n	80009c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f022 0208 	bic.w	r2, r2, #8
 80009c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	7f5b      	ldrb	r3, [r3, #29]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d108      	bne.n	80009dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f042 0204 	orr.w	r2, r2, #4
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	e007      	b.n	80009ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f022 0204 	bic.w	r2, r2, #4
 80009ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	431a      	orrs	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	691b      	ldr	r3, [r3, #16]
 80009fa:	431a      	orrs	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	ea42 0103 	orr.w	r1, r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	1e5a      	subs	r2, r3, #1
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b087      	sub	sp, #28
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a40:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a42:	7cfb      	ldrb	r3, [r7, #19]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d003      	beq.n	8000a50 <HAL_CAN_ConfigFilter+0x26>
 8000a48:	7cfb      	ldrb	r3, [r7, #19]
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	f040 80aa 	bne.w	8000ba4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000a56:	f043 0201 	orr.w	r2, r3, #1
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	f003 031f 	and.w	r3, r3, #31
 8000a68:	2201      	movs	r2, #1
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d123      	bne.n	8000ad2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	43db      	mvns	r3, r3
 8000a94:	401a      	ands	r2, r3
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000aac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3248      	adds	r2, #72	@ 0x48
 8000ab2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ac6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ac8:	6979      	ldr	r1, [r7, #20]
 8000aca:	3348      	adds	r3, #72	@ 0x48
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	440b      	add	r3, r1
 8000ad0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d122      	bne.n	8000b20 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000afa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3248      	adds	r2, #72	@ 0x48
 8000b00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b16:	6979      	ldr	r1, [r7, #20]
 8000b18:	3348      	adds	r3, #72	@ 0x48
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	440b      	add	r3, r1
 8000b1e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d109      	bne.n	8000b3c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	43db      	mvns	r3, r3
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000b3a:	e007      	b.n	8000b4c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	431a      	orrs	r2, r3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	691b      	ldr	r3, [r3, #16]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d109      	bne.n	8000b68 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000b66:	e007      	b.n	8000b78 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	431a      	orrs	r2, r3
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	6a1b      	ldr	r3, [r3, #32]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d107      	bne.n	8000b90 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b96:	f023 0201 	bic.w	r2, r3, #1
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e006      	b.n	8000bb2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ba8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
  }
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d12e      	bne.n	8000c2e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f022 0201 	bic.w	r2, r2, #1
 8000be6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000be8:	f7ff fe1a 	bl	8000820 <HAL_GetTick>
 8000bec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000bee:	e012      	b.n	8000c16 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bf0:	f7ff fe16 	bl	8000820 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	2b0a      	cmp	r3, #10
 8000bfc:	d90b      	bls.n	8000c16 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c02:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2205      	movs	r2, #5
 8000c0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e012      	b.n	8000c3c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1e5      	bne.n	8000bf0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e006      	b.n	8000c3c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c32:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
  }
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b089      	sub	sp, #36	@ 0x24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c58:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c62:	7ffb      	ldrb	r3, [r7, #31]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d003      	beq.n	8000c70 <HAL_CAN_AddTxMessage+0x2c>
 8000c68:	7ffb      	ldrb	r3, [r7, #31]
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	f040 80ad 	bne.w	8000dca <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10a      	bne.n	8000c90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d105      	bne.n	8000c90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 8095 	beq.w	8000dba <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	0e1b      	lsrs	r3, r3, #24
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d10d      	bne.n	8000cc8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cb6:	68f9      	ldr	r1, [r7, #12]
 8000cb8:	6809      	ldr	r1, [r1, #0]
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	3318      	adds	r3, #24
 8000cc0:	011b      	lsls	r3, r3, #4
 8000cc2:	440b      	add	r3, r1
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	e00f      	b.n	8000ce8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cd2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cd8:	68f9      	ldr	r1, [r7, #12]
 8000cda:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000cdc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3318      	adds	r3, #24
 8000ce2:	011b      	lsls	r3, r3, #4
 8000ce4:	440b      	add	r3, r1
 8000ce6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6819      	ldr	r1, [r3, #0]
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	691a      	ldr	r2, [r3, #16]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3318      	adds	r3, #24
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	440b      	add	r3, r1
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	7d1b      	ldrb	r3, [r3, #20]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d111      	bne.n	8000d28 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3318      	adds	r3, #24
 8000d0c:	011b      	lsls	r3, r3, #4
 8000d0e:	4413      	add	r3, r2
 8000d10:	3304      	adds	r3, #4
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	6811      	ldr	r1, [r2, #0]
 8000d18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	3318      	adds	r3, #24
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	440b      	add	r3, r1
 8000d24:	3304      	adds	r3, #4
 8000d26:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3307      	adds	r3, #7
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	061a      	lsls	r2, r3, #24
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3306      	adds	r3, #6
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	041b      	lsls	r3, r3, #16
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3305      	adds	r3, #5
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	021b      	lsls	r3, r3, #8
 8000d42:	4313      	orrs	r3, r2
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	3204      	adds	r2, #4
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	6811      	ldr	r1, [r2, #0]
 8000d50:	ea43 0200 	orr.w	r2, r3, r0
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	011b      	lsls	r3, r3, #4
 8000d58:	440b      	add	r3, r1
 8000d5a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000d5e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3303      	adds	r3, #3
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	061a      	lsls	r2, r3, #24
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	041b      	lsls	r3, r3, #16
 8000d70:	431a      	orrs	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3301      	adds	r3, #1
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	7812      	ldrb	r2, [r2, #0]
 8000d80:	4610      	mov	r0, r2
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	6811      	ldr	r1, [r2, #0]
 8000d86:	ea43 0200 	orr.w	r2, r3, r0
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	440b      	add	r3, r1
 8000d90:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000d94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3318      	adds	r3, #24
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	4413      	add	r3, r2
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	6811      	ldr	r1, [r2, #0]
 8000da8:	f043 0201 	orr.w	r2, r3, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3318      	adds	r3, #24
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	440b      	add	r3, r1
 8000db4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e00e      	b.n	8000dd8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dbe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e006      	b.n	8000dd8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
  }
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3724      	adds	r7, #36	@ 0x24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000de2:	b480      	push	{r7}
 8000de4:	b087      	sub	sp, #28
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d003      	beq.n	8000e06 <HAL_CAN_GetRxMessage+0x24>
 8000dfe:	7dfb      	ldrb	r3, [r7, #23]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	f040 8103 	bne.w	800100c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d10e      	bne.n	8000e2a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d116      	bne.n	8000e48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e0f7      	b.n	800101a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d107      	bne.n	8000e48 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e0e8      	b.n	800101a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	331b      	adds	r3, #27
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	4413      	add	r3, r2
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0204 	and.w	r2, r3, #4
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10c      	bne.n	8000e80 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	331b      	adds	r3, #27
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	4413      	add	r3, r2
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	0d5b      	lsrs	r3, r3, #21
 8000e76:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e00b      	b.n	8000e98 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	331b      	adds	r3, #27
 8000e88:	011b      	lsls	r3, r3, #4
 8000e8a:	4413      	add	r3, r2
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	331b      	adds	r3, #27
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	4413      	add	r3, r2
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0202 	and.w	r2, r3, #2
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	331b      	adds	r3, #27
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	4413      	add	r3, r2
 8000eba:	3304      	adds	r3, #4
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2208      	movs	r2, #8
 8000eca:	611a      	str	r2, [r3, #16]
 8000ecc:	e00b      	b.n	8000ee6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	331b      	adds	r3, #27
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	4413      	add	r3, r2
 8000eda:	3304      	adds	r3, #4
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 020f 	and.w	r2, r3, #15
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	331b      	adds	r3, #27
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	4413      	add	r3, r2
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	331b      	adds	r3, #27
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	4413      	add	r3, r2
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	0c1b      	lsrs	r3, r3, #16
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	4413      	add	r3, r2
 8000f20:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	4413      	add	r3, r2
 8000f36:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	0a1a      	lsrs	r2, r3, #8
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	3301      	adds	r3, #1
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	4413      	add	r3, r2
 8000f50:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	0c1a      	lsrs	r2, r3, #16
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	4413      	add	r3, r2
 8000f6a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	0e1a      	lsrs	r2, r3, #24
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	3303      	adds	r3, #3
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	4413      	add	r3, r2
 8000f84:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	0a1a      	lsrs	r2, r3, #8
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	3305      	adds	r3, #5
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	4413      	add	r3, r2
 8000fb6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	0c1a      	lsrs	r2, r3, #16
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3306      	adds	r3, #6
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	4413      	add	r3, r2
 8000fd0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	0e1a      	lsrs	r2, r3, #24
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	3307      	adds	r3, #7
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d108      	bne.n	8000ff8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f042 0220 	orr.w	r2, r2, #32
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	e007      	b.n	8001008 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	691a      	ldr	r2, [r3, #16]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0220 	orr.w	r2, r2, #32
 8001006:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	e006      	b.n	800101a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001010:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
  }
}
 800101a:	4618      	mov	r0, r3
 800101c:	371c      	adds	r7, #28
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001034:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d002      	beq.n	8001042 <HAL_CAN_ActivateNotification+0x1e>
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d109      	bne.n	8001056 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6959      	ldr	r1, [r3, #20]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	430a      	orrs	r2, r1
 8001050:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e006      	b.n	8001064 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
  }
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b08a      	sub	sp, #40	@ 0x28
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80010aa:	6a3b      	ldr	r3, [r7, #32]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d07c      	beq.n	80011ae <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d023      	beq.n	8001106 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2201      	movs	r2, #1
 80010c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 f983 	bl	80013dc <HAL_CAN_TxMailbox0CompleteCallback>
 80010d6:	e016      	b.n	8001106 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d004      	beq.n	80010ec <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80010ea:	e00c      	b.n	8001106 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80010fe:	e002      	b.n	8001106 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 f986 	bl	8001412 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d024      	beq.n	800115a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001118:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f962 	bl	80013ee <HAL_CAN_TxMailbox1CompleteCallback>
 800112a:	e016      	b.n	800115a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001132:	2b00      	cmp	r3, #0
 8001134:	d004      	beq.n	8001140 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001138:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
 800113e:	e00c      	b.n	800115a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800114a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
 8001152:	e002      	b.n	800115a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 f965 	bl	8001424 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d024      	beq.n	80011ae <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800116c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f941 	bl	8001400 <HAL_CAN_TxMailbox2CompleteCallback>
 800117e:	e016      	b.n	80011ae <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d004      	beq.n	8001194 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
 8001192:	e00c      	b.n	80011ae <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d004      	beq.n	80011a8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80011a6:	e002      	b.n	80011ae <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f944 	bl	8001436 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00c      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2210      	movs	r2, #16
 80011d0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00b      	beq.n	80011f4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d006      	beq.n	80011f4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2208      	movs	r2, #8
 80011ec:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f92a 	bl	8001448 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d009      	beq.n	8001212 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff f8d9 	bl	80003c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00c      	beq.n	8001236 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	2b00      	cmp	r3, #0
 8001224:	d007      	beq.n	8001236 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001228:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2210      	movs	r2, #16
 8001234:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00b      	beq.n	8001258 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2208      	movs	r2, #8
 8001250:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f90a 	bl	800146c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	2b00      	cmp	r3, #0
 8001260:	d009      	beq.n	8001276 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f8f2 	bl	800145a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00b      	beq.n	8001298 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b00      	cmp	r3, #0
 8001288:	d006      	beq.n	8001298 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2210      	movs	r2, #16
 8001290:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f8f3 	bl	800147e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2208      	movs	r2, #8
 80012b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f8eb 	bl	8001490 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d07b      	beq.n	80013bc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d072      	beq.n	80013b4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d008      	beq.n	8001306 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001328:	2b00      	cmp	r3, #0
 800132a:	d043      	beq.n	80013b4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001332:	2b00      	cmp	r3, #0
 8001334:	d03e      	beq.n	80013b4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800133c:	2b60      	cmp	r3, #96	@ 0x60
 800133e:	d02b      	beq.n	8001398 <HAL_CAN_IRQHandler+0x32a>
 8001340:	2b60      	cmp	r3, #96	@ 0x60
 8001342:	d82e      	bhi.n	80013a2 <HAL_CAN_IRQHandler+0x334>
 8001344:	2b50      	cmp	r3, #80	@ 0x50
 8001346:	d022      	beq.n	800138e <HAL_CAN_IRQHandler+0x320>
 8001348:	2b50      	cmp	r3, #80	@ 0x50
 800134a:	d82a      	bhi.n	80013a2 <HAL_CAN_IRQHandler+0x334>
 800134c:	2b40      	cmp	r3, #64	@ 0x40
 800134e:	d019      	beq.n	8001384 <HAL_CAN_IRQHandler+0x316>
 8001350:	2b40      	cmp	r3, #64	@ 0x40
 8001352:	d826      	bhi.n	80013a2 <HAL_CAN_IRQHandler+0x334>
 8001354:	2b30      	cmp	r3, #48	@ 0x30
 8001356:	d010      	beq.n	800137a <HAL_CAN_IRQHandler+0x30c>
 8001358:	2b30      	cmp	r3, #48	@ 0x30
 800135a:	d822      	bhi.n	80013a2 <HAL_CAN_IRQHandler+0x334>
 800135c:	2b10      	cmp	r3, #16
 800135e:	d002      	beq.n	8001366 <HAL_CAN_IRQHandler+0x2f8>
 8001360:	2b20      	cmp	r3, #32
 8001362:	d005      	beq.n	8001370 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001364:	e01d      	b.n	80013a2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800136e:	e019      	b.n	80013a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001378:	e014      	b.n	80013a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	f043 0320 	orr.w	r3, r3, #32
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001382:	e00f      	b.n	80013a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800138c:	e00a      	b.n	80013a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001396:	e005      	b.n	80013a4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013a0:	e000      	b.n	80013a4 <HAL_CAN_IRQHandler+0x336>
            break;
 80013a2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	699a      	ldr	r2, [r3, #24]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80013b2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2204      	movs	r2, #4
 80013ba:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d008      	beq.n	80013d4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	431a      	orrs	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f867 	bl	80014a2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	@ 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	@ (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db0b      	blt.n	8001542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	4906      	ldr	r1, [pc, #24]	@ (800154c <__NVIC_EnableIRQ+0x34>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	2001      	movs	r0, #1
 800153a:	fa00 f202 	lsl.w	r2, r0, r2
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	@ (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	@ (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	@ 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	@ 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff4f 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001630:	f7ff ff64 	bl	80014fc <__NVIC_GetPriorityGrouping>
 8001634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff ffb2 	bl	80015a4 <NVIC_EncodePriority>
 8001640:	4602      	mov	r2, r0
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff81 	bl	8001550 <__NVIC_SetPriority>
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff57 	bl	8001518 <__NVIC_EnableIRQ>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b08b      	sub	sp, #44	@ 0x2c
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001686:	e169      	b.n	800195c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001688:	2201      	movs	r2, #1
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 8158 	bne.w	8001956 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4a9a      	ldr	r2, [pc, #616]	@ (8001914 <HAL_GPIO_Init+0x2a0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d05e      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016b0:	4a98      	ldr	r2, [pc, #608]	@ (8001914 <HAL_GPIO_Init+0x2a0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d875      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016b6:	4a98      	ldr	r2, [pc, #608]	@ (8001918 <HAL_GPIO_Init+0x2a4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d058      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016bc:	4a96      	ldr	r2, [pc, #600]	@ (8001918 <HAL_GPIO_Init+0x2a4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d86f      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016c2:	4a96      	ldr	r2, [pc, #600]	@ (800191c <HAL_GPIO_Init+0x2a8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d052      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016c8:	4a94      	ldr	r2, [pc, #592]	@ (800191c <HAL_GPIO_Init+0x2a8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d869      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016ce:	4a94      	ldr	r2, [pc, #592]	@ (8001920 <HAL_GPIO_Init+0x2ac>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d04c      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016d4:	4a92      	ldr	r2, [pc, #584]	@ (8001920 <HAL_GPIO_Init+0x2ac>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d863      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016da:	4a92      	ldr	r2, [pc, #584]	@ (8001924 <HAL_GPIO_Init+0x2b0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d046      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016e0:	4a90      	ldr	r2, [pc, #576]	@ (8001924 <HAL_GPIO_Init+0x2b0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d85d      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d82a      	bhi.n	8001740 <HAL_GPIO_Init+0xcc>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d859      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016ee:	a201      	add	r2, pc, #4	@ (adr r2, 80016f4 <HAL_GPIO_Init+0x80>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	0800176f 	.word	0x0800176f
 80016f8:	08001749 	.word	0x08001749
 80016fc:	0800175b 	.word	0x0800175b
 8001700:	0800179d 	.word	0x0800179d
 8001704:	080017a3 	.word	0x080017a3
 8001708:	080017a3 	.word	0x080017a3
 800170c:	080017a3 	.word	0x080017a3
 8001710:	080017a3 	.word	0x080017a3
 8001714:	080017a3 	.word	0x080017a3
 8001718:	080017a3 	.word	0x080017a3
 800171c:	080017a3 	.word	0x080017a3
 8001720:	080017a3 	.word	0x080017a3
 8001724:	080017a3 	.word	0x080017a3
 8001728:	080017a3 	.word	0x080017a3
 800172c:	080017a3 	.word	0x080017a3
 8001730:	080017a3 	.word	0x080017a3
 8001734:	080017a3 	.word	0x080017a3
 8001738:	08001751 	.word	0x08001751
 800173c:	08001765 	.word	0x08001765
 8001740:	4a79      	ldr	r2, [pc, #484]	@ (8001928 <HAL_GPIO_Init+0x2b4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001746:	e02c      	b.n	80017a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e029      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	3304      	adds	r3, #4
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e024      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	3308      	adds	r3, #8
 8001760:	623b      	str	r3, [r7, #32]
          break;
 8001762:	e01f      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	330c      	adds	r3, #12
 800176a:	623b      	str	r3, [r7, #32]
          break;
 800176c:	e01a      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001776:	2304      	movs	r3, #4
 8001778:	623b      	str	r3, [r7, #32]
          break;
 800177a:	e013      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001784:	2308      	movs	r3, #8
 8001786:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	611a      	str	r2, [r3, #16]
          break;
 800178e:	e009      	b.n	80017a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001790:	2308      	movs	r3, #8
 8001792:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	615a      	str	r2, [r3, #20]
          break;
 800179a:	e003      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          break;
 80017a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2bff      	cmp	r3, #255	@ 0xff
 80017a8:	d801      	bhi.n	80017ae <HAL_GPIO_Init+0x13a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	e001      	b.n	80017b2 <HAL_GPIO_Init+0x13e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3304      	adds	r3, #4
 80017b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2bff      	cmp	r3, #255	@ 0xff
 80017b8:	d802      	bhi.n	80017c0 <HAL_GPIO_Init+0x14c>
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	e002      	b.n	80017c6 <HAL_GPIO_Init+0x152>
 80017c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c2:	3b08      	subs	r3, #8
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	210f      	movs	r1, #15
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	401a      	ands	r2, r3
 80017d8:	6a39      	ldr	r1, [r7, #32]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 80b1 	beq.w	8001956 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f4:	4b4d      	ldr	r3, [pc, #308]	@ (800192c <HAL_GPIO_Init+0x2b8>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a4c      	ldr	r2, [pc, #304]	@ (800192c <HAL_GPIO_Init+0x2b8>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b4a      	ldr	r3, [pc, #296]	@ (800192c <HAL_GPIO_Init+0x2b8>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800180c:	4a48      	ldr	r2, [pc, #288]	@ (8001930 <HAL_GPIO_Init+0x2bc>)
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001818:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a40      	ldr	r2, [pc, #256]	@ (8001934 <HAL_GPIO_Init+0x2c0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d013      	beq.n	8001860 <HAL_GPIO_Init+0x1ec>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3f      	ldr	r2, [pc, #252]	@ (8001938 <HAL_GPIO_Init+0x2c4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00d      	beq.n	800185c <HAL_GPIO_Init+0x1e8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3e      	ldr	r2, [pc, #248]	@ (800193c <HAL_GPIO_Init+0x2c8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x1e4>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3d      	ldr	r2, [pc, #244]	@ (8001940 <HAL_GPIO_Init+0x2cc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_Init+0x1e0>
 8001850:	2303      	movs	r3, #3
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001854:	2304      	movs	r3, #4
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001860:	2300      	movs	r3, #0
 8001862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001872:	492f      	ldr	r1, [pc, #188]	@ (8001930 <HAL_GPIO_Init+0x2bc>)
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800188c:	4b2d      	ldr	r3, [pc, #180]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	492c      	ldr	r1, [pc, #176]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800189a:	4b2a      	ldr	r3, [pc, #168]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4928      	ldr	r1, [pc, #160]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b4:	4b23      	ldr	r3, [pc, #140]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	4922      	ldr	r1, [pc, #136]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	60cb      	str	r3, [r1, #12]
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018c2:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	491e      	ldr	r1, [pc, #120]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018dc:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	4918      	ldr	r1, [pc, #96]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ea:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	4914      	ldr	r1, [pc, #80]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d021      	beq.n	8001948 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	490e      	ldr	r1, [pc, #56]	@ (8001944 <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
 8001910:	e021      	b.n	8001956 <HAL_GPIO_Init+0x2e2>
 8001912:	bf00      	nop
 8001914:	10320000 	.word	0x10320000
 8001918:	10310000 	.word	0x10310000
 800191c:	10220000 	.word	0x10220000
 8001920:	10210000 	.word	0x10210000
 8001924:	10120000 	.word	0x10120000
 8001928:	10110000 	.word	0x10110000
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00
 800193c:	40011000 	.word	0x40011000
 8001940:	40011400 	.word	0x40011400
 8001944:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_GPIO_Init+0x304>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	43db      	mvns	r3, r3
 8001950:	4909      	ldr	r1, [pc, #36]	@ (8001978 <HAL_GPIO_Init+0x304>)
 8001952:	4013      	ands	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001958:	3301      	adds	r3, #1
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	f47f ae8e 	bne.w	8001688 <HAL_GPIO_Init+0x14>
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	372c      	adds	r7, #44	@ 0x2c
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001998:	e003      	b.n	80019a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	041a      	lsls	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	611a      	str	r2, [r3, #16]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019be:	887a      	ldrh	r2, [r7, #2]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4013      	ands	r3, r2
 80019c4:	041a      	lsls	r2, r3, #16
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43d9      	mvns	r1, r3
 80019ca:	887b      	ldrh	r3, [r7, #2]
 80019cc:	400b      	ands	r3, r1
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	611a      	str	r2, [r3, #16]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e272      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8087 	beq.w	8001b0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a00:	4b92      	ldr	r3, [pc, #584]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d00c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a0c:	4b8f      	ldr	r3, [pc, #572]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d112      	bne.n	8001a3e <HAL_RCC_OscConfig+0x5e>
 8001a18:	4b8c      	ldr	r3, [pc, #560]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a24:	d10b      	bne.n	8001a3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a26:	4b89      	ldr	r3, [pc, #548]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d06c      	beq.n	8001b0c <HAL_RCC_OscConfig+0x12c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d168      	bne.n	8001b0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e24c      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x76>
 8001a48:	4b80      	ldr	r3, [pc, #512]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a7f      	ldr	r2, [pc, #508]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e02e      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x98>
 8001a5e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a7a      	ldr	r2, [pc, #488]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b78      	ldr	r3, [pc, #480]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a77      	ldr	r2, [pc, #476]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e01d      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0xbc>
 8001a82:	4b72      	ldr	r3, [pc, #456]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a71      	ldr	r2, [pc, #452]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6e      	ldr	r2, [pc, #440]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a9c:	4b6b      	ldr	r3, [pc, #428]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a6a      	ldr	r2, [pc, #424]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b68      	ldr	r3, [pc, #416]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a67      	ldr	r2, [pc, #412]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d013      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7fe feb0 	bl	8000820 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7fe feac 	bl	8000820 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	@ 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e200      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xe4>
 8001ae2:	e014      	b.n	8001b0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7fe fe9c 	bl	8000820 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aec:	f7fe fe98 	bl	8000820 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	@ 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e1ec      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	4b53      	ldr	r3, [pc, #332]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x10c>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d063      	beq.n	8001be2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b1a:	4b4c      	ldr	r3, [pc, #304]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b26:	4b49      	ldr	r3, [pc, #292]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d11c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x18c>
 8001b32:	4b46      	ldr	r3, [pc, #280]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d116      	bne.n	8001b6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	4b43      	ldr	r3, [pc, #268]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <HAL_RCC_OscConfig+0x176>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e1c0      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4b3d      	ldr	r3, [pc, #244]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4939      	ldr	r1, [pc, #228]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	e03a      	b.n	8001be2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d020      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b74:	4b36      	ldr	r3, [pc, #216]	@ (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7fe fe51 	bl	8000820 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b82:	f7fe fe4d 	bl	8000820 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1a1      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b94:	4b2d      	ldr	r3, [pc, #180]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4927      	ldr	r1, [pc, #156]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
 8001bb4:	e015      	b.n	8001be2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb6:	4b26      	ldr	r3, [pc, #152]	@ (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7fe fe30 	bl	8000820 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc4:	f7fe fe2c 	bl	8000820 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e180      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d03a      	beq.n	8001c64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d019      	beq.n	8001c2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf6:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfc:	f7fe fe10 	bl	8000820 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c04:	f7fe fe0c 	bl	8000820 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e160      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c16:	4b0d      	ldr	r3, [pc, #52]	@ (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f000 faea 	bl	80021fc <RCC_Delay>
 8001c28:	e01c      	b.n	8001c64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <HAL_RCC_OscConfig+0x274>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c30:	f7fe fdf6 	bl	8000820 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c36:	e00f      	b.n	8001c58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c38:	f7fe fdf2 	bl	8000820 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d908      	bls.n	8001c58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e146      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	42420000 	.word	0x42420000
 8001c54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c58:	4b92      	ldr	r3, [pc, #584]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e9      	bne.n	8001c38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80a6 	beq.w	8001dbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c76:	4b8b      	ldr	r3, [pc, #556]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	4b88      	ldr	r3, [pc, #544]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4a87      	ldr	r2, [pc, #540]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c8c:	61d3      	str	r3, [r2, #28]
 8001c8e:	4b85      	ldr	r3, [pc, #532]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	4b82      	ldr	r3, [pc, #520]	@ (8001ea8 <HAL_RCC_OscConfig+0x4c8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea8 <HAL_RCC_OscConfig+0x4c8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a7e      	ldr	r2, [pc, #504]	@ (8001ea8 <HAL_RCC_OscConfig+0x4c8>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7fe fdb3 	bl	8000820 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7fe fdaf 	bl	8000820 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b64      	cmp	r3, #100	@ 0x64
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e103      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b75      	ldr	r3, [pc, #468]	@ (8001ea8 <HAL_RCC_OscConfig+0x4c8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x312>
 8001ce4:	4b6f      	ldr	r3, [pc, #444]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a6e      	ldr	r2, [pc, #440]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	e02d      	b.n	8001d4e <HAL_RCC_OscConfig+0x36e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x334>
 8001cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a69      	ldr	r2, [pc, #420]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	4b67      	ldr	r3, [pc, #412]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a66      	ldr	r2, [pc, #408]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	6213      	str	r3, [r2, #32]
 8001d12:	e01c      	b.n	8001d4e <HAL_RCC_OscConfig+0x36e>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d10c      	bne.n	8001d36 <HAL_RCC_OscConfig+0x356>
 8001d1c:	4b61      	ldr	r3, [pc, #388]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a60      	ldr	r2, [pc, #384]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	4b5e      	ldr	r3, [pc, #376]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6213      	str	r3, [r2, #32]
 8001d34:	e00b      	b.n	8001d4e <HAL_RCC_OscConfig+0x36e>
 8001d36:	4b5b      	ldr	r3, [pc, #364]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6213      	str	r3, [r2, #32]
 8001d42:	4b58      	ldr	r3, [pc, #352]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4a57      	ldr	r2, [pc, #348]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d015      	beq.n	8001d82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d56:	f7fe fd63 	bl	8000820 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7fe fd5f 	bl	8000820 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0b1      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	4b4b      	ldr	r3, [pc, #300]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ee      	beq.n	8001d5e <HAL_RCC_OscConfig+0x37e>
 8001d80:	e014      	b.n	8001dac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7fe fd4d 	bl	8000820 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7fe fd49 	bl	8000820 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e09b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	4b40      	ldr	r3, [pc, #256]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ee      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8087 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc8:	4b36      	ldr	r3, [pc, #216]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d061      	beq.n	8001e98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d146      	bne.n	8001e6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ddc:	4b33      	ldr	r3, [pc, #204]	@ (8001eac <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7fe fd1d 	bl	8000820 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dea:	f7fe fd19 	bl	8000820 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e06d      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfc:	4b29      	ldr	r3, [pc, #164]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f0      	bne.n	8001dea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e10:	d108      	bne.n	8001e24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e12:	4b24      	ldr	r3, [pc, #144]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4921      	ldr	r1, [pc, #132]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a19      	ldr	r1, [r3, #32]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	430b      	orrs	r3, r1
 8001e36:	491b      	ldr	r1, [pc, #108]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <HAL_RCC_OscConfig+0x4cc>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7fe fced 	bl	8000820 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7fe fce9 	bl	8000820 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e03d      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x46a>
 8001e68:	e035      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <HAL_RCC_OscConfig+0x4cc>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7fe fcd6 	bl	8000820 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7fe fcd2 	bl	8000820 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e026      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x498>
 8001e96:	e01e      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e019      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_RCC_OscConfig+0x500>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0d0      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b6a      	ldr	r3, [pc, #424]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d910      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b67      	ldr	r3, [pc, #412]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 0207 	bic.w	r2, r3, #7
 8001f0e:	4965      	ldr	r1, [pc, #404]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b63      	ldr	r3, [pc, #396]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0b8      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f40:	4b59      	ldr	r3, [pc, #356]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4a58      	ldr	r2, [pc, #352]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f58:	4b53      	ldr	r3, [pc, #332]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4a52      	ldr	r2, [pc, #328]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b50      	ldr	r3, [pc, #320]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	494d      	ldr	r1, [pc, #308]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d040      	beq.n	8002004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b47      	ldr	r3, [pc, #284]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d115      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e07f      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa2:	4b41      	ldr	r3, [pc, #260]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d109      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e073      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e06b      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc2:	4b39      	ldr	r3, [pc, #228]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f023 0203 	bic.w	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4936      	ldr	r1, [pc, #216]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd4:	f7fe fc24 	bl	8000820 <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fdc:	f7fe fc20 	bl	8000820 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e053      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 020c 	and.w	r2, r3, #12
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	429a      	cmp	r2, r3
 8002002:	d1eb      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002004:	4b27      	ldr	r3, [pc, #156]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d210      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b24      	ldr	r3, [pc, #144]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 0207 	bic.w	r2, r3, #7
 800201a:	4922      	ldr	r1, [pc, #136]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e032      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002040:	4b19      	ldr	r3, [pc, #100]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4916      	ldr	r1, [pc, #88]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800205e:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	490e      	ldr	r1, [pc, #56]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002072:	f000 f821 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002076:	4602      	mov	r2, r0
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	490a      	ldr	r1, [pc, #40]	@ (80020ac <HAL_RCC_ClockConfig+0x1c8>)
 8002084:	5ccb      	ldrb	r3, [r1, r3]
 8002086:	fa22 f303 	lsr.w	r3, r2, r3
 800208a:	4a09      	ldr	r2, [pc, #36]	@ (80020b0 <HAL_RCC_ClockConfig+0x1cc>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800208e:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fac4 	bl	8000620 <HAL_InitTick>

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40022000 	.word	0x40022000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08003d20 	.word	0x08003d20
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000004 	.word	0x20000004

080020b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020d2:	4b1e      	ldr	r3, [pc, #120]	@ (800214c <HAL_RCC_GetSysClockFreq+0x94>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d002      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x30>
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x36>
 80020e6:	e027      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e8:	4b19      	ldr	r3, [pc, #100]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ea:	613b      	str	r3, [r7, #16]
      break;
 80020ec:	e027      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	0c9b      	lsrs	r3, r3, #18
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	4a17      	ldr	r2, [pc, #92]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020f8:	5cd3      	ldrb	r3, [r2, r3]
 80020fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d010      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <HAL_RCC_GetSysClockFreq+0x94>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	0c5b      	lsrs	r3, r3, #17
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	4a11      	ldr	r2, [pc, #68]	@ (8002158 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 800211a:	fb03 f202 	mul.w	r2, r3, r2
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e004      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a0c      	ldr	r2, [pc, #48]	@ (800215c <HAL_RCC_GetSysClockFreq+0xa4>)
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	613b      	str	r3, [r7, #16]
      break;
 8002136:	e002      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002138:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 800213a:	613b      	str	r3, [r7, #16]
      break;
 800213c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800213e:	693b      	ldr	r3, [r7, #16]
}
 8002140:	4618      	mov	r0, r3
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	007a1200 	.word	0x007a1200
 8002154:	08003d38 	.word	0x08003d38
 8002158:	08003d48 	.word	0x08003d48
 800215c:	003d0900 	.word	0x003d0900

08002160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002164:	4b02      	ldr	r3, [pc, #8]	@ (8002170 <HAL_RCC_GetHCLKFreq+0x10>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	20000000 	.word	0x20000000

08002174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002178:	f7ff fff2 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4903      	ldr	r1, [pc, #12]	@ (8002198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	08003d30 	.word	0x08003d30

0800219c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	220f      	movs	r2, #15
 80021aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021ac:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <HAL_RCC_GetClockConfig+0x58>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0203 	and.w	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021b8:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <HAL_RCC_GetClockConfig+0x58>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021c4:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <HAL_RCC_GetClockConfig+0x58>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021d0:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <HAL_RCC_GetClockConfig+0x58>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	08db      	lsrs	r3, r3, #3
 80021d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_RCC_GetClockConfig+0x5c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0207 	and.w	r2, r3, #7
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40022000 	.word	0x40022000

080021fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002204:	4b0a      	ldr	r3, [pc, #40]	@ (8002230 <RCC_Delay+0x34>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <RCC_Delay+0x38>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002218:	bf00      	nop
  }
  while (Delay --);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	60fa      	str	r2, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f9      	bne.n	8002218 <RCC_Delay+0x1c>
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	20000000 	.word	0x20000000
 8002234:	10624dd3 	.word	0x10624dd3

08002238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e041      	b.n	80022ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f839 	bl	80022d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f000 f99c 	bl	80025b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d001      	beq.n	8002300 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e03a      	b.n	8002376 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a18      	ldr	r2, [pc, #96]	@ (8002380 <HAL_TIM_Base_Start_IT+0x98>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00e      	beq.n	8002340 <HAL_TIM_Base_Start_IT+0x58>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800232a:	d009      	beq.n	8002340 <HAL_TIM_Base_Start_IT+0x58>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a14      	ldr	r2, [pc, #80]	@ (8002384 <HAL_TIM_Base_Start_IT+0x9c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d004      	beq.n	8002340 <HAL_TIM_Base_Start_IT+0x58>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a13      	ldr	r2, [pc, #76]	@ (8002388 <HAL_TIM_Base_Start_IT+0xa0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d111      	bne.n	8002364 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b06      	cmp	r3, #6
 8002350:	d010      	beq.n	8002374 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0201 	orr.w	r2, r2, #1
 8002360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002362:	e007      	b.n	8002374 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	40012c00 	.word	0x40012c00
 8002384:	40000400 	.word	0x40000400
 8002388:	40000800 	.word	0x40000800

0800238c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d020      	beq.n	80023f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01b      	beq.n	80023f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0202 	mvn.w	r2, #2
 80023c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f8d1 	bl	800257e <HAL_TIM_IC_CaptureCallback>
 80023dc:	e005      	b.n	80023ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f8c4 	bl	800256c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f8d3 	bl	8002590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d020      	beq.n	800243c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0204 	mvn.w	r2, #4
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2202      	movs	r2, #2
 8002412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f8ab 	bl	800257e <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f89e 	bl	800256c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f8ad 	bl	8002590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d020      	beq.n	8002488 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01b      	beq.n	8002488 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0208 	mvn.w	r2, #8
 8002458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2204      	movs	r2, #4
 800245e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f885 	bl	800257e <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f878 	bl	800256c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f887 	bl	8002590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	2b00      	cmp	r3, #0
 8002490:	d020      	beq.n	80024d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01b      	beq.n	80024d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0210 	mvn.w	r2, #16
 80024a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2208      	movs	r2, #8
 80024aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f85f 	bl	800257e <HAL_TIM_IC_CaptureCallback>
 80024c0:	e005      	b.n	80024ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f852 	bl	800256c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f861 	bl	8002590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00c      	beq.n	80024f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0201 	mvn.w	r2, #1
 80024f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe f844 	bl	8000580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00c      	beq.n	800251c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f8c3 	bl	80026a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00c      	beq.n	8002540 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f831 	bl	80025a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00c      	beq.n	8002564 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0220 	mvn.w	r2, #32
 800255c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f896 	bl	8002690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002684 <TIM_Base_SetConfig+0xd0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00b      	beq.n	80025e4 <TIM_Base_SetConfig+0x30>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d2:	d007      	beq.n	80025e4 <TIM_Base_SetConfig+0x30>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a2c      	ldr	r2, [pc, #176]	@ (8002688 <TIM_Base_SetConfig+0xd4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d003      	beq.n	80025e4 <TIM_Base_SetConfig+0x30>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a2b      	ldr	r2, [pc, #172]	@ (800268c <TIM_Base_SetConfig+0xd8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d108      	bne.n	80025f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a22      	ldr	r2, [pc, #136]	@ (8002684 <TIM_Base_SetConfig+0xd0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00b      	beq.n	8002616 <TIM_Base_SetConfig+0x62>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002604:	d007      	beq.n	8002616 <TIM_Base_SetConfig+0x62>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a1f      	ldr	r2, [pc, #124]	@ (8002688 <TIM_Base_SetConfig+0xd4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d003      	beq.n	8002616 <TIM_Base_SetConfig+0x62>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a1e      	ldr	r2, [pc, #120]	@ (800268c <TIM_Base_SetConfig+0xd8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d108      	bne.n	8002628 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800261c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a0d      	ldr	r2, [pc, #52]	@ (8002684 <TIM_Base_SetConfig+0xd0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d103      	bne.n	800265c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f023 0201 	bic.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	611a      	str	r2, [r3, #16]
  }
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800

08002690 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80026c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c6:	2b84      	cmp	r3, #132	@ 0x84
 80026c8:	d005      	beq.n	80026d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80026ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4413      	add	r3, r2
 80026d2:	3303      	adds	r3, #3
 80026d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80026d6:	68fb      	ldr	r3, [r7, #12]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80026e6:	f000 faf7 	bl	8002cd8 <vTaskStartScheduler>
  
  return osOK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	b089      	sub	sp, #36	@ 0x24
 80026f4:	af04      	add	r7, sp, #16
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d020      	beq.n	8002744 <osThreadCreate+0x54>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01c      	beq.n	8002744 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685c      	ldr	r4, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691e      	ldr	r6, [r3, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ffc9 	bl	80026b4 <makeFreeRtosPriority>
 8002722:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800272c:	9202      	str	r2, [sp, #8]
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	9100      	str	r1, [sp, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	4632      	mov	r2, r6
 8002736:	4629      	mov	r1, r5
 8002738:	4620      	mov	r0, r4
 800273a:	f000 f8e8 	bl	800290e <xTaskCreateStatic>
 800273e:	4603      	mov	r3, r0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	e01c      	b.n	800277e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685c      	ldr	r4, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002750:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ffab 	bl	80026b4 <makeFreeRtosPriority>
 800275e:	4602      	mov	r2, r0
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	9200      	str	r2, [sp, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4632      	mov	r2, r6
 800276c:	4629      	mov	r1, r5
 800276e:	4620      	mov	r0, r4
 8002770:	f000 f92d 	bl	80029ce <xTaskCreate>
 8002774:	4603      	mov	r3, r0
 8002776:	2b01      	cmp	r3, #1
 8002778:	d001      	beq.n	800277e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002788 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <osDelay+0x16>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	e000      	b.n	80027a0 <osDelay+0x18>
 800279e:	2301      	movs	r3, #1
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fa63 	bl	8002c6c <vTaskDelay>
  
  return osOK;
 80027a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f103 0208 	add.w	r2, r3, #8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f04f 32ff 	mov.w	r2, #4294967295
 80027c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f103 0208 	add.w	r2, r3, #8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f103 0208 	add.w	r2, r3, #8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002806:	b480      	push	{r7}
 8002808:	b085      	sub	sp, #20
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	601a      	str	r2, [r3, #0]
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002862:	d103      	bne.n	800286c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	e00c      	b.n	8002886 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3308      	adds	r3, #8
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	e002      	b.n	800287a <vListInsert+0x2e>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	429a      	cmp	r2, r3
 8002884:	d2f6      	bcs.n	8002874 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6892      	ldr	r2, [r2, #8]
 80028d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6852      	ldr	r2, [r2, #4]
 80028dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d103      	bne.n	80028f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	1e5a      	subs	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr

0800290e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800290e:	b580      	push	{r7, lr}
 8002910:	b08e      	sub	sp, #56	@ 0x38
 8002912:	af04      	add	r7, sp, #16
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800291c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10b      	bne.n	800293a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	e7fd      	b.n	8002936 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800293a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	61fb      	str	r3, [r7, #28]
}
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	e7fd      	b.n	8002954 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002958:	23a0      	movs	r3, #160	@ 0xa0
 800295a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002960:	d00b      	beq.n	800297a <xTaskCreateStatic+0x6c>
	__asm volatile
 8002962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	61bb      	str	r3, [r7, #24]
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	e7fd      	b.n	8002976 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800297a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800297c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01e      	beq.n	80029c0 <xTaskCreateStatic+0xb2>
 8002982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01b      	beq.n	80029c0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002990:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	2202      	movs	r2, #2
 8002996:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800299a:	2300      	movs	r3, #0
 800299c:	9303      	str	r3, [sp, #12]
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	9302      	str	r3, [sp, #8]
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f850 	bl	8002a58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029ba:	f000 f8ed 	bl	8002b98 <prvAddNewTaskToReadyList>
 80029be:	e001      	b.n	80029c4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029c4:	697b      	ldr	r3, [r7, #20]
	}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3728      	adds	r7, #40	@ 0x28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b08c      	sub	sp, #48	@ 0x30
 80029d2:	af04      	add	r7, sp, #16
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	4613      	mov	r3, r2
 80029dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fe9c 	bl	8003720 <pvPortMalloc>
 80029e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00e      	beq.n	8002a0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029f0:	20a0      	movs	r0, #160	@ 0xa0
 80029f2:	f000 fe95 	bl	8003720 <pvPortMalloc>
 80029f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a04:	e005      	b.n	8002a12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a06:	6978      	ldr	r0, [r7, #20]
 8002a08:	f000 ff58 	bl	80038bc <vPortFree>
 8002a0c:	e001      	b.n	8002a12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d017      	beq.n	8002a48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a20:	88fa      	ldrh	r2, [r7, #6]
 8002a22:	2300      	movs	r3, #0
 8002a24:	9303      	str	r3, [sp, #12]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	9302      	str	r3, [sp, #8]
 8002a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2c:	9301      	str	r3, [sp, #4]
 8002a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f80e 	bl	8002a58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a3c:	69f8      	ldr	r0, [r7, #28]
 8002a3e:	f000 f8ab 	bl	8002b98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61bb      	str	r3, [r7, #24]
 8002a46:	e002      	b.n	8002a4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a48:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a4e:	69bb      	ldr	r3, [r7, #24]
	}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3720      	adds	r7, #32
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a70:	3b01      	subs	r3, #1
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	f023 0307 	bic.w	r3, r3, #7
 8002a7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	617b      	str	r3, [r7, #20]
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	e7fd      	b.n	8002a9e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d01f      	beq.n	8002ae8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
 8002aac:	e012      	b.n	8002ad4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	7819      	ldrb	r1, [r3, #0]
 8002ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	4413      	add	r3, r2
 8002abc:	3334      	adds	r3, #52	@ 0x34
 8002abe:	460a      	mov	r2, r1
 8002ac0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	2b0f      	cmp	r3, #15
 8002ad8:	d9e9      	bls.n	8002aae <prvInitialiseNewTask+0x56>
 8002ada:	e000      	b.n	8002ade <prvInitialiseNewTask+0x86>
			{
				break;
 8002adc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ae6:	e003      	b.n	8002af0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d901      	bls.n	8002afa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002af6:	2306      	movs	r3, #6
 8002af8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002afe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b04:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b08:	2200      	movs	r2, #0
 8002b0a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0e:	3304      	adds	r3, #4
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fe6c 	bl	80027ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b18:	3318      	adds	r3, #24
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fe67 	bl	80027ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b28:	f1c3 0207 	rsb	r2, r3, #7
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b34:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b48:	334c      	adds	r3, #76	@ 0x4c
 8002b4a:	224c      	movs	r2, #76	@ 0x4c
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 ffd2 	bl	8003af8 <memset>
 8002b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b56:	4a0d      	ldr	r2, [pc, #52]	@ (8002b8c <prvInitialiseNewTask+0x134>)
 8002b58:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b90 <prvInitialiseNewTask+0x138>)
 8002b5e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	4a0c      	ldr	r2, [pc, #48]	@ (8002b94 <prvInitialiseNewTask+0x13c>)
 8002b64:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	68f9      	ldr	r1, [r7, #12]
 8002b6a:	69b8      	ldr	r0, [r7, #24]
 8002b6c:	f000 fc28 	bl	80033c0 <pxPortInitialiseStack>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b82:	bf00      	nop
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20001154 	.word	0x20001154
 8002b90:	200011bc 	.word	0x200011bc
 8002b94:	20001224 	.word	0x20001224

08002b98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ba0:	f000 fcfc 	bl	800359c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c50 <prvAddNewTaskToReadyList+0xb8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	4a29      	ldr	r2, [pc, #164]	@ (8002c50 <prvAddNewTaskToReadyList+0xb8>)
 8002bac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bae:	4b29      	ldr	r3, [pc, #164]	@ (8002c54 <prvAddNewTaskToReadyList+0xbc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002bb6:	4a27      	ldr	r2, [pc, #156]	@ (8002c54 <prvAddNewTaskToReadyList+0xbc>)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bbc:	4b24      	ldr	r3, [pc, #144]	@ (8002c50 <prvAddNewTaskToReadyList+0xb8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d110      	bne.n	8002be6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bc4:	f000 fad2 	bl	800316c <prvInitialiseTaskLists>
 8002bc8:	e00d      	b.n	8002be6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bca:	4b23      	ldr	r3, [pc, #140]	@ (8002c58 <prvAddNewTaskToReadyList+0xc0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bd2:	4b20      	ldr	r3, [pc, #128]	@ (8002c54 <prvAddNewTaskToReadyList+0xbc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d802      	bhi.n	8002be6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002be0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c54 <prvAddNewTaskToReadyList+0xbc>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002be6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c5c <prvAddNewTaskToReadyList+0xc4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	4a1b      	ldr	r2, [pc, #108]	@ (8002c5c <prvAddNewTaskToReadyList+0xc4>)
 8002bee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <prvAddNewTaskToReadyList+0xc8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	4a18      	ldr	r2, [pc, #96]	@ (8002c60 <prvAddNewTaskToReadyList+0xc8>)
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4a15      	ldr	r2, [pc, #84]	@ (8002c64 <prvAddNewTaskToReadyList+0xcc>)
 8002c10:	441a      	add	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3304      	adds	r3, #4
 8002c16:	4619      	mov	r1, r3
 8002c18:	4610      	mov	r0, r2
 8002c1a:	f7ff fdf4 	bl	8002806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c1e:	f000 fced 	bl	80035fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c22:	4b0d      	ldr	r3, [pc, #52]	@ (8002c58 <prvAddNewTaskToReadyList+0xc0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00e      	beq.n	8002c48 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <prvAddNewTaskToReadyList+0xbc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d207      	bcs.n	8002c48 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c38:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <prvAddNewTaskToReadyList+0xd0>)
 8002c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000500 	.word	0x20000500
 8002c54:	20000400 	.word	0x20000400
 8002c58:	2000050c 	.word	0x2000050c
 8002c5c:	2000051c 	.word	0x2000051c
 8002c60:	20000508 	.word	0x20000508
 8002c64:	20000404 	.word	0x20000404
 8002c68:	e000ed04 	.word	0xe000ed04

08002c6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d018      	beq.n	8002cb0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c7e:	4b14      	ldr	r3, [pc, #80]	@ (8002cd0 <vTaskDelay+0x64>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <vTaskDelay+0x32>
	__asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	60bb      	str	r3, [r7, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	e7fd      	b.n	8002c9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c9e:	f000 f885 	bl	8002dac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fb25 	bl	80032f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002caa:	f000 f88d 	bl	8002dc8 <xTaskResumeAll>
 8002cae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d107      	bne.n	8002cc6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002cb6:	4b07      	ldr	r3, [pc, #28]	@ (8002cd4 <vTaskDelay+0x68>)
 8002cb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000528 	.word	0x20000528
 8002cd4:	e000ed04 	.word	0xe000ed04

08002cd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	@ 0x28
 8002cdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ce6:	463a      	mov	r2, r7
 8002ce8:	1d39      	adds	r1, r7, #4
 8002cea:	f107 0308 	add.w	r3, r7, #8
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fab8 	bl	8000264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002cf4:	6839      	ldr	r1, [r7, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	9202      	str	r2, [sp, #8]
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	2300      	movs	r3, #0
 8002d04:	460a      	mov	r2, r1
 8002d06:	4921      	ldr	r1, [pc, #132]	@ (8002d8c <vTaskStartScheduler+0xb4>)
 8002d08:	4821      	ldr	r0, [pc, #132]	@ (8002d90 <vTaskStartScheduler+0xb8>)
 8002d0a:	f7ff fe00 	bl	800290e <xTaskCreateStatic>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4a20      	ldr	r2, [pc, #128]	@ (8002d94 <vTaskStartScheduler+0xbc>)
 8002d12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d14:	4b1f      	ldr	r3, [pc, #124]	@ (8002d94 <vTaskStartScheduler+0xbc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e001      	b.n	8002d26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d11b      	bne.n	8002d64 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	613b      	str	r3, [r7, #16]
}
 8002d3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002d40:	4b15      	ldr	r3, [pc, #84]	@ (8002d98 <vTaskStartScheduler+0xc0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	334c      	adds	r3, #76	@ 0x4c
 8002d46:	4a15      	ldr	r2, [pc, #84]	@ (8002d9c <vTaskStartScheduler+0xc4>)
 8002d48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d4a:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <vTaskStartScheduler+0xc8>)
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d52:	4b14      	ldr	r3, [pc, #80]	@ (8002da4 <vTaskStartScheduler+0xcc>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d58:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <vTaskStartScheduler+0xd0>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d5e:	f000 fbab 	bl	80034b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d62:	e00f      	b.n	8002d84 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d10b      	bne.n	8002d84 <vTaskStartScheduler+0xac>
	__asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	60fb      	str	r3, [r7, #12]
}
 8002d7e:	bf00      	nop
 8002d80:	bf00      	nop
 8002d82:	e7fd      	b.n	8002d80 <vTaskStartScheduler+0xa8>
}
 8002d84:	bf00      	nop
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	08003d18 	.word	0x08003d18
 8002d90:	0800313d 	.word	0x0800313d
 8002d94:	20000524 	.word	0x20000524
 8002d98:	20000400 	.word	0x20000400
 8002d9c:	20000010 	.word	0x20000010
 8002da0:	20000520 	.word	0x20000520
 8002da4:	2000050c 	.word	0x2000050c
 8002da8:	20000504 	.word	0x20000504

08002dac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002db0:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <vTaskSuspendAll+0x18>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	4a03      	ldr	r2, [pc, #12]	@ (8002dc4 <vTaskSuspendAll+0x18>)
 8002db8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002dba:	bf00      	nop
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000528 	.word	0x20000528

08002dc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002dd6:	4b42      	ldr	r3, [pc, #264]	@ (8002ee0 <xTaskResumeAll+0x118>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10b      	bne.n	8002df6 <xTaskResumeAll+0x2e>
	__asm volatile
 8002dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	603b      	str	r3, [r7, #0]
}
 8002df0:	bf00      	nop
 8002df2:	bf00      	nop
 8002df4:	e7fd      	b.n	8002df2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002df6:	f000 fbd1 	bl	800359c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002dfa:	4b39      	ldr	r3, [pc, #228]	@ (8002ee0 <xTaskResumeAll+0x118>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	4a37      	ldr	r2, [pc, #220]	@ (8002ee0 <xTaskResumeAll+0x118>)
 8002e02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e04:	4b36      	ldr	r3, [pc, #216]	@ (8002ee0 <xTaskResumeAll+0x118>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d161      	bne.n	8002ed0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e0c:	4b35      	ldr	r3, [pc, #212]	@ (8002ee4 <xTaskResumeAll+0x11c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d05d      	beq.n	8002ed0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e14:	e02e      	b.n	8002e74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e16:	4b34      	ldr	r3, [pc, #208]	@ (8002ee8 <xTaskResumeAll+0x120>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3318      	adds	r3, #24
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fd4a 	bl	80028bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fd45 	bl	80028bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e36:	2201      	movs	r2, #1
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8002eec <xTaskResumeAll+0x124>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	4a2a      	ldr	r2, [pc, #168]	@ (8002eec <xTaskResumeAll+0x124>)
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4a27      	ldr	r2, [pc, #156]	@ (8002ef0 <xTaskResumeAll+0x128>)
 8002e52:	441a      	add	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f7ff fcd3 	bl	8002806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e64:	4b23      	ldr	r3, [pc, #140]	@ (8002ef4 <xTaskResumeAll+0x12c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d302      	bcc.n	8002e74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e6e:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <xTaskResumeAll+0x130>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e74:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee8 <xTaskResumeAll+0x120>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1cc      	bne.n	8002e16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e82:	f000 fa17 	bl	80032b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e86:	4b1d      	ldr	r3, [pc, #116]	@ (8002efc <xTaskResumeAll+0x134>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d010      	beq.n	8002eb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e92:	f000 f837 	bl	8002f04 <xTaskIncrementTick>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002e9c:	4b16      	ldr	r3, [pc, #88]	@ (8002ef8 <xTaskResumeAll+0x130>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f1      	bne.n	8002e92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002eae:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <xTaskResumeAll+0x134>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002eb4:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <xTaskResumeAll+0x130>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d009      	beq.n	8002ed0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <xTaskResumeAll+0x138>)
 8002ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ed0:	f000 fb94 	bl	80035fc <vPortExitCritical>

	return xAlreadyYielded;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000528 	.word	0x20000528
 8002ee4:	20000500 	.word	0x20000500
 8002ee8:	200004c0 	.word	0x200004c0
 8002eec:	20000508 	.word	0x20000508
 8002ef0:	20000404 	.word	0x20000404
 8002ef4:	20000400 	.word	0x20000400
 8002ef8:	20000514 	.word	0x20000514
 8002efc:	20000510 	.word	0x20000510
 8002f00:	e000ed04 	.word	0xe000ed04

08002f04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f0e:	4b4f      	ldr	r3, [pc, #316]	@ (800304c <xTaskIncrementTick+0x148>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 808f 	bne.w	8003036 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f18:	4b4d      	ldr	r3, [pc, #308]	@ (8003050 <xTaskIncrementTick+0x14c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f20:	4a4b      	ldr	r2, [pc, #300]	@ (8003050 <xTaskIncrementTick+0x14c>)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d121      	bne.n	8002f70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f2c:	4b49      	ldr	r3, [pc, #292]	@ (8003054 <xTaskIncrementTick+0x150>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	603b      	str	r3, [r7, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	e7fd      	b.n	8002f4a <xTaskIncrementTick+0x46>
 8002f4e:	4b41      	ldr	r3, [pc, #260]	@ (8003054 <xTaskIncrementTick+0x150>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	4b40      	ldr	r3, [pc, #256]	@ (8003058 <xTaskIncrementTick+0x154>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a3e      	ldr	r2, [pc, #248]	@ (8003054 <xTaskIncrementTick+0x150>)
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4a3e      	ldr	r2, [pc, #248]	@ (8003058 <xTaskIncrementTick+0x154>)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b3e      	ldr	r3, [pc, #248]	@ (800305c <xTaskIncrementTick+0x158>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	4a3c      	ldr	r2, [pc, #240]	@ (800305c <xTaskIncrementTick+0x158>)
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	f000 f9a2 	bl	80032b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f70:	4b3b      	ldr	r3, [pc, #236]	@ (8003060 <xTaskIncrementTick+0x15c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d348      	bcc.n	800300c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f7a:	4b36      	ldr	r3, [pc, #216]	@ (8003054 <xTaskIncrementTick+0x150>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d104      	bne.n	8002f8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f84:	4b36      	ldr	r3, [pc, #216]	@ (8003060 <xTaskIncrementTick+0x15c>)
 8002f86:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8a:	601a      	str	r2, [r3, #0]
					break;
 8002f8c:	e03e      	b.n	800300c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f8e:	4b31      	ldr	r3, [pc, #196]	@ (8003054 <xTaskIncrementTick+0x150>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d203      	bcs.n	8002fae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002fa6:	4a2e      	ldr	r2, [pc, #184]	@ (8003060 <xTaskIncrementTick+0x15c>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002fac:	e02e      	b.n	800300c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fc82 	bl	80028bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d004      	beq.n	8002fca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	3318      	adds	r3, #24
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fc79 	bl	80028bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fce:	2201      	movs	r2, #1
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	4b24      	ldr	r3, [pc, #144]	@ (8003064 <xTaskIncrementTick+0x160>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	4a22      	ldr	r2, [pc, #136]	@ (8003064 <xTaskIncrementTick+0x160>)
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8003068 <xTaskIncrementTick+0x164>)
 8002fea:	441a      	add	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	f7ff fc07 	bl	8002806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800306c <xTaskIncrementTick+0x168>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003002:	429a      	cmp	r2, r3
 8003004:	d3b9      	bcc.n	8002f7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003006:	2301      	movs	r3, #1
 8003008:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800300a:	e7b6      	b.n	8002f7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800300c:	4b17      	ldr	r3, [pc, #92]	@ (800306c <xTaskIncrementTick+0x168>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003012:	4915      	ldr	r1, [pc, #84]	@ (8003068 <xTaskIncrementTick+0x164>)
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d901      	bls.n	8003028 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003024:	2301      	movs	r3, #1
 8003026:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003028:	4b11      	ldr	r3, [pc, #68]	@ (8003070 <xTaskIncrementTick+0x16c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003030:	2301      	movs	r3, #1
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	e004      	b.n	8003040 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003036:	4b0f      	ldr	r3, [pc, #60]	@ (8003074 <xTaskIncrementTick+0x170>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3301      	adds	r3, #1
 800303c:	4a0d      	ldr	r2, [pc, #52]	@ (8003074 <xTaskIncrementTick+0x170>)
 800303e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003040:	697b      	ldr	r3, [r7, #20]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000528 	.word	0x20000528
 8003050:	20000504 	.word	0x20000504
 8003054:	200004b8 	.word	0x200004b8
 8003058:	200004bc 	.word	0x200004bc
 800305c:	20000518 	.word	0x20000518
 8003060:	20000520 	.word	0x20000520
 8003064:	20000508 	.word	0x20000508
 8003068:	20000404 	.word	0x20000404
 800306c:	20000400 	.word	0x20000400
 8003070:	20000514 	.word	0x20000514
 8003074:	20000510 	.word	0x20000510

08003078 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800307e:	4b29      	ldr	r3, [pc, #164]	@ (8003124 <vTaskSwitchContext+0xac>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003086:	4b28      	ldr	r3, [pc, #160]	@ (8003128 <vTaskSwitchContext+0xb0>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800308c:	e045      	b.n	800311a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800308e:	4b26      	ldr	r3, [pc, #152]	@ (8003128 <vTaskSwitchContext+0xb0>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003094:	4b25      	ldr	r3, [pc, #148]	@ (800312c <vTaskSwitchContext+0xb4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	fab3 f383 	clz	r3, r3
 80030a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80030a2:	7afb      	ldrb	r3, [r7, #11]
 80030a4:	f1c3 031f 	rsb	r3, r3, #31
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	4921      	ldr	r1, [pc, #132]	@ (8003130 <vTaskSwitchContext+0xb8>)
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	607b      	str	r3, [r7, #4]
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	e7fd      	b.n	80030d2 <vTaskSwitchContext+0x5a>
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4a13      	ldr	r2, [pc, #76]	@ (8003130 <vTaskSwitchContext+0xb8>)
 80030e2:	4413      	add	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	3308      	adds	r3, #8
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d104      	bne.n	8003106 <vTaskSwitchContext+0x8e>
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4a09      	ldr	r2, [pc, #36]	@ (8003134 <vTaskSwitchContext+0xbc>)
 800310e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003110:	4b08      	ldr	r3, [pc, #32]	@ (8003134 <vTaskSwitchContext+0xbc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	334c      	adds	r3, #76	@ 0x4c
 8003116:	4a08      	ldr	r2, [pc, #32]	@ (8003138 <vTaskSwitchContext+0xc0>)
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	20000528 	.word	0x20000528
 8003128:	20000514 	.word	0x20000514
 800312c:	20000508 	.word	0x20000508
 8003130:	20000404 	.word	0x20000404
 8003134:	20000400 	.word	0x20000400
 8003138:	20000010 	.word	0x20000010

0800313c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003144:	f000 f852 	bl	80031ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003148:	4b06      	ldr	r3, [pc, #24]	@ (8003164 <prvIdleTask+0x28>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d9f9      	bls.n	8003144 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003150:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <prvIdleTask+0x2c>)
 8003152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003160:	e7f0      	b.n	8003144 <prvIdleTask+0x8>
 8003162:	bf00      	nop
 8003164:	20000404 	.word	0x20000404
 8003168:	e000ed04 	.word	0xe000ed04

0800316c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	e00c      	b.n	8003192 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4a12      	ldr	r2, [pc, #72]	@ (80031cc <prvInitialiseTaskLists+0x60>)
 8003184:	4413      	add	r3, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fb12 	bl	80027b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3301      	adds	r3, #1
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b06      	cmp	r3, #6
 8003196:	d9ef      	bls.n	8003178 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003198:	480d      	ldr	r0, [pc, #52]	@ (80031d0 <prvInitialiseTaskLists+0x64>)
 800319a:	f7ff fb09 	bl	80027b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800319e:	480d      	ldr	r0, [pc, #52]	@ (80031d4 <prvInitialiseTaskLists+0x68>)
 80031a0:	f7ff fb06 	bl	80027b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80031a4:	480c      	ldr	r0, [pc, #48]	@ (80031d8 <prvInitialiseTaskLists+0x6c>)
 80031a6:	f7ff fb03 	bl	80027b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80031aa:	480c      	ldr	r0, [pc, #48]	@ (80031dc <prvInitialiseTaskLists+0x70>)
 80031ac:	f7ff fb00 	bl	80027b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80031b0:	480b      	ldr	r0, [pc, #44]	@ (80031e0 <prvInitialiseTaskLists+0x74>)
 80031b2:	f7ff fafd 	bl	80027b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80031b6:	4b0b      	ldr	r3, [pc, #44]	@ (80031e4 <prvInitialiseTaskLists+0x78>)
 80031b8:	4a05      	ldr	r2, [pc, #20]	@ (80031d0 <prvInitialiseTaskLists+0x64>)
 80031ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031bc:	4b0a      	ldr	r3, [pc, #40]	@ (80031e8 <prvInitialiseTaskLists+0x7c>)
 80031be:	4a05      	ldr	r2, [pc, #20]	@ (80031d4 <prvInitialiseTaskLists+0x68>)
 80031c0:	601a      	str	r2, [r3, #0]
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000404 	.word	0x20000404
 80031d0:	20000490 	.word	0x20000490
 80031d4:	200004a4 	.word	0x200004a4
 80031d8:	200004c0 	.word	0x200004c0
 80031dc:	200004d4 	.word	0x200004d4
 80031e0:	200004ec 	.word	0x200004ec
 80031e4:	200004b8 	.word	0x200004b8
 80031e8:	200004bc 	.word	0x200004bc

080031ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031f2:	e019      	b.n	8003228 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031f4:	f000 f9d2 	bl	800359c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f8:	4b10      	ldr	r3, [pc, #64]	@ (800323c <prvCheckTasksWaitingTermination+0x50>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fb59 	bl	80028bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800320a:	4b0d      	ldr	r3, [pc, #52]	@ (8003240 <prvCheckTasksWaitingTermination+0x54>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3b01      	subs	r3, #1
 8003210:	4a0b      	ldr	r2, [pc, #44]	@ (8003240 <prvCheckTasksWaitingTermination+0x54>)
 8003212:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003214:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <prvCheckTasksWaitingTermination+0x58>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3b01      	subs	r3, #1
 800321a:	4a0a      	ldr	r2, [pc, #40]	@ (8003244 <prvCheckTasksWaitingTermination+0x58>)
 800321c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800321e:	f000 f9ed 	bl	80035fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f810 	bl	8003248 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003228:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <prvCheckTasksWaitingTermination+0x58>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e1      	bne.n	80031f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	200004d4 	.word	0x200004d4
 8003240:	20000500 	.word	0x20000500
 8003244:	200004e8 	.word	0x200004e8

08003248 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	334c      	adds	r3, #76	@ 0x4c
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fc57 	bl	8003b08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003260:	2b00      	cmp	r3, #0
 8003262:	d108      	bne.n	8003276 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fb27 	bl	80038bc <vPortFree>
				vPortFree( pxTCB );
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fb24 	bl	80038bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003274:	e019      	b.n	80032aa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800327c:	2b01      	cmp	r3, #1
 800327e:	d103      	bne.n	8003288 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fb1b 	bl	80038bc <vPortFree>
	}
 8003286:	e010      	b.n	80032aa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800328e:	2b02      	cmp	r3, #2
 8003290:	d00b      	beq.n	80032aa <prvDeleteTCB+0x62>
	__asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	60fb      	str	r3, [r7, #12]
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	e7fd      	b.n	80032a6 <prvDeleteTCB+0x5e>
	}
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032ba:	4b0c      	ldr	r3, [pc, #48]	@ (80032ec <prvResetNextTaskUnblockTime+0x38>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d104      	bne.n	80032ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032c4:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <prvResetNextTaskUnblockTime+0x3c>)
 80032c6:	f04f 32ff 	mov.w	r2, #4294967295
 80032ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032cc:	e008      	b.n	80032e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032ce:	4b07      	ldr	r3, [pc, #28]	@ (80032ec <prvResetNextTaskUnblockTime+0x38>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4a04      	ldr	r2, [pc, #16]	@ (80032f0 <prvResetNextTaskUnblockTime+0x3c>)
 80032de:	6013      	str	r3, [r2, #0]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	200004b8 	.word	0x200004b8
 80032f0:	20000520 	.word	0x20000520

080032f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032fe:	4b29      	ldr	r3, [pc, #164]	@ (80033a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003304:	4b28      	ldr	r3, [pc, #160]	@ (80033a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3304      	adds	r3, #4
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fad6 	bl	80028bc <uxListRemove>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003316:	4b24      	ldr	r3, [pc, #144]	@ (80033a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331c:	2201      	movs	r2, #1
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43da      	mvns	r2, r3
 8003324:	4b21      	ldr	r3, [pc, #132]	@ (80033ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4013      	ands	r3, r2
 800332a:	4a20      	ldr	r2, [pc, #128]	@ (80033ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800332c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d10a      	bne.n	800334c <prvAddCurrentTaskToDelayedList+0x58>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800333c:	4b1a      	ldr	r3, [pc, #104]	@ (80033a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3304      	adds	r3, #4
 8003342:	4619      	mov	r1, r3
 8003344:	481a      	ldr	r0, [pc, #104]	@ (80033b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003346:	f7ff fa5e 	bl	8002806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800334a:	e026      	b.n	800339a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003354:	4b14      	ldr	r3, [pc, #80]	@ (80033a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	429a      	cmp	r2, r3
 8003362:	d209      	bcs.n	8003378 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003364:	4b13      	ldr	r3, [pc, #76]	@ (80033b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b0f      	ldr	r3, [pc, #60]	@ (80033a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3304      	adds	r3, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f7ff fa6b 	bl	800284c <vListInsert>
}
 8003376:	e010      	b.n	800339a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003378:	4b0f      	ldr	r3, [pc, #60]	@ (80033b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4b0a      	ldr	r3, [pc, #40]	@ (80033a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3304      	adds	r3, #4
 8003382:	4619      	mov	r1, r3
 8003384:	4610      	mov	r0, r2
 8003386:	f7ff fa61 	bl	800284c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800338a:	4b0c      	ldr	r3, [pc, #48]	@ (80033bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	429a      	cmp	r2, r3
 8003392:	d202      	bcs.n	800339a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003394:	4a09      	ldr	r2, [pc, #36]	@ (80033bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	6013      	str	r3, [r2, #0]
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000504 	.word	0x20000504
 80033a8:	20000400 	.word	0x20000400
 80033ac:	20000508 	.word	0x20000508
 80033b0:	200004ec 	.word	0x200004ec
 80033b4:	200004bc 	.word	0x200004bc
 80033b8:	200004b8 	.word	0x200004b8
 80033bc:	20000520 	.word	0x20000520

080033c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3b04      	subs	r3, #4
 80033d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	3b04      	subs	r3, #4
 80033de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f023 0201 	bic.w	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3b04      	subs	r3, #4
 80033ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80033f0:	4a08      	ldr	r2, [pc, #32]	@ (8003414 <pxPortInitialiseStack+0x54>)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	3b14      	subs	r3, #20
 80033fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3b20      	subs	r3, #32
 8003406:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003408:	68fb      	ldr	r3, [r7, #12]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	08003419 	.word	0x08003419

08003418 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003422:	4b12      	ldr	r3, [pc, #72]	@ (800346c <prvTaskExitError+0x54>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342a:	d00b      	beq.n	8003444 <prvTaskExitError+0x2c>
	__asm volatile
 800342c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	60fb      	str	r3, [r7, #12]
}
 800343e:	bf00      	nop
 8003440:	bf00      	nop
 8003442:	e7fd      	b.n	8003440 <prvTaskExitError+0x28>
	__asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	60bb      	str	r3, [r7, #8]
}
 8003456:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003458:	bf00      	nop
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0fc      	beq.n	800345a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	2000000c 	.word	0x2000000c

08003470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003470:	4b07      	ldr	r3, [pc, #28]	@ (8003490 <pxCurrentTCBConst2>)
 8003472:	6819      	ldr	r1, [r3, #0]
 8003474:	6808      	ldr	r0, [r1, #0]
 8003476:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800347a:	f380 8809 	msr	PSP, r0
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	f380 8811 	msr	BASEPRI, r0
 800348a:	f04e 0e0d 	orr.w	lr, lr, #13
 800348e:	4770      	bx	lr

08003490 <pxCurrentTCBConst2>:
 8003490:	20000400 	.word	0x20000400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop

08003498 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003498:	4806      	ldr	r0, [pc, #24]	@ (80034b4 <prvPortStartFirstTask+0x1c>)
 800349a:	6800      	ldr	r0, [r0, #0]
 800349c:	6800      	ldr	r0, [r0, #0]
 800349e:	f380 8808 	msr	MSP, r0
 80034a2:	b662      	cpsie	i
 80034a4:	b661      	cpsie	f
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	df00      	svc	0
 80034b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80034b2:	bf00      	nop
 80034b4:	e000ed08 	.word	0xe000ed08

080034b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80034be:	4b32      	ldr	r3, [pc, #200]	@ (8003588 <xPortStartScheduler+0xd0>)
 80034c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	22ff      	movs	r2, #255	@ 0xff
 80034ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	4b2a      	ldr	r3, [pc, #168]	@ (800358c <xPortStartScheduler+0xd4>)
 80034e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003590 <xPortStartScheduler+0xd8>)
 80034e8:	2207      	movs	r2, #7
 80034ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034ec:	e009      	b.n	8003502 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80034ee:	4b28      	ldr	r3, [pc, #160]	@ (8003590 <xPortStartScheduler+0xd8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	4a26      	ldr	r2, [pc, #152]	@ (8003590 <xPortStartScheduler+0xd8>)
 80034f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350a:	2b80      	cmp	r3, #128	@ 0x80
 800350c:	d0ef      	beq.n	80034ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800350e:	4b20      	ldr	r3, [pc, #128]	@ (8003590 <xPortStartScheduler+0xd8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f1c3 0307 	rsb	r3, r3, #7
 8003516:	2b04      	cmp	r3, #4
 8003518:	d00b      	beq.n	8003532 <xPortStartScheduler+0x7a>
	__asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	60bb      	str	r3, [r7, #8]
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	e7fd      	b.n	800352e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003532:	4b17      	ldr	r3, [pc, #92]	@ (8003590 <xPortStartScheduler+0xd8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	4a15      	ldr	r2, [pc, #84]	@ (8003590 <xPortStartScheduler+0xd8>)
 800353a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800353c:	4b14      	ldr	r3, [pc, #80]	@ (8003590 <xPortStartScheduler+0xd8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003544:	4a12      	ldr	r2, [pc, #72]	@ (8003590 <xPortStartScheduler+0xd8>)
 8003546:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003550:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <xPortStartScheduler+0xdc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0f      	ldr	r2, [pc, #60]	@ (8003594 <xPortStartScheduler+0xdc>)
 8003556:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800355a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800355c:	4b0d      	ldr	r3, [pc, #52]	@ (8003594 <xPortStartScheduler+0xdc>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0c      	ldr	r2, [pc, #48]	@ (8003594 <xPortStartScheduler+0xdc>)
 8003562:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003566:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003568:	f000 f8b8 	bl	80036dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800356c:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <xPortStartScheduler+0xe0>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003572:	f7ff ff91 	bl	8003498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003576:	f7ff fd7f 	bl	8003078 <vTaskSwitchContext>
	prvTaskExitError();
 800357a:	f7ff ff4d 	bl	8003418 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	e000e400 	.word	0xe000e400
 800358c:	2000052c 	.word	0x2000052c
 8003590:	20000530 	.word	0x20000530
 8003594:	e000ed20 	.word	0xe000ed20
 8003598:	2000000c 	.word	0x2000000c

0800359c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
	__asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	607b      	str	r3, [r7, #4]
}
 80035b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80035b6:	4b0f      	ldr	r3, [pc, #60]	@ (80035f4 <vPortEnterCritical+0x58>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3301      	adds	r3, #1
 80035bc:	4a0d      	ldr	r2, [pc, #52]	@ (80035f4 <vPortEnterCritical+0x58>)
 80035be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80035c0:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <vPortEnterCritical+0x58>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d110      	bne.n	80035ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80035c8:	4b0b      	ldr	r3, [pc, #44]	@ (80035f8 <vPortEnterCritical+0x5c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <vPortEnterCritical+0x4e>
	__asm volatile
 80035d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	603b      	str	r3, [r7, #0]
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	e7fd      	b.n	80035e6 <vPortEnterCritical+0x4a>
	}
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr
 80035f4:	2000000c 	.word	0x2000000c
 80035f8:	e000ed04 	.word	0xe000ed04

080035fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003602:	4b12      	ldr	r3, [pc, #72]	@ (800364c <vPortExitCritical+0x50>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10b      	bne.n	8003622 <vPortExitCritical+0x26>
	__asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	607b      	str	r3, [r7, #4]
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	e7fd      	b.n	800361e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003622:	4b0a      	ldr	r3, [pc, #40]	@ (800364c <vPortExitCritical+0x50>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3b01      	subs	r3, #1
 8003628:	4a08      	ldr	r2, [pc, #32]	@ (800364c <vPortExitCritical+0x50>)
 800362a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800362c:	4b07      	ldr	r3, [pc, #28]	@ (800364c <vPortExitCritical+0x50>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d105      	bne.n	8003640 <vPortExitCritical+0x44>
 8003634:	2300      	movs	r3, #0
 8003636:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800363e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	2000000c 	.word	0x2000000c

08003650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003650:	f3ef 8009 	mrs	r0, PSP
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	4b0d      	ldr	r3, [pc, #52]	@ (8003690 <pxCurrentTCBConst>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003660:	6010      	str	r0, [r2, #0]
 8003662:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003666:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800366a:	f380 8811 	msr	BASEPRI, r0
 800366e:	f7ff fd03 	bl	8003078 <vTaskSwitchContext>
 8003672:	f04f 0000 	mov.w	r0, #0
 8003676:	f380 8811 	msr	BASEPRI, r0
 800367a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	6808      	ldr	r0, [r1, #0]
 8003682:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003686:	f380 8809 	msr	PSP, r0
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	4770      	bx	lr

08003690 <pxCurrentTCBConst>:
 8003690:	20000400 	.word	0x20000400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop

08003698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
	__asm volatile
 800369e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	607b      	str	r3, [r7, #4]
}
 80036b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80036b2:	f7ff fc27 	bl	8002f04 <xTaskIncrementTick>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80036bc:	4b06      	ldr	r3, [pc, #24]	@ (80036d8 <SysTick_Handler+0x40>)
 80036be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	2300      	movs	r3, #0
 80036c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f383 8811 	msr	BASEPRI, r3
}
 80036ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	e000ed04 	.word	0xe000ed04

080036dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80036e0:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <vPortSetupTimerInterrupt+0x30>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003710 <vPortSetupTimerInterrupt+0x34>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036ec:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <vPortSetupTimerInterrupt+0x38>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a09      	ldr	r2, [pc, #36]	@ (8003718 <vPortSetupTimerInterrupt+0x3c>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	4a08      	ldr	r2, [pc, #32]	@ (800371c <vPortSetupTimerInterrupt+0x40>)
 80036fa:	3b01      	subs	r3, #1
 80036fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80036fe:	4b03      	ldr	r3, [pc, #12]	@ (800370c <vPortSetupTimerInterrupt+0x30>)
 8003700:	2207      	movs	r2, #7
 8003702:	601a      	str	r2, [r3, #0]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	e000e010 	.word	0xe000e010
 8003710:	e000e018 	.word	0xe000e018
 8003714:	20000000 	.word	0x20000000
 8003718:	10624dd3 	.word	0x10624dd3
 800371c:	e000e014 	.word	0xe000e014

08003720 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	@ 0x28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003728:	2300      	movs	r3, #0
 800372a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800372c:	f7ff fb3e 	bl	8002dac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003730:	4b5c      	ldr	r3, [pc, #368]	@ (80038a4 <pvPortMalloc+0x184>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003738:	f000 f924 	bl	8003984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800373c:	4b5a      	ldr	r3, [pc, #360]	@ (80038a8 <pvPortMalloc+0x188>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	f040 8095 	bne.w	8003874 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01e      	beq.n	800378e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003750:	2208      	movs	r2, #8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	2b00      	cmp	r3, #0
 8003760:	d015      	beq.n	800378e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f023 0307 	bic.w	r3, r3, #7
 8003768:	3308      	adds	r3, #8
 800376a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <pvPortMalloc+0x6e>
	__asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	617b      	str	r3, [r7, #20]
}
 8003788:	bf00      	nop
 800378a:	bf00      	nop
 800378c:	e7fd      	b.n	800378a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d06f      	beq.n	8003874 <pvPortMalloc+0x154>
 8003794:	4b45      	ldr	r3, [pc, #276]	@ (80038ac <pvPortMalloc+0x18c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	429a      	cmp	r2, r3
 800379c:	d86a      	bhi.n	8003874 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800379e:	4b44      	ldr	r3, [pc, #272]	@ (80038b0 <pvPortMalloc+0x190>)
 80037a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80037a2:	4b43      	ldr	r3, [pc, #268]	@ (80038b0 <pvPortMalloc+0x190>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037a8:	e004      	b.n	80037b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d903      	bls.n	80037c6 <pvPortMalloc+0xa6>
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f1      	bne.n	80037aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80037c6:	4b37      	ldr	r3, [pc, #220]	@ (80038a4 <pvPortMalloc+0x184>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d051      	beq.n	8003874 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2208      	movs	r2, #8
 80037d6:	4413      	add	r3, r2
 80037d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	1ad2      	subs	r2, r2, r3
 80037ea:	2308      	movs	r3, #8
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d920      	bls.n	8003834 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80037f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4413      	add	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00b      	beq.n	800381c <pvPortMalloc+0xfc>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	613b      	str	r3, [r7, #16]
}
 8003816:	bf00      	nop
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	1ad2      	subs	r2, r2, r3
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800382e:	69b8      	ldr	r0, [r7, #24]
 8003830:	f000 f90a 	bl	8003a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003834:	4b1d      	ldr	r3, [pc, #116]	@ (80038ac <pvPortMalloc+0x18c>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	4a1b      	ldr	r2, [pc, #108]	@ (80038ac <pvPortMalloc+0x18c>)
 8003840:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003842:	4b1a      	ldr	r3, [pc, #104]	@ (80038ac <pvPortMalloc+0x18c>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	4b1b      	ldr	r3, [pc, #108]	@ (80038b4 <pvPortMalloc+0x194>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d203      	bcs.n	8003856 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800384e:	4b17      	ldr	r3, [pc, #92]	@ (80038ac <pvPortMalloc+0x18c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a18      	ldr	r2, [pc, #96]	@ (80038b4 <pvPortMalloc+0x194>)
 8003854:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	4b13      	ldr	r3, [pc, #76]	@ (80038a8 <pvPortMalloc+0x188>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	431a      	orrs	r2, r3
 8003860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003862:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800386a:	4b13      	ldr	r3, [pc, #76]	@ (80038b8 <pvPortMalloc+0x198>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3301      	adds	r3, #1
 8003870:	4a11      	ldr	r2, [pc, #68]	@ (80038b8 <pvPortMalloc+0x198>)
 8003872:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003874:	f7ff faa8 	bl	8002dc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <pvPortMalloc+0x17a>
	__asm volatile
 8003882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	60fb      	str	r3, [r7, #12]
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	e7fd      	b.n	8003896 <pvPortMalloc+0x176>
	return pvReturn;
 800389a:	69fb      	ldr	r3, [r7, #28]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3728      	adds	r7, #40	@ 0x28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	2000113c 	.word	0x2000113c
 80038a8:	20001150 	.word	0x20001150
 80038ac:	20001140 	.word	0x20001140
 80038b0:	20001134 	.word	0x20001134
 80038b4:	20001144 	.word	0x20001144
 80038b8:	20001148 	.word	0x20001148

080038bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d04f      	beq.n	800396e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80038ce:	2308      	movs	r3, #8
 80038d0:	425b      	negs	r3, r3
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4413      	add	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	4b25      	ldr	r3, [pc, #148]	@ (8003978 <vPortFree+0xbc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10b      	bne.n	8003902 <vPortFree+0x46>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	60fb      	str	r3, [r7, #12]
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	e7fd      	b.n	80038fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <vPortFree+0x66>
	__asm volatile
 800390a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	60bb      	str	r3, [r7, #8]
}
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	e7fd      	b.n	800391e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	4b14      	ldr	r3, [pc, #80]	@ (8003978 <vPortFree+0xbc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01e      	beq.n	800396e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d11a      	bne.n	800396e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	4b0e      	ldr	r3, [pc, #56]	@ (8003978 <vPortFree+0xbc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	43db      	mvns	r3, r3
 8003942:	401a      	ands	r2, r3
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003948:	f7ff fa30 	bl	8002dac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	4b0a      	ldr	r3, [pc, #40]	@ (800397c <vPortFree+0xc0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4413      	add	r3, r2
 8003956:	4a09      	ldr	r2, [pc, #36]	@ (800397c <vPortFree+0xc0>)
 8003958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800395a:	6938      	ldr	r0, [r7, #16]
 800395c:	f000 f874 	bl	8003a48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003960:	4b07      	ldr	r3, [pc, #28]	@ (8003980 <vPortFree+0xc4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	4a06      	ldr	r2, [pc, #24]	@ (8003980 <vPortFree+0xc4>)
 8003968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800396a:	f7ff fa2d 	bl	8002dc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800396e:	bf00      	nop
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20001150 	.word	0x20001150
 800397c:	20001140 	.word	0x20001140
 8003980:	2000114c 	.word	0x2000114c

08003984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800398a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800398e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003990:	4b27      	ldr	r3, [pc, #156]	@ (8003a30 <prvHeapInit+0xac>)
 8003992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00c      	beq.n	80039b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3307      	adds	r3, #7
 80039a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0307 	bic.w	r3, r3, #7
 80039aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a30 <prvHeapInit+0xac>)
 80039b4:	4413      	add	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003a34 <prvHeapInit+0xb0>)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80039c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a34 <prvHeapInit+0xb0>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	4413      	add	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80039d0:	2208      	movs	r2, #8
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0307 	bic.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a15      	ldr	r2, [pc, #84]	@ (8003a38 <prvHeapInit+0xb4>)
 80039e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80039e6:	4b14      	ldr	r3, [pc, #80]	@ (8003a38 <prvHeapInit+0xb4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80039ee:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <prvHeapInit+0xb4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	1ad2      	subs	r2, r2, r3
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a04:	4b0c      	ldr	r3, [pc, #48]	@ (8003a38 <prvHeapInit+0xb4>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4a0a      	ldr	r2, [pc, #40]	@ (8003a3c <prvHeapInit+0xb8>)
 8003a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4a09      	ldr	r2, [pc, #36]	@ (8003a40 <prvHeapInit+0xbc>)
 8003a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a1c:	4b09      	ldr	r3, [pc, #36]	@ (8003a44 <prvHeapInit+0xc0>)
 8003a1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003a22:	601a      	str	r2, [r3, #0]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000534 	.word	0x20000534
 8003a34:	20001134 	.word	0x20001134
 8003a38:	2000113c 	.word	0x2000113c
 8003a3c:	20001144 	.word	0x20001144
 8003a40:	20001140 	.word	0x20001140
 8003a44:	20001150 	.word	0x20001150

08003a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a50:	4b27      	ldr	r3, [pc, #156]	@ (8003af0 <prvInsertBlockIntoFreeList+0xa8>)
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e002      	b.n	8003a5c <prvInsertBlockIntoFreeList+0x14>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d8f7      	bhi.n	8003a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	4413      	add	r3, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d108      	bne.n	8003a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	441a      	add	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	441a      	add	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d118      	bne.n	8003ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b14      	ldr	r3, [pc, #80]	@ (8003af4 <prvInsertBlockIntoFreeList+0xac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d00d      	beq.n	8003ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	441a      	add	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e008      	b.n	8003ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <prvInsertBlockIntoFreeList+0xac>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e003      	b.n	8003ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d002      	beq.n	8003ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	20001134 	.word	0x20001134
 8003af4:	2000113c 	.word	0x2000113c

08003af8 <memset>:
 8003af8:	4603      	mov	r3, r0
 8003afa:	4402      	add	r2, r0
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d100      	bne.n	8003b02 <memset+0xa>
 8003b00:	4770      	bx	lr
 8003b02:	f803 1b01 	strb.w	r1, [r3], #1
 8003b06:	e7f9      	b.n	8003afc <memset+0x4>

08003b08 <_reclaim_reent>:
 8003b08:	4b29      	ldr	r3, [pc, #164]	@ (8003bb0 <_reclaim_reent+0xa8>)
 8003b0a:	b570      	push	{r4, r5, r6, lr}
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4604      	mov	r4, r0
 8003b10:	4283      	cmp	r3, r0
 8003b12:	d04b      	beq.n	8003bac <_reclaim_reent+0xa4>
 8003b14:	69c3      	ldr	r3, [r0, #28]
 8003b16:	b1ab      	cbz	r3, 8003b44 <_reclaim_reent+0x3c>
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	b16b      	cbz	r3, 8003b38 <_reclaim_reent+0x30>
 8003b1c:	2500      	movs	r5, #0
 8003b1e:	69e3      	ldr	r3, [r4, #28]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	5959      	ldr	r1, [r3, r5]
 8003b24:	2900      	cmp	r1, #0
 8003b26:	d13b      	bne.n	8003ba0 <_reclaim_reent+0x98>
 8003b28:	3504      	adds	r5, #4
 8003b2a:	2d80      	cmp	r5, #128	@ 0x80
 8003b2c:	d1f7      	bne.n	8003b1e <_reclaim_reent+0x16>
 8003b2e:	69e3      	ldr	r3, [r4, #28]
 8003b30:	4620      	mov	r0, r4
 8003b32:	68d9      	ldr	r1, [r3, #12]
 8003b34:	f000 f864 	bl	8003c00 <_free_r>
 8003b38:	69e3      	ldr	r3, [r4, #28]
 8003b3a:	6819      	ldr	r1, [r3, #0]
 8003b3c:	b111      	cbz	r1, 8003b44 <_reclaim_reent+0x3c>
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f000 f85e 	bl	8003c00 <_free_r>
 8003b44:	6961      	ldr	r1, [r4, #20]
 8003b46:	b111      	cbz	r1, 8003b4e <_reclaim_reent+0x46>
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f000 f859 	bl	8003c00 <_free_r>
 8003b4e:	69e1      	ldr	r1, [r4, #28]
 8003b50:	b111      	cbz	r1, 8003b58 <_reclaim_reent+0x50>
 8003b52:	4620      	mov	r0, r4
 8003b54:	f000 f854 	bl	8003c00 <_free_r>
 8003b58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003b5a:	b111      	cbz	r1, 8003b62 <_reclaim_reent+0x5a>
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f000 f84f 	bl	8003c00 <_free_r>
 8003b62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b64:	b111      	cbz	r1, 8003b6c <_reclaim_reent+0x64>
 8003b66:	4620      	mov	r0, r4
 8003b68:	f000 f84a 	bl	8003c00 <_free_r>
 8003b6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003b6e:	b111      	cbz	r1, 8003b76 <_reclaim_reent+0x6e>
 8003b70:	4620      	mov	r0, r4
 8003b72:	f000 f845 	bl	8003c00 <_free_r>
 8003b76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003b78:	b111      	cbz	r1, 8003b80 <_reclaim_reent+0x78>
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f000 f840 	bl	8003c00 <_free_r>
 8003b80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003b82:	b111      	cbz	r1, 8003b8a <_reclaim_reent+0x82>
 8003b84:	4620      	mov	r0, r4
 8003b86:	f000 f83b 	bl	8003c00 <_free_r>
 8003b8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003b8c:	b111      	cbz	r1, 8003b94 <_reclaim_reent+0x8c>
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f000 f836 	bl	8003c00 <_free_r>
 8003b94:	6a23      	ldr	r3, [r4, #32]
 8003b96:	b14b      	cbz	r3, 8003bac <_reclaim_reent+0xa4>
 8003b98:	4620      	mov	r0, r4
 8003b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b9e:	4718      	bx	r3
 8003ba0:	680e      	ldr	r6, [r1, #0]
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f000 f82c 	bl	8003c00 <_free_r>
 8003ba8:	4631      	mov	r1, r6
 8003baa:	e7bb      	b.n	8003b24 <_reclaim_reent+0x1c>
 8003bac:	bd70      	pop	{r4, r5, r6, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000010 	.word	0x20000010

08003bb4 <__libc_init_array>:
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	2600      	movs	r6, #0
 8003bb8:	4d0c      	ldr	r5, [pc, #48]	@ (8003bec <__libc_init_array+0x38>)
 8003bba:	4c0d      	ldr	r4, [pc, #52]	@ (8003bf0 <__libc_init_array+0x3c>)
 8003bbc:	1b64      	subs	r4, r4, r5
 8003bbe:	10a4      	asrs	r4, r4, #2
 8003bc0:	42a6      	cmp	r6, r4
 8003bc2:	d109      	bne.n	8003bd8 <__libc_init_array+0x24>
 8003bc4:	f000 f870 	bl	8003ca8 <_init>
 8003bc8:	2600      	movs	r6, #0
 8003bca:	4d0a      	ldr	r5, [pc, #40]	@ (8003bf4 <__libc_init_array+0x40>)
 8003bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8003bf8 <__libc_init_array+0x44>)
 8003bce:	1b64      	subs	r4, r4, r5
 8003bd0:	10a4      	asrs	r4, r4, #2
 8003bd2:	42a6      	cmp	r6, r4
 8003bd4:	d105      	bne.n	8003be2 <__libc_init_array+0x2e>
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bdc:	4798      	blx	r3
 8003bde:	3601      	adds	r6, #1
 8003be0:	e7ee      	b.n	8003bc0 <__libc_init_array+0xc>
 8003be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be6:	4798      	blx	r3
 8003be8:	3601      	adds	r6, #1
 8003bea:	e7f2      	b.n	8003bd2 <__libc_init_array+0x1e>
 8003bec:	08003d4c 	.word	0x08003d4c
 8003bf0:	08003d4c 	.word	0x08003d4c
 8003bf4:	08003d4c 	.word	0x08003d4c
 8003bf8:	08003d50 	.word	0x08003d50

08003bfc <__retarget_lock_acquire_recursive>:
 8003bfc:	4770      	bx	lr

08003bfe <__retarget_lock_release_recursive>:
 8003bfe:	4770      	bx	lr

08003c00 <_free_r>:
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	4605      	mov	r5, r0
 8003c04:	2900      	cmp	r1, #0
 8003c06:	d040      	beq.n	8003c8a <_free_r+0x8a>
 8003c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c0c:	1f0c      	subs	r4, r1, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	bfb8      	it	lt
 8003c12:	18e4      	addlt	r4, r4, r3
 8003c14:	f000 f83c 	bl	8003c90 <__malloc_lock>
 8003c18:	4a1c      	ldr	r2, [pc, #112]	@ (8003c8c <_free_r+0x8c>)
 8003c1a:	6813      	ldr	r3, [r2, #0]
 8003c1c:	b933      	cbnz	r3, 8003c2c <_free_r+0x2c>
 8003c1e:	6063      	str	r3, [r4, #4]
 8003c20:	6014      	str	r4, [r2, #0]
 8003c22:	4628      	mov	r0, r5
 8003c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c28:	f000 b838 	b.w	8003c9c <__malloc_unlock>
 8003c2c:	42a3      	cmp	r3, r4
 8003c2e:	d908      	bls.n	8003c42 <_free_r+0x42>
 8003c30:	6820      	ldr	r0, [r4, #0]
 8003c32:	1821      	adds	r1, r4, r0
 8003c34:	428b      	cmp	r3, r1
 8003c36:	bf01      	itttt	eq
 8003c38:	6819      	ldreq	r1, [r3, #0]
 8003c3a:	685b      	ldreq	r3, [r3, #4]
 8003c3c:	1809      	addeq	r1, r1, r0
 8003c3e:	6021      	streq	r1, [r4, #0]
 8003c40:	e7ed      	b.n	8003c1e <_free_r+0x1e>
 8003c42:	461a      	mov	r2, r3
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	b10b      	cbz	r3, 8003c4c <_free_r+0x4c>
 8003c48:	42a3      	cmp	r3, r4
 8003c4a:	d9fa      	bls.n	8003c42 <_free_r+0x42>
 8003c4c:	6811      	ldr	r1, [r2, #0]
 8003c4e:	1850      	adds	r0, r2, r1
 8003c50:	42a0      	cmp	r0, r4
 8003c52:	d10b      	bne.n	8003c6c <_free_r+0x6c>
 8003c54:	6820      	ldr	r0, [r4, #0]
 8003c56:	4401      	add	r1, r0
 8003c58:	1850      	adds	r0, r2, r1
 8003c5a:	4283      	cmp	r3, r0
 8003c5c:	6011      	str	r1, [r2, #0]
 8003c5e:	d1e0      	bne.n	8003c22 <_free_r+0x22>
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4408      	add	r0, r1
 8003c66:	6010      	str	r0, [r2, #0]
 8003c68:	6053      	str	r3, [r2, #4]
 8003c6a:	e7da      	b.n	8003c22 <_free_r+0x22>
 8003c6c:	d902      	bls.n	8003c74 <_free_r+0x74>
 8003c6e:	230c      	movs	r3, #12
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	e7d6      	b.n	8003c22 <_free_r+0x22>
 8003c74:	6820      	ldr	r0, [r4, #0]
 8003c76:	1821      	adds	r1, r4, r0
 8003c78:	428b      	cmp	r3, r1
 8003c7a:	bf01      	itttt	eq
 8003c7c:	6819      	ldreq	r1, [r3, #0]
 8003c7e:	685b      	ldreq	r3, [r3, #4]
 8003c80:	1809      	addeq	r1, r1, r0
 8003c82:	6021      	streq	r1, [r4, #0]
 8003c84:	6063      	str	r3, [r4, #4]
 8003c86:	6054      	str	r4, [r2, #4]
 8003c88:	e7cb      	b.n	8003c22 <_free_r+0x22>
 8003c8a:	bd38      	pop	{r3, r4, r5, pc}
 8003c8c:	20001290 	.word	0x20001290

08003c90 <__malloc_lock>:
 8003c90:	4801      	ldr	r0, [pc, #4]	@ (8003c98 <__malloc_lock+0x8>)
 8003c92:	f7ff bfb3 	b.w	8003bfc <__retarget_lock_acquire_recursive>
 8003c96:	bf00      	nop
 8003c98:	2000128c 	.word	0x2000128c

08003c9c <__malloc_unlock>:
 8003c9c:	4801      	ldr	r0, [pc, #4]	@ (8003ca4 <__malloc_unlock+0x8>)
 8003c9e:	f7ff bfae 	b.w	8003bfe <__retarget_lock_release_recursive>
 8003ca2:	bf00      	nop
 8003ca4:	2000128c 	.word	0x2000128c

08003ca8 <_init>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	bf00      	nop
 8003cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cae:	bc08      	pop	{r3}
 8003cb0:	469e      	mov	lr, r3
 8003cb2:	4770      	bx	lr

08003cb4 <_fini>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	bf00      	nop
 8003cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cba:	bc08      	pop	{r3}
 8003cbc:	469e      	mov	lr, r3
 8003cbe:	4770      	bx	lr
