
KostaCanProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000505c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  0800516c  0800516c  0000616c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800524c  0800524c  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  0800524c  0800524c  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800524c  0800524c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800524c  0800524c  0000624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005250  08005250  00006250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005254  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001294  2000006c  080052c0  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001300  080052c0  00007300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000141bf  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003424  00000000  00000000  0001b254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  0001e678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e59  00000000  00000000  0001f918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b053  00000000  00000000  00020771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001571e  00000000  00000000  0003b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000974f4  00000000  00000000  00050ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e83d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005444  00000000  00000000  000e841c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ed860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005154 	.word	0x08005154

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08005154 	.word	0x08005154

08000150 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000154:	4b17      	ldr	r3, [pc, #92]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000156:	4a18      	ldr	r2, [pc, #96]	@ (80001b8 <MX_CAN_Init+0x68>)
 8000158:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800015a:	4b16      	ldr	r3, [pc, #88]	@ (80001b4 <MX_CAN_Init+0x64>)
 800015c:	2209      	movs	r2, #9
 800015e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000160:	4b14      	ldr	r3, [pc, #80]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000162:	2200      	movs	r2, #0
 8000164:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000166:	4b13      	ldr	r3, [pc, #76]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000168:	2200      	movs	r2, #0
 800016a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 800016c:	4b11      	ldr	r3, [pc, #68]	@ (80001b4 <MX_CAN_Init+0x64>)
 800016e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000172:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000174:	4b0f      	ldr	r3, [pc, #60]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000176:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800017a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017c:	4b0d      	ldr	r3, [pc, #52]	@ (80001b4 <MX_CAN_Init+0x64>)
 800017e:	2200      	movs	r2, #0
 8000180:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000182:	4b0c      	ldr	r3, [pc, #48]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000184:	2200      	movs	r2, #0
 8000186:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000188:	4b0a      	ldr	r3, [pc, #40]	@ (80001b4 <MX_CAN_Init+0x64>)
 800018a:	2200      	movs	r2, #0
 800018c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018e:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000190:	2200      	movs	r2, #0
 8000192:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000194:	4b07      	ldr	r3, [pc, #28]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000196:	2200      	movs	r2, #0
 8000198:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800019a:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <MX_CAN_Init+0x64>)
 800019c:	2200      	movs	r2, #0
 800019e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <MX_CAN_Init+0x64>)
 80001a2:	f000 fc63 	bl	8000a6c <HAL_CAN_Init>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001ac:	f000 fa1e 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000088 	.word	0x20000088
 80001b8:	40006400 	.word	0x40006400

080001bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	f107 0310 	add.w	r3, r7, #16
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a20      	ldr	r2, [pc, #128]	@ (8000258 <HAL_CAN_MspInit+0x9c>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d139      	bne.n	8000250 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001dc:	4b1f      	ldr	r3, [pc, #124]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001de:	69db      	ldr	r3, [r3, #28]
 80001e0:	4a1e      	ldr	r2, [pc, #120]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001e6:	61d3      	str	r3, [r2, #28]
 80001e8:	4b1c      	ldr	r3, [pc, #112]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001ea:	69db      	ldr	r3, [r3, #28]
 80001ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f4:	4b19      	ldr	r3, [pc, #100]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a18      	ldr	r2, [pc, #96]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001fa:	f043 0304 	orr.w	r3, r3, #4
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b16      	ldr	r3, [pc, #88]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0304 	and.w	r3, r3, #4
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800020c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000210:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	4619      	mov	r1, r3
 8000220:	480f      	ldr	r0, [pc, #60]	@ (8000260 <HAL_CAN_MspInit+0xa4>)
 8000222:	f001 fb43 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800022a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800022c:	2302      	movs	r3, #2
 800022e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000230:	2303      	movs	r3, #3
 8000232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	4619      	mov	r1, r3
 800023a:	4809      	ldr	r0, [pc, #36]	@ (8000260 <HAL_CAN_MspInit+0xa4>)
 800023c:	f001 fb36 	bl	80018ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000240:	2200      	movs	r2, #0
 8000242:	2105      	movs	r1, #5
 8000244:	2014      	movs	r0, #20
 8000246:	f001 fb06 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800024a:	2014      	movs	r0, #20
 800024c:	f001 fb1f 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000250:	bf00      	nop
 8000252:	3720      	adds	r7, #32
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40006400 	.word	0x40006400
 800025c:	40021000 	.word	0x40021000
 8000260:	40010800 	.word	0x40010800

08000264 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	4a06      	ldr	r2, [pc, #24]	@ (800028c <vApplicationGetIdleTaskMemory+0x28>)
 8000274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	4a05      	ldr	r2, [pc, #20]	@ (8000290 <vApplicationGetIdleTaskMemory+0x2c>)
 800027a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2280      	movs	r2, #128	@ 0x80
 8000280:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000282:	bf00      	nop
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	20000128 	.word	0x20000128
 8000290:	200001c8 	.word	0x200001c8

08000294 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000294:	b5b0      	push	{r4, r5, r7, lr}
 8000296:	b08e      	sub	sp, #56	@ 0x38
 8000298:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800029a:	4b14      	ldr	r3, [pc, #80]	@ (80002ec <MX_FREERTOS_Init+0x58>)
 800029c:	f107 041c 	add.w	r4, r7, #28
 80002a0:	461d      	mov	r5, r3
 80002a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002ae:	f107 031c 	add.w	r3, r7, #28
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f002 fd55 	bl	8002d64 <osThreadCreate>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4a0c      	ldr	r2, [pc, #48]	@ (80002f0 <MX_FREERTOS_Init+0x5c>)
 80002be:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 256);
 80002c0:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <MX_FREERTOS_Init+0x60>)
 80002c2:	463c      	mov	r4, r7
 80002c4:	461d      	mov	r5, r3
 80002c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80002d2:	463b      	mov	r3, r7
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fd44 	bl	8002d64 <osThreadCreate>
 80002dc:	4603      	mov	r3, r0
 80002de:	4a06      	ldr	r2, [pc, #24]	@ (80002f8 <MX_FREERTOS_Init+0x64>)
 80002e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80002e2:	bf00      	nop
 80002e4:	3738      	adds	r7, #56	@ 0x38
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bdb0      	pop	{r4, r5, r7, pc}
 80002ea:	bf00      	nop
 80002ec:	08005178 	.word	0x08005178
 80002f0:	20000120 	.word	0x20000120
 80002f4:	080051a0 	.word	0x080051a0
 80002f8:	20000124 	.word	0x20000124

080002fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
	  canfil.FilterBank = 0;
 8000304:	4b21      	ldr	r3, [pc, #132]	@ (800038c <StartDefaultTask+0x90>)
 8000306:	2200      	movs	r2, #0
 8000308:	615a      	str	r2, [r3, #20]
	  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800030a:	4b20      	ldr	r3, [pc, #128]	@ (800038c <StartDefaultTask+0x90>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
	  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000310:	4b1e      	ldr	r3, [pc, #120]	@ (800038c <StartDefaultTask+0x90>)
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
	  canfil.FilterIdHigh = 0;
 8000316:	4b1d      	ldr	r3, [pc, #116]	@ (800038c <StartDefaultTask+0x90>)
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
	  canfil.FilterIdLow = 0;
 800031c:	4b1b      	ldr	r3, [pc, #108]	@ (800038c <StartDefaultTask+0x90>)
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
	  canfil.FilterMaskIdHigh = 0;
 8000322:	4b1a      	ldr	r3, [pc, #104]	@ (800038c <StartDefaultTask+0x90>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
	  canfil.FilterMaskIdLow = 0;
 8000328:	4b18      	ldr	r3, [pc, #96]	@ (800038c <StartDefaultTask+0x90>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
	  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800032e:	4b17      	ldr	r3, [pc, #92]	@ (800038c <StartDefaultTask+0x90>)
 8000330:	2201      	movs	r2, #1
 8000332:	61da      	str	r2, [r3, #28]
	  canfil.FilterActivation = ENABLE;
 8000334:	4b15      	ldr	r3, [pc, #84]	@ (800038c <StartDefaultTask+0x90>)
 8000336:	2201      	movs	r2, #1
 8000338:	621a      	str	r2, [r3, #32]
	  canfil.SlaveStartFilterBank = 14;
 800033a:	4b14      	ldr	r3, [pc, #80]	@ (800038c <StartDefaultTask+0x90>)
 800033c:	220e      	movs	r2, #14
 800033e:	625a      	str	r2, [r3, #36]	@ 0x24

	  txHeader.DLC = 8;
 8000340:	4b13      	ldr	r3, [pc, #76]	@ (8000390 <StartDefaultTask+0x94>)
 8000342:	2208      	movs	r2, #8
 8000344:	611a      	str	r2, [r3, #16]
	  txHeader.IDE = CAN_ID_STD;
 8000346:	4b12      	ldr	r3, [pc, #72]	@ (8000390 <StartDefaultTask+0x94>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
	  txHeader.RTR = CAN_RTR_DATA;
 800034c:	4b10      	ldr	r3, [pc, #64]	@ (8000390 <StartDefaultTask+0x94>)
 800034e:	2200      	movs	r2, #0
 8000350:	60da      	str	r2, [r3, #12]
	  txHeader.StdId = 0xAAA;
 8000352:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <StartDefaultTask+0x94>)
 8000354:	f640 22aa 	movw	r2, #2730	@ 0xaaa
 8000358:	601a      	str	r2, [r3, #0]
	  //txHeader.ExtId = 0x02;
	  txHeader.TransmitGlobalTime = DISABLE;
 800035a:	4b0d      	ldr	r3, [pc, #52]	@ (8000390 <StartDefaultTask+0x94>)
 800035c:	2200      	movs	r2, #0
 800035e:	751a      	strb	r2, [r3, #20]

	  HAL_CAN_ConfigFilter(&hcan,&canfil);
 8000360:	490a      	ldr	r1, [pc, #40]	@ (800038c <StartDefaultTask+0x90>)
 8000362:	480c      	ldr	r0, [pc, #48]	@ (8000394 <StartDefaultTask+0x98>)
 8000364:	f000 fc7d 	bl	8000c62 <HAL_CAN_ConfigFilter>
	  HAL_CAN_Start(&hcan);
 8000368:	480a      	ldr	r0, [pc, #40]	@ (8000394 <StartDefaultTask+0x98>)
 800036a:	f000 fd43 	bl	8000df4 <HAL_CAN_Start>
	  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 800036e:	2102      	movs	r1, #2
 8000370:	4808      	ldr	r0, [pc, #32]	@ (8000394 <StartDefaultTask+0x98>)
 8000372:	f000 ff73 	bl	800125c <HAL_CAN_ActivateNotification>
	  for(;;)
	  {



		  HAL_CAN_AddTxMessage(&hcan, &txHeader, csend, &canMailbox);
 8000376:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <StartDefaultTask+0x9c>)
 8000378:	4a08      	ldr	r2, [pc, #32]	@ (800039c <StartDefaultTask+0xa0>)
 800037a:	4905      	ldr	r1, [pc, #20]	@ (8000390 <StartDefaultTask+0x94>)
 800037c:	4805      	ldr	r0, [pc, #20]	@ (8000394 <StartDefaultTask+0x98>)
 800037e:	f000 fd7d 	bl	8000e7c <HAL_CAN_AddTxMessage>
		  osDelay(100);
 8000382:	2064      	movs	r0, #100	@ 0x64
 8000384:	f002 fd3a 	bl	8002dfc <osDelay>
		  HAL_CAN_AddTxMessage(&hcan, &txHeader, csend, &canMailbox);
 8000388:	bf00      	nop
 800038a:	e7f4      	b.n	8000376 <StartDefaultTask+0x7a>
 800038c:	200000f4 	.word	0x200000f4
 8000390:	200000cc 	.word	0x200000cc
 8000394:	20000088 	.word	0x20000088
 8000398:	2000011c 	.word	0x2000011c
 800039c:	200000ec 	.word	0x200000ec

080003a0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  printf("%s", "Hello, world\r\n");
 80003a8:	4804      	ldr	r0, [pc, #16]	@ (80003bc <StartTask02+0x1c>)
 80003aa:	f004 f80f 	bl	80043cc <puts>
	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  osDelay(1000);
 80003ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003b2:	f002 fd23 	bl	8002dfc <osDelay>
	  printf("%s", "Hello, world\r\n");
 80003b6:	bf00      	nop
 80003b8:	e7f6      	b.n	80003a8 <StartTask02+0x8>
 80003ba:	bf00      	nop
 80003bc:	080051bc 	.word	0x080051bc

080003c0 <HAL_CAN_RxFifo0MsgPendingCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 80003c8:	4b04      	ldr	r3, [pc, #16]	@ (80003dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80003ca:	4a05      	ldr	r2, [pc, #20]	@ (80003e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80003cc:	2100      	movs	r1, #0
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	f000 fe23 	bl	800101a <HAL_CAN_GetRxMessage>
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);

	//if (rxHeader.StdId == 0xF6) {
	//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
	//}
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	200000e4 	.word	0x200000e4
 80003e0:	200000b0 	.word	0x200000b0

080003e4 <_write>:
#include <usart.h>


/* USER CODE BEGIN 0 */
extern UART_HandleTypeDef huart2;
int _write(int file, char *p, int len){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)p, len, 10);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	230a      	movs	r3, #10
 80003f6:	68b9      	ldr	r1, [r7, #8]
 80003f8:	4803      	ldr	r0, [pc, #12]	@ (8000408 <_write+0x24>)
 80003fa:	f002 fac1 	bl	8002980 <HAL_UART_Transmit>
	return len;
 80003fe:	687b      	ldr	r3, [r7, #4]
}
 8000400:	4618      	mov	r0, r3
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000414 	.word	0x20000414

0800040c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000420:	4b2e      	ldr	r3, [pc, #184]	@ (80004dc <MX_GPIO_Init+0xd0>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a2d      	ldr	r2, [pc, #180]	@ (80004dc <MX_GPIO_Init+0xd0>)
 8000426:	f043 0310 	orr.w	r3, r3, #16
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b2b      	ldr	r3, [pc, #172]	@ (80004dc <MX_GPIO_Init+0xd0>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0310 	and.w	r3, r3, #16
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000438:	4b28      	ldr	r3, [pc, #160]	@ (80004dc <MX_GPIO_Init+0xd0>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a27      	ldr	r2, [pc, #156]	@ (80004dc <MX_GPIO_Init+0xd0>)
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b25      	ldr	r3, [pc, #148]	@ (80004dc <MX_GPIO_Init+0xd0>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0320 	and.w	r3, r3, #32
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b22      	ldr	r3, [pc, #136]	@ (80004dc <MX_GPIO_Init+0xd0>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a21      	ldr	r2, [pc, #132]	@ (80004dc <MX_GPIO_Init+0xd0>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <MX_GPIO_Init+0xd0>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	4b1c      	ldr	r3, [pc, #112]	@ (80004dc <MX_GPIO_Init+0xd0>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a1b      	ldr	r2, [pc, #108]	@ (80004dc <MX_GPIO_Init+0xd0>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b19      	ldr	r3, [pc, #100]	@ (80004dc <MX_GPIO_Init+0xd0>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	603b      	str	r3, [r7, #0]
 800047e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000486:	4816      	ldr	r0, [pc, #88]	@ (80004e0 <MX_GPIO_Init+0xd4>)
 8000488:	f001 fb94 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000492:	4814      	ldr	r0, [pc, #80]	@ (80004e4 <MX_GPIO_Init+0xd8>)
 8000494:	f001 fb8e 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8000498:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	2301      	movs	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a6:	2303      	movs	r3, #3
 80004a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	4619      	mov	r1, r3
 80004b0:	480b      	ldr	r0, [pc, #44]	@ (80004e0 <MX_GPIO_Init+0xd4>)
 80004b2:	f001 f9fb 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin;
 80004b6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80004ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004bc:	2301      	movs	r3, #1
 80004be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c4:	2303      	movs	r3, #3
 80004c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4619      	mov	r1, r3
 80004ce:	4805      	ldr	r0, [pc, #20]	@ (80004e4 <MX_GPIO_Init+0xd8>)
 80004d0:	f001 f9ec 	bl	80018ac <HAL_GPIO_Init>

}
 80004d4:	bf00      	nop
 80004d6:	3720      	adds	r7, #32
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40011000 	.word	0x40011000
 80004e4:	40010c00 	.word	0x40010c00

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b087      	sub	sp, #28
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fa8b 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f823 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f7ff ff89 	bl	800040c <MX_GPIO_Init>
  MX_CAN_Init();
 80004fa:	f7ff fe29 	bl	8000150 <MX_CAN_Init>
  MX_USART2_UART_Init();
 80004fe:	f000 f9e9 	bl	80008d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char data[20] = "Hello, world\r\n";
 8000502:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <main+0x4c>)
 8000504:	1d3c      	adds	r4, r7, #4
 8000506:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000508:	c407      	stmia	r4!, {r0, r1, r2}
 800050a:	8023      	strh	r3, [r4, #0]
 800050c:	3402      	adds	r4, #2
 800050e:	0c1b      	lsrs	r3, r3, #16
 8000510:	7023      	strb	r3, [r4, #0]
 8000512:	f107 0313 	add.w	r3, r7, #19
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	711a      	strb	r2, [r3, #4]
  printf("%s", data);
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	4619      	mov	r1, r3
 8000520:	4805      	ldr	r0, [pc, #20]	@ (8000538 <main+0x50>)
 8000522:	f003 feeb 	bl	80042fc <iprintf>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000526:	f7ff feb5 	bl	8000294 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800052a:	f002 fc14 	bl	8002d56 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052e:	bf00      	nop
 8000530:	e7fd      	b.n	800052e <main+0x46>
 8000532:	bf00      	nop
 8000534:	080051d0 	.word	0x080051d0
 8000538:	080051cc 	.word	0x080051cc

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b090      	sub	sp, #64	@ 0x40
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	2228      	movs	r2, #40	@ 0x28
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 f81e 	bl	800458c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055e:	2301      	movs	r3, #1
 8000560:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000562:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000566:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000578:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800057a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800057e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fb2d 	bl	8001be4 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000590:	f000 f82c 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2102      	movs	r1, #2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fd9a 	bl	80020e8 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ba:	f000 f817 	bl	80005ec <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3740      	adds	r7, #64	@ 0x40
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a04      	ldr	r2, [pc, #16]	@ (80005e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d101      	bne.n	80005de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005da:	f000 fa2b 	bl	8000a34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40000800 	.word	0x40000800

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <Error_Handler+0x8>

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fe:	4b18      	ldr	r3, [pc, #96]	@ (8000660 <HAL_MspInit+0x68>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a17      	ldr	r2, [pc, #92]	@ (8000660 <HAL_MspInit+0x68>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <HAL_MspInit+0x68>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <HAL_MspInit+0x68>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a11      	ldr	r2, [pc, #68]	@ (8000660 <HAL_MspInit+0x68>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <HAL_MspInit+0x68>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	210f      	movs	r1, #15
 8000632:	f06f 0001 	mvn.w	r0, #1
 8000636:	f001 f90e 	bl	8001856 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800063a:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <HAL_MspInit+0x6c>)
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <HAL_MspInit+0x6c>)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40021000 	.word	0x40021000
 8000664:	40010000 	.word	0x40010000

08000668 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08e      	sub	sp, #56	@ 0x38
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000670:	2300      	movs	r3, #0
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000674:	2300      	movs	r3, #0
 8000676:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000678:	2300      	movs	r3, #0
 800067a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800067e:	4b34      	ldr	r3, [pc, #208]	@ (8000750 <HAL_InitTick+0xe8>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a33      	ldr	r2, [pc, #204]	@ (8000750 <HAL_InitTick+0xe8>)
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b31      	ldr	r3, [pc, #196]	@ (8000750 <HAL_InitTick+0xe8>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000696:	f107 0210 	add.w	r2, r7, #16
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4611      	mov	r1, r2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fe91 	bl	80023c8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006a6:	6a3b      	ldr	r3, [r7, #32]
 80006a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d103      	bne.n	80006b8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006b0:	f001 fe62 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 80006b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80006b6:	e004      	b.n	80006c2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006b8:	f001 fe5e 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 80006bc:	4603      	mov	r3, r0
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006c4:	4a23      	ldr	r2, [pc, #140]	@ (8000754 <HAL_InitTick+0xec>)
 80006c6:	fba2 2303 	umull	r2, r3, r2, r3
 80006ca:	0c9b      	lsrs	r3, r3, #18
 80006cc:	3b01      	subs	r3, #1
 80006ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80006d0:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <HAL_InitTick+0xf0>)
 80006d2:	4a22      	ldr	r2, [pc, #136]	@ (800075c <HAL_InitTick+0xf4>)
 80006d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80006d6:	4b20      	ldr	r3, [pc, #128]	@ (8000758 <HAL_InitTick+0xf0>)
 80006d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006dc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80006de:	4a1e      	ldr	r2, [pc, #120]	@ (8000758 <HAL_InitTick+0xf0>)
 80006e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006e2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80006e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <HAL_InitTick+0xf0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <HAL_InitTick+0xf0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f0:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <HAL_InitTick+0xf0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80006f6:	4818      	ldr	r0, [pc, #96]	@ (8000758 <HAL_InitTick+0xf0>)
 80006f8:	f001 feb4 	bl	8002464 <HAL_TIM_Base_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000702:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000706:	2b00      	cmp	r3, #0
 8000708:	d11b      	bne.n	8000742 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800070a:	4813      	ldr	r0, [pc, #76]	@ (8000758 <HAL_InitTick+0xf0>)
 800070c:	f001 ff02 	bl	8002514 <HAL_TIM_Base_Start_IT>
 8000710:	4603      	mov	r3, r0
 8000712:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000716:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800071a:	2b00      	cmp	r3, #0
 800071c:	d111      	bne.n	8000742 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800071e:	201e      	movs	r0, #30
 8000720:	f001 f8b5 	bl	800188e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b0f      	cmp	r3, #15
 8000728:	d808      	bhi.n	800073c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800072a:	2200      	movs	r2, #0
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	201e      	movs	r0, #30
 8000730:	f001 f891 	bl	8001856 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000734:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <HAL_InitTick+0xf8>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	e002      	b.n	8000742 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800073c:	2301      	movs	r3, #1
 800073e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000742:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000746:	4618      	mov	r0, r3
 8000748:	3738      	adds	r7, #56	@ 0x38
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000
 8000754:	431bde83 	.word	0x431bde83
 8000758:	200003c8 	.word	0x200003c8
 800075c:	40000800 	.word	0x40000800
 8000760:	20000004 	.word	0x20000004

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <NMI_Handler+0x4>

0800076c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <HardFault_Handler+0x4>

08000774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <MemManage_Handler+0x4>

0800077c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <UsageFault_Handler+0x4>

0800078c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800079c:	4802      	ldr	r0, [pc, #8]	@ (80007a8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800079e:	f000 fd82 	bl	80012a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000088 	.word	0x20000088

080007ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80007b0:	4802      	ldr	r0, [pc, #8]	@ (80007bc <TIM4_IRQHandler+0x10>)
 80007b2:	f001 ff01 	bl	80025b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200003c8 	.word	0x200003c8

080007c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	e00a      	b.n	80007e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007d2:	f3af 8000 	nop.w
 80007d6:	4601      	mov	r1, r0
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	60ba      	str	r2, [r7, #8]
 80007de:	b2ca      	uxtb	r2, r1
 80007e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	3301      	adds	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dbf0      	blt.n	80007d2 <_read+0x12>
  }

  return len;
 80007f0:	687b      	ldr	r3, [r7, #4]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <_close>:
  }
  return len;
}

int _close(int file)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000820:	605a      	str	r2, [r3, #4]
  return 0;
 8000822:	2300      	movs	r3, #0
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <_isatty>:

int _isatty(int file)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000836:	2301      	movs	r3, #1
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000842:	b480      	push	{r7}
 8000844:	b085      	sub	sp, #20
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800084e:	2300      	movs	r3, #0
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
	...

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	@ (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	@ (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f003 ff22 	bl	80046d4 <__errno>
 8000890:	4603      	mov	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a05      	ldr	r2, [pc, #20]	@ (80008c0 <_sbrk+0x64>)
 80008ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20005000 	.word	0x20005000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	20000410 	.word	0x20000410
 80008c4:	20001300 	.word	0x20001300

080008c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_USART2_UART_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	@ (8000924 <MX_USART2_UART_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008de:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_USART2_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_USART2_UART_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_USART2_UART_Init+0x4c>)
 800090c:	f001 ffe8 	bl	80028e0 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000916:	f7ff fe69 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000414 	.word	0x20000414
 8000924:	40004400 	.word	0x40004400

08000928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a1b      	ldr	r2, [pc, #108]	@ (80009b0 <HAL_UART_MspInit+0x88>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d12f      	bne.n	80009a8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <HAL_UART_MspInit+0x8c>)
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	4a19      	ldr	r2, [pc, #100]	@ (80009b4 <HAL_UART_MspInit+0x8c>)
 800094e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000952:	61d3      	str	r3, [r2, #28]
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <HAL_UART_MspInit+0x8c>)
 8000956:	69db      	ldr	r3, [r3, #28]
 8000958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <HAL_UART_MspInit+0x8c>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a13      	ldr	r2, [pc, #76]	@ (80009b4 <HAL_UART_MspInit+0x8c>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <HAL_UART_MspInit+0x8c>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000978:	2304      	movs	r3, #4
 800097a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4619      	mov	r1, r3
 800098a:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <HAL_UART_MspInit+0x90>)
 800098c:	f000 ff8e 	bl	80018ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000990:	2308      	movs	r3, #8
 8000992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <HAL_UART_MspInit+0x90>)
 80009a4:	f000 ff82 	bl	80018ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40004400 	.word	0x40004400
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010800 	.word	0x40010800

080009bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009bc:	f7ff ff84 	bl	80008c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480b      	ldr	r0, [pc, #44]	@ (80009f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009c2:	490c      	ldr	r1, [pc, #48]	@ (80009f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009c4:	4a0c      	ldr	r2, [pc, #48]	@ (80009f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a09      	ldr	r2, [pc, #36]	@ (80009fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009d8:	4c09      	ldr	r4, [pc, #36]	@ (8000a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e6:	f003 fe7b 	bl	80046e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ea:	f7ff fd7d 	bl	80004e8 <main>
  bx lr
 80009ee:	4770      	bx	lr
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80009f8:	08005254 	.word	0x08005254
  ldr r2, =_sbss
 80009fc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a00:	20001300 	.word	0x20001300

08000a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_2_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a0c:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <HAL_Init+0x28>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a07      	ldr	r2, [pc, #28]	@ (8000a30 <HAL_Init+0x28>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 ff11 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1e:	200f      	movs	r0, #15
 8000a20:	f7ff fe22 	bl	8000668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a24:	f7ff fde8 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40022000 	.word	0x40022000

08000a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <HAL_IncTick+0x1c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <HAL_IncTick+0x20>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a03      	ldr	r2, [pc, #12]	@ (8000a54 <HAL_IncTick+0x20>)
 8000a46:	6013      	str	r3, [r2, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	20000008 	.word	0x20000008
 8000a54:	2000045c 	.word	0x2000045c

08000a58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b02      	ldr	r3, [pc, #8]	@ (8000a68 <HAL_GetTick+0x10>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	2000045c 	.word	0x2000045c

08000a6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d101      	bne.n	8000a7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e0ed      	b.n	8000c5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d102      	bne.n	8000a90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff fb96 	bl	80001bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0201 	orr.w	r2, r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000aa0:	f7ff ffda 	bl	8000a58 <HAL_GetTick>
 8000aa4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aa6:	e012      	b.n	8000ace <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aa8:	f7ff ffd6 	bl	8000a58 <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	2b0a      	cmp	r3, #10
 8000ab4:	d90b      	bls.n	8000ace <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2205      	movs	r2, #5
 8000ac6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e0c5      	b.n	8000c5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0e5      	beq.n	8000aa8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f022 0202 	bic.w	r2, r2, #2
 8000aea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000aec:	f7ff ffb4 	bl	8000a58 <HAL_GetTick>
 8000af0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000af2:	e012      	b.n	8000b1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000af4:	f7ff ffb0 	bl	8000a58 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b0a      	cmp	r3, #10
 8000b00:	d90b      	bls.n	8000b1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2205      	movs	r2, #5
 8000b12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e09f      	b.n	8000c5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1e5      	bne.n	8000af4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	7e1b      	ldrb	r3, [r3, #24]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d108      	bne.n	8000b42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	e007      	b.n	8000b52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	7e5b      	ldrb	r3, [r3, #25]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d108      	bne.n	8000b6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e007      	b.n	8000b7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	7e9b      	ldrb	r3, [r3, #26]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d108      	bne.n	8000b96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f042 0220 	orr.w	r2, r2, #32
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	e007      	b.n	8000ba6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 0220 	bic.w	r2, r2, #32
 8000ba4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	7edb      	ldrb	r3, [r3, #27]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d108      	bne.n	8000bc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 0210 	bic.w	r2, r2, #16
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	e007      	b.n	8000bd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f042 0210 	orr.w	r2, r2, #16
 8000bce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7f1b      	ldrb	r3, [r3, #28]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d108      	bne.n	8000bea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f042 0208 	orr.w	r2, r2, #8
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	e007      	b.n	8000bfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0208 	bic.w	r2, r2, #8
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	7f5b      	ldrb	r3, [r3, #29]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d108      	bne.n	8000c14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f042 0204 	orr.w	r2, r2, #4
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e007      	b.n	8000c24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f022 0204 	bic.w	r2, r2, #4
 8000c22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	691b      	ldr	r3, [r3, #16]
 8000c32:	431a      	orrs	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	ea42 0103 	orr.w	r1, r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	1e5a      	subs	r2, r3, #1
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	430a      	orrs	r2, r1
 8000c48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2201      	movs	r2, #1
 8000c54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b087      	sub	sp, #28
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c78:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c7a:	7cfb      	ldrb	r3, [r7, #19]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d003      	beq.n	8000c88 <HAL_CAN_ConfigFilter+0x26>
 8000c80:	7cfb      	ldrb	r3, [r7, #19]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	f040 80aa 	bne.w	8000ddc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c8e:	f043 0201 	orr.w	r2, r3, #1
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	f003 031f 	and.w	r3, r3, #31
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d123      	bne.n	8000d0a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	401a      	ands	r2, r3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ce4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3248      	adds	r2, #72	@ 0x48
 8000cea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cfe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d00:	6979      	ldr	r1, [r7, #20]
 8000d02:	3348      	adds	r3, #72	@ 0x48
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	440b      	add	r3, r1
 8000d08:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d122      	bne.n	8000d58 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3248      	adds	r2, #72	@ 0x48
 8000d38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d4e:	6979      	ldr	r1, [r7, #20]
 8000d50:	3348      	adds	r3, #72	@ 0x48
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	440b      	add	r3, r1
 8000d56:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d109      	bne.n	8000d74 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000d72:	e007      	b.n	8000d84 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d109      	bne.n	8000da0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000d9e:	e007      	b.n	8000db0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	431a      	orrs	r2, r3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d107      	bne.n	8000dc8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000dce:	f023 0201 	bic.w	r2, r3, #1
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e006      	b.n	8000dea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
  }
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	371c      	adds	r7, #28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d12e      	bne.n	8000e66 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0201 	bic.w	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e20:	f7ff fe1a 	bl	8000a58 <HAL_GetTick>
 8000e24:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e26:	e012      	b.n	8000e4e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e28:	f7ff fe16 	bl	8000a58 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b0a      	cmp	r3, #10
 8000e34:	d90b      	bls.n	8000e4e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2205      	movs	r2, #5
 8000e46:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e012      	b.n	8000e74 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1e5      	bne.n	8000e28 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e006      	b.n	8000e74 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
  }
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	@ 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e90:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e9a:	7ffb      	ldrb	r3, [r7, #31]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d003      	beq.n	8000ea8 <HAL_CAN_AddTxMessage+0x2c>
 8000ea0:	7ffb      	ldrb	r3, [r7, #31]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	f040 80ad 	bne.w	8001002 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10a      	bne.n	8000ec8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d105      	bne.n	8000ec8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 8095 	beq.w	8000ff2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	0e1b      	lsrs	r3, r3, #24
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10d      	bne.n	8000f00 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000eee:	68f9      	ldr	r1, [r7, #12]
 8000ef0:	6809      	ldr	r1, [r1, #0]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3318      	adds	r3, #24
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	440b      	add	r3, r1
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e00f      	b.n	8000f20 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f0a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f10:	68f9      	ldr	r1, [r7, #12]
 8000f12:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f14:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3318      	adds	r3, #24
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	440b      	add	r3, r1
 8000f1e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6819      	ldr	r1, [r3, #0]
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3318      	adds	r3, #24
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	440b      	add	r3, r1
 8000f30:	3304      	adds	r3, #4
 8000f32:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	7d1b      	ldrb	r3, [r3, #20]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d111      	bne.n	8000f60 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3318      	adds	r3, #24
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	4413      	add	r3, r2
 8000f48:	3304      	adds	r3, #4
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	6811      	ldr	r1, [r2, #0]
 8000f50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3318      	adds	r3, #24
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3307      	adds	r3, #7
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	061a      	lsls	r2, r3, #24
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3306      	adds	r3, #6
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	041b      	lsls	r3, r3, #16
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3305      	adds	r3, #5
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	3204      	adds	r2, #4
 8000f80:	7812      	ldrb	r2, [r2, #0]
 8000f82:	4610      	mov	r0, r2
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	6811      	ldr	r1, [r2, #0]
 8000f88:	ea43 0200 	orr.w	r2, r3, r0
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	440b      	add	r3, r1
 8000f92:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000f96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3303      	adds	r3, #3
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	061a      	lsls	r2, r3, #24
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	041b      	lsls	r3, r3, #16
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3301      	adds	r3, #1
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	7812      	ldrb	r2, [r2, #0]
 8000fb8:	4610      	mov	r0, r2
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	6811      	ldr	r1, [r2, #0]
 8000fbe:	ea43 0200 	orr.w	r2, r3, r0
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000fcc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3318      	adds	r3, #24
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	4413      	add	r3, r2
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	6811      	ldr	r1, [r2, #0]
 8000fe0:	f043 0201 	orr.w	r2, r3, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3318      	adds	r3, #24
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	440b      	add	r3, r1
 8000fec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e00e      	b.n	8001010 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e006      	b.n	8001010 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001006:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
  }
}
 8001010:	4618      	mov	r0, r3
 8001012:	3724      	adds	r7, #36	@ 0x24
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800101a:	b480      	push	{r7}
 800101c:	b087      	sub	sp, #28
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800102e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d003      	beq.n	800103e <HAL_CAN_GetRxMessage+0x24>
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	2b02      	cmp	r3, #2
 800103a:	f040 8103 	bne.w	8001244 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10e      	bne.n	8001062 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d116      	bne.n	8001080 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001056:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e0f7      	b.n	8001252 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d107      	bne.n	8001080 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001074:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e0e8      	b.n	8001252 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	331b      	adds	r3, #27
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	4413      	add	r3, r2
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0204 	and.w	r2, r3, #4
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10c      	bne.n	80010b8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	331b      	adds	r3, #27
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	4413      	add	r3, r2
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	0d5b      	lsrs	r3, r3, #21
 80010ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e00b      	b.n	80010d0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	331b      	adds	r3, #27
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	4413      	add	r3, r2
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	08db      	lsrs	r3, r3, #3
 80010c8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	331b      	adds	r3, #27
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	4413      	add	r3, r2
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0202 	and.w	r2, r3, #2
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	331b      	adds	r3, #27
 80010ee:	011b      	lsls	r3, r3, #4
 80010f0:	4413      	add	r3, r2
 80010f2:	3304      	adds	r3, #4
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2208      	movs	r2, #8
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	e00b      	b.n	800111e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	331b      	adds	r3, #27
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	4413      	add	r3, r2
 8001112:	3304      	adds	r3, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 020f 	and.w	r2, r3, #15
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	331b      	adds	r3, #27
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	4413      	add	r3, r2
 800112a:	3304      	adds	r3, #4
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	0a1b      	lsrs	r3, r3, #8
 8001130:	b2da      	uxtb	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	331b      	adds	r3, #27
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	4413      	add	r3, r2
 8001142:	3304      	adds	r3, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	0c1b      	lsrs	r3, r3, #16
 8001148:	b29a      	uxth	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	4413      	add	r3, r2
 8001158:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	4413      	add	r3, r2
 800116e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	0a1a      	lsrs	r2, r3, #8
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	4413      	add	r3, r2
 8001188:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	0c1a      	lsrs	r2, r3, #16
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	3302      	adds	r3, #2
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	4413      	add	r3, r2
 80011a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	0e1a      	lsrs	r2, r3, #24
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3303      	adds	r3, #3
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	4413      	add	r3, r2
 80011bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	3304      	adds	r3, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	4413      	add	r3, r2
 80011d4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	0a1a      	lsrs	r2, r3, #8
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	3305      	adds	r3, #5
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	4413      	add	r3, r2
 80011ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	0c1a      	lsrs	r2, r3, #16
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3306      	adds	r3, #6
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	4413      	add	r3, r2
 8001208:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	0e1a      	lsrs	r2, r3, #24
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	3307      	adds	r3, #7
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d108      	bne.n	8001230 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0220 	orr.w	r2, r2, #32
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	e007      	b.n	8001240 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0220 	orr.w	r2, r2, #32
 800123e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	e006      	b.n	8001252 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001248:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
  }
}
 8001252:	4618      	mov	r0, r3
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d002      	beq.n	800127a <HAL_CAN_ActivateNotification+0x1e>
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d109      	bne.n	800128e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6959      	ldr	r1, [r3, #20]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e006      	b.n	800129c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001292:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
  }
}
 800129c:	4618      	mov	r0, r3
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b08a      	sub	sp, #40	@ 0x28
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d07c      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d023      	beq.n	800133e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2201      	movs	r2, #1
 80012fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f983 	bl	8001614 <HAL_CAN_TxMailbox0CompleteCallback>
 800130e:	e016      	b.n	800133e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	d004      	beq.n	8001324 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
 8001322:	e00c      	b.n	800133e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d004      	beq.n	8001338 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800132e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001330:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
 8001336:	e002      	b.n	800133e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f986 	bl	800164a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d024      	beq.n	8001392 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001350:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f962 	bl	8001626 <HAL_CAN_TxMailbox1CompleteCallback>
 8001362:	e016      	b.n	8001392 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800136a:	2b00      	cmp	r3, #0
 800136c:	d004      	beq.n	8001378 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
 8001376:	e00c      	b.n	8001392 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
 800138a:	e002      	b.n	8001392 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f965 	bl	800165c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d024      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f941 	bl	8001638 <HAL_CAN_TxMailbox2CompleteCallback>
 80013b6:	e016      	b.n	80013e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d004      	beq.n	80013cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ca:	e00c      	b.n	80013e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80013de:	e002      	b.n	80013e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f944 	bl	800166e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	f003 0308 	and.w	r3, r3, #8
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00c      	beq.n	800140a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d007      	beq.n	800140a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2210      	movs	r2, #16
 8001408:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00b      	beq.n	800142c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2208      	movs	r2, #8
 8001424:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f92a 	bl	8001680 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d009      	beq.n	800144a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7fe ffbb 	bl	80003c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00c      	beq.n	800146e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b00      	cmp	r3, #0
 800145c:	d007      	beq.n	800146e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001460:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2210      	movs	r2, #16
 800146c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00b      	beq.n	8001490 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d006      	beq.n	8001490 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2208      	movs	r2, #8
 8001488:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f90a 	bl	80016a4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	2b00      	cmp	r3, #0
 8001498:	d009      	beq.n	80014ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f8f2 	bl	8001692 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00b      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2210      	movs	r2, #16
 80014c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f8f3 	bl	80016b6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00b      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2208      	movs	r2, #8
 80014ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f8eb 	bl	80016c8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d07b      	beq.n	80015f4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	2b00      	cmp	r3, #0
 8001504:	d072      	beq.n	80015ec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150c:	2b00      	cmp	r3, #0
 800150e:	d008      	beq.n	8001522 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001560:	2b00      	cmp	r3, #0
 8001562:	d043      	beq.n	80015ec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800156a:	2b00      	cmp	r3, #0
 800156c:	d03e      	beq.n	80015ec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001574:	2b60      	cmp	r3, #96	@ 0x60
 8001576:	d02b      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x32a>
 8001578:	2b60      	cmp	r3, #96	@ 0x60
 800157a:	d82e      	bhi.n	80015da <HAL_CAN_IRQHandler+0x334>
 800157c:	2b50      	cmp	r3, #80	@ 0x50
 800157e:	d022      	beq.n	80015c6 <HAL_CAN_IRQHandler+0x320>
 8001580:	2b50      	cmp	r3, #80	@ 0x50
 8001582:	d82a      	bhi.n	80015da <HAL_CAN_IRQHandler+0x334>
 8001584:	2b40      	cmp	r3, #64	@ 0x40
 8001586:	d019      	beq.n	80015bc <HAL_CAN_IRQHandler+0x316>
 8001588:	2b40      	cmp	r3, #64	@ 0x40
 800158a:	d826      	bhi.n	80015da <HAL_CAN_IRQHandler+0x334>
 800158c:	2b30      	cmp	r3, #48	@ 0x30
 800158e:	d010      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x30c>
 8001590:	2b30      	cmp	r3, #48	@ 0x30
 8001592:	d822      	bhi.n	80015da <HAL_CAN_IRQHandler+0x334>
 8001594:	2b10      	cmp	r3, #16
 8001596:	d002      	beq.n	800159e <HAL_CAN_IRQHandler+0x2f8>
 8001598:	2b20      	cmp	r3, #32
 800159a:	d005      	beq.n	80015a8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800159c:	e01d      	b.n	80015da <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015a6:	e019      	b.n	80015dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015aa:	f043 0310 	orr.w	r3, r3, #16
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015b0:	e014      	b.n	80015dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	f043 0320 	orr.w	r3, r3, #32
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015ba:	e00f      	b.n	80015dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015c4:	e00a      	b.n	80015dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015ce:	e005      	b.n	80015dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015d8:	e000      	b.n	80015dc <HAL_CAN_IRQHandler+0x336>
            break;
 80015da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699a      	ldr	r2, [r3, #24]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80015ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2204      	movs	r2, #4
 80015f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f867 	bl	80016da <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800160c:	bf00      	nop
 800160e:	3728      	adds	r7, #40	@ 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4906      	ldr	r1, [pc, #24]	@ (8001784 <__NVIC_EnableIRQ+0x34>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	@ (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	@ (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	@ 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff4f 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff64 	bl	8001734 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ffb2 	bl	80017dc <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff81 	bl	8001788 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff57 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b08b      	sub	sp, #44	@ 0x2c
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018be:	e169      	b.n	8001b94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018c0:	2201      	movs	r2, #1
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	429a      	cmp	r2, r3
 80018da:	f040 8158 	bne.w	8001b8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4a9a      	ldr	r2, [pc, #616]	@ (8001b4c <HAL_GPIO_Init+0x2a0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d05e      	beq.n	80019a6 <HAL_GPIO_Init+0xfa>
 80018e8:	4a98      	ldr	r2, [pc, #608]	@ (8001b4c <HAL_GPIO_Init+0x2a0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d875      	bhi.n	80019da <HAL_GPIO_Init+0x12e>
 80018ee:	4a98      	ldr	r2, [pc, #608]	@ (8001b50 <HAL_GPIO_Init+0x2a4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d058      	beq.n	80019a6 <HAL_GPIO_Init+0xfa>
 80018f4:	4a96      	ldr	r2, [pc, #600]	@ (8001b50 <HAL_GPIO_Init+0x2a4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d86f      	bhi.n	80019da <HAL_GPIO_Init+0x12e>
 80018fa:	4a96      	ldr	r2, [pc, #600]	@ (8001b54 <HAL_GPIO_Init+0x2a8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d052      	beq.n	80019a6 <HAL_GPIO_Init+0xfa>
 8001900:	4a94      	ldr	r2, [pc, #592]	@ (8001b54 <HAL_GPIO_Init+0x2a8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d869      	bhi.n	80019da <HAL_GPIO_Init+0x12e>
 8001906:	4a94      	ldr	r2, [pc, #592]	@ (8001b58 <HAL_GPIO_Init+0x2ac>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d04c      	beq.n	80019a6 <HAL_GPIO_Init+0xfa>
 800190c:	4a92      	ldr	r2, [pc, #584]	@ (8001b58 <HAL_GPIO_Init+0x2ac>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d863      	bhi.n	80019da <HAL_GPIO_Init+0x12e>
 8001912:	4a92      	ldr	r2, [pc, #584]	@ (8001b5c <HAL_GPIO_Init+0x2b0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d046      	beq.n	80019a6 <HAL_GPIO_Init+0xfa>
 8001918:	4a90      	ldr	r2, [pc, #576]	@ (8001b5c <HAL_GPIO_Init+0x2b0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d85d      	bhi.n	80019da <HAL_GPIO_Init+0x12e>
 800191e:	2b12      	cmp	r3, #18
 8001920:	d82a      	bhi.n	8001978 <HAL_GPIO_Init+0xcc>
 8001922:	2b12      	cmp	r3, #18
 8001924:	d859      	bhi.n	80019da <HAL_GPIO_Init+0x12e>
 8001926:	a201      	add	r2, pc, #4	@ (adr r2, 800192c <HAL_GPIO_Init+0x80>)
 8001928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192c:	080019a7 	.word	0x080019a7
 8001930:	08001981 	.word	0x08001981
 8001934:	08001993 	.word	0x08001993
 8001938:	080019d5 	.word	0x080019d5
 800193c:	080019db 	.word	0x080019db
 8001940:	080019db 	.word	0x080019db
 8001944:	080019db 	.word	0x080019db
 8001948:	080019db 	.word	0x080019db
 800194c:	080019db 	.word	0x080019db
 8001950:	080019db 	.word	0x080019db
 8001954:	080019db 	.word	0x080019db
 8001958:	080019db 	.word	0x080019db
 800195c:	080019db 	.word	0x080019db
 8001960:	080019db 	.word	0x080019db
 8001964:	080019db 	.word	0x080019db
 8001968:	080019db 	.word	0x080019db
 800196c:	080019db 	.word	0x080019db
 8001970:	08001989 	.word	0x08001989
 8001974:	0800199d 	.word	0x0800199d
 8001978:	4a79      	ldr	r2, [pc, #484]	@ (8001b60 <HAL_GPIO_Init+0x2b4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800197e:	e02c      	b.n	80019da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e029      	b.n	80019dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	3304      	adds	r3, #4
 800198e:	623b      	str	r3, [r7, #32]
          break;
 8001990:	e024      	b.n	80019dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	3308      	adds	r3, #8
 8001998:	623b      	str	r3, [r7, #32]
          break;
 800199a:	e01f      	b.n	80019dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	330c      	adds	r3, #12
 80019a2:	623b      	str	r3, [r7, #32]
          break;
 80019a4:	e01a      	b.n	80019dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d102      	bne.n	80019b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ae:	2304      	movs	r3, #4
 80019b0:	623b      	str	r3, [r7, #32]
          break;
 80019b2:	e013      	b.n	80019dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d105      	bne.n	80019c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019bc:	2308      	movs	r3, #8
 80019be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	611a      	str	r2, [r3, #16]
          break;
 80019c6:	e009      	b.n	80019dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019c8:	2308      	movs	r3, #8
 80019ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	615a      	str	r2, [r3, #20]
          break;
 80019d2:	e003      	b.n	80019dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
          break;
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_Init+0x130>
          break;
 80019da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	2bff      	cmp	r3, #255	@ 0xff
 80019e0:	d801      	bhi.n	80019e6 <HAL_GPIO_Init+0x13a>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	e001      	b.n	80019ea <HAL_GPIO_Init+0x13e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3304      	adds	r3, #4
 80019ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2bff      	cmp	r3, #255	@ 0xff
 80019f0:	d802      	bhi.n	80019f8 <HAL_GPIO_Init+0x14c>
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	e002      	b.n	80019fe <HAL_GPIO_Init+0x152>
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	3b08      	subs	r3, #8
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	210f      	movs	r1, #15
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	401a      	ands	r2, r3
 8001a10:	6a39      	ldr	r1, [r7, #32]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 80b1 	beq.w	8001b8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a2c:	4b4d      	ldr	r3, [pc, #308]	@ (8001b64 <HAL_GPIO_Init+0x2b8>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	4a4c      	ldr	r2, [pc, #304]	@ (8001b64 <HAL_GPIO_Init+0x2b8>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6193      	str	r3, [r2, #24]
 8001a38:	4b4a      	ldr	r3, [pc, #296]	@ (8001b64 <HAL_GPIO_Init+0x2b8>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a44:	4a48      	ldr	r2, [pc, #288]	@ (8001b68 <HAL_GPIO_Init+0x2bc>)
 8001a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a40      	ldr	r2, [pc, #256]	@ (8001b6c <HAL_GPIO_Init+0x2c0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d013      	beq.n	8001a98 <HAL_GPIO_Init+0x1ec>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a3f      	ldr	r2, [pc, #252]	@ (8001b70 <HAL_GPIO_Init+0x2c4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d00d      	beq.n	8001a94 <HAL_GPIO_Init+0x1e8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b74 <HAL_GPIO_Init+0x2c8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d007      	beq.n	8001a90 <HAL_GPIO_Init+0x1e4>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a3d      	ldr	r2, [pc, #244]	@ (8001b78 <HAL_GPIO_Init+0x2cc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d101      	bne.n	8001a8c <HAL_GPIO_Init+0x1e0>
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e006      	b.n	8001a9a <HAL_GPIO_Init+0x1ee>
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	e004      	b.n	8001a9a <HAL_GPIO_Init+0x1ee>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e002      	b.n	8001a9a <HAL_GPIO_Init+0x1ee>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_GPIO_Init+0x1ee>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a9c:	f002 0203 	and.w	r2, r2, #3
 8001aa0:	0092      	lsls	r2, r2, #2
 8001aa2:	4093      	lsls	r3, r2
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aaa:	492f      	ldr	r1, [pc, #188]	@ (8001b68 <HAL_GPIO_Init+0x2bc>)
 8001aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	492c      	ldr	r1, [pc, #176]	@ (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	4928      	ldr	r1, [pc, #160]	@ (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d006      	beq.n	8001afa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aec:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	4922      	ldr	r1, [pc, #136]	@ (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
 8001af8:	e006      	b.n	8001b08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001afa:	4b20      	ldr	r3, [pc, #128]	@ (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	491e      	ldr	r1, [pc, #120]	@ (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b14:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	4918      	ldr	r1, [pc, #96]	@ (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b22:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	4914      	ldr	r1, [pc, #80]	@ (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d021      	beq.n	8001b80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	490e      	ldr	r1, [pc, #56]	@ (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]
 8001b48:	e021      	b.n	8001b8e <HAL_GPIO_Init+0x2e2>
 8001b4a:	bf00      	nop
 8001b4c:	10320000 	.word	0x10320000
 8001b50:	10310000 	.word	0x10310000
 8001b54:	10220000 	.word	0x10220000
 8001b58:	10210000 	.word	0x10210000
 8001b5c:	10120000 	.word	0x10120000
 8001b60:	10110000 	.word	0x10110000
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	40010800 	.word	0x40010800
 8001b70:	40010c00 	.word	0x40010c00
 8001b74:	40011000 	.word	0x40011000
 8001b78:	40011400 	.word	0x40011400
 8001b7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b80:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4909      	ldr	r1, [pc, #36]	@ (8001bb0 <HAL_GPIO_Init+0x304>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b90:	3301      	adds	r3, #1
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f47f ae8e 	bne.w	80018c0 <HAL_GPIO_Init+0x14>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	372c      	adds	r7, #44	@ 0x2c
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	40010400 	.word	0x40010400

08001bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bd0:	e003      	b.n	8001bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	041a      	lsls	r2, r3, #16
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e272      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8087 	beq.w	8001d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c04:	4b92      	ldr	r3, [pc, #584]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d00c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c10:	4b8f      	ldr	r3, [pc, #572]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d112      	bne.n	8001c42 <HAL_RCC_OscConfig+0x5e>
 8001c1c:	4b8c      	ldr	r3, [pc, #560]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c28:	d10b      	bne.n	8001c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2a:	4b89      	ldr	r3, [pc, #548]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d06c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x12c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d168      	bne.n	8001d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e24c      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x76>
 8001c4c:	4b80      	ldr	r3, [pc, #512]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a7f      	ldr	r2, [pc, #508]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	e02e      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x98>
 8001c62:	4b7b      	ldr	r3, [pc, #492]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a7a      	ldr	r2, [pc, #488]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b78      	ldr	r3, [pc, #480]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a77      	ldr	r2, [pc, #476]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e01d      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xbc>
 8001c86:	4b72      	ldr	r3, [pc, #456]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a71      	ldr	r2, [pc, #452]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b6f      	ldr	r3, [pc, #444]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6e      	ldr	r2, [pc, #440]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a6a      	ldr	r2, [pc, #424]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b68      	ldr	r3, [pc, #416]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a67      	ldr	r2, [pc, #412]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7fe feca 	bl	8000a58 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7fe fec6 	bl	8000a58 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	@ 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e200      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b5d      	ldr	r3, [pc, #372]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xe4>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7fe feb6 	bl	8000a58 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7fe feb2 	bl	8000a58 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	@ 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1ec      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	4b53      	ldr	r3, [pc, #332]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x10c>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d063      	beq.n	8001de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d2a:	4b49      	ldr	r3, [pc, #292]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d11c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x18c>
 8001d36:	4b46      	ldr	r3, [pc, #280]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d116      	bne.n	8001d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	4b43      	ldr	r3, [pc, #268]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x176>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e1c0      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4939      	ldr	r1, [pc, #228]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	e03a      	b.n	8001de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d78:	4b36      	ldr	r3, [pc, #216]	@ (8001e54 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7fe fe6b 	bl	8000a58 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d86:	f7fe fe67 	bl	8000a58 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e1a1      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	4b2d      	ldr	r3, [pc, #180]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4927      	ldr	r1, [pc, #156]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b26      	ldr	r3, [pc, #152]	@ (8001e54 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fe4a 	bl	8000a58 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7fe fe46 	bl	8000a58 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e180      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d03a      	beq.n	8001e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d019      	beq.n	8001e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b17      	ldr	r3, [pc, #92]	@ (8001e58 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7fe fe2a 	bl	8000a58 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e08:	f7fe fe26 	bl	8000a58 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e160      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f000 fafe 	bl	8002428 <RCC_Delay>
 8001e2c:	e01c      	b.n	8001e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <HAL_RCC_OscConfig+0x274>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7fe fe10 	bl	8000a58 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3a:	e00f      	b.n	8001e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7fe fe0c 	bl	8000a58 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d908      	bls.n	8001e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e146      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	42420000 	.word	0x42420000
 8001e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	4b92      	ldr	r3, [pc, #584]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e9      	bne.n	8001e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a6 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7a:	4b8b      	ldr	r3, [pc, #556]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10d      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b88      	ldr	r3, [pc, #544]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a87      	ldr	r2, [pc, #540]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	61d3      	str	r3, [r2, #28]
 8001e92:	4b85      	ldr	r3, [pc, #532]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b82      	ldr	r3, [pc, #520]	@ (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d118      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eae:	4b7f      	ldr	r3, [pc, #508]	@ (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eba:	f7fe fdcd 	bl	8000a58 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec2:	f7fe fdc9 	bl	8000a58 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b64      	cmp	r3, #100	@ 0x64
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e103      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed4:	4b75      	ldr	r3, [pc, #468]	@ (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x312>
 8001ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a6e      	ldr	r2, [pc, #440]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	e02d      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x334>
 8001efe:	4b6a      	ldr	r3, [pc, #424]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a69      	ldr	r2, [pc, #420]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6213      	str	r3, [r2, #32]
 8001f0a:	4b67      	ldr	r3, [pc, #412]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a66      	ldr	r2, [pc, #408]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 0304 	bic.w	r3, r3, #4
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	e01c      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b05      	cmp	r3, #5
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0x356>
 8001f20:	4b61      	ldr	r3, [pc, #388]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a60      	ldr	r2, [pc, #384]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	4b5e      	ldr	r3, [pc, #376]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a5d      	ldr	r2, [pc, #372]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	e00b      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a5a      	ldr	r2, [pc, #360]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	4b58      	ldr	r3, [pc, #352]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a57      	ldr	r2, [pc, #348]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d015      	beq.n	8001f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7fe fd7d 	bl	8000a58 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe fd79 	bl	8000a58 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0b1      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	4b4b      	ldr	r3, [pc, #300]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0ee      	beq.n	8001f62 <HAL_RCC_OscConfig+0x37e>
 8001f84:	e014      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7fe fd67 	bl	8000a58 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fd63 	bl	8000a58 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e09b      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa4:	4b40      	ldr	r3, [pc, #256]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ee      	bne.n	8001f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d105      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a3b      	ldr	r2, [pc, #236]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8087 	beq.w	80020da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fcc:	4b36      	ldr	r3, [pc, #216]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d061      	beq.n	800209c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d146      	bne.n	800206e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe0:	4b33      	ldr	r3, [pc, #204]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7fe fd37 	bl	8000a58 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7fe fd33 	bl	8000a58 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e06d      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002000:	4b29      	ldr	r3, [pc, #164]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002014:	d108      	bne.n	8002028 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002016:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4921      	ldr	r1, [pc, #132]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002028:	4b1f      	ldr	r3, [pc, #124]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a19      	ldr	r1, [r3, #32]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002038:	430b      	orrs	r3, r1
 800203a:	491b      	ldr	r1, [pc, #108]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002040:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7fe fd07 	bl	8000a58 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204e:	f7fe fd03 	bl	8000a58 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e03d      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002060:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x46a>
 800206c:	e035      	b.n	80020da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7fe fcf0 	bl	8000a58 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207c:	f7fe fcec 	bl	8000a58 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e026      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208e:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x498>
 800209a:	e01e      	b.n	80020da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e019      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
 80020b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b4:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <HAL_RCC_OscConfig+0x500>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000

080020e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0d0      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020fc:	4b6a      	ldr	r3, [pc, #424]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d910      	bls.n	800212c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b67      	ldr	r3, [pc, #412]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 0207 	bic.w	r2, r3, #7
 8002112:	4965      	ldr	r1, [pc, #404]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b63      	ldr	r3, [pc, #396]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0b8      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d020      	beq.n	800217a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002144:	4b59      	ldr	r3, [pc, #356]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a58      	ldr	r2, [pc, #352]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800214e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800215c:	4b53      	ldr	r3, [pc, #332]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4a52      	ldr	r2, [pc, #328]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002166:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b50      	ldr	r3, [pc, #320]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	494d      	ldr	r1, [pc, #308]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d040      	beq.n	8002208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b47      	ldr	r3, [pc, #284]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d115      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e07f      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a6:	4b41      	ldr	r3, [pc, #260]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e073      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b6:	4b3d      	ldr	r3, [pc, #244]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06b      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c6:	4b39      	ldr	r3, [pc, #228]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f023 0203 	bic.w	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4936      	ldr	r1, [pc, #216]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d8:	f7fe fc3e 	bl	8000a58 <HAL_GetTick>
 80021dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e0:	f7fe fc3a 	bl	8000a58 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e053      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	4b2d      	ldr	r3, [pc, #180]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 020c 	and.w	r2, r3, #12
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	429a      	cmp	r2, r3
 8002206:	d1eb      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002208:	4b27      	ldr	r3, [pc, #156]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d210      	bcs.n	8002238 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b24      	ldr	r3, [pc, #144]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0207 	bic.w	r2, r3, #7
 800221e:	4922      	ldr	r1, [pc, #136]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b20      	ldr	r3, [pc, #128]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e032      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002244:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4916      	ldr	r1, [pc, #88]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002262:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	490e      	ldr	r1, [pc, #56]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002276:	f000 f821 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 800227a:	4602      	mov	r2, r0
 800227c:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	490a      	ldr	r1, [pc, #40]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002288:	5ccb      	ldrb	r3, [r1, r3]
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	4a09      	ldr	r2, [pc, #36]	@ (80022b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002292:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe f9e6 	bl	8000668 <HAL_InitTick>

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40022000 	.word	0x40022000
 80022ac:	40021000 	.word	0x40021000
 80022b0:	080051ec 	.word	0x080051ec
 80022b4:	20000000 	.word	0x20000000
 80022b8:	20000004 	.word	0x20000004

080022bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x94>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d002      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x30>
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d003      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x36>
 80022ea:	e027      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ec:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ee:	613b      	str	r3, [r7, #16]
      break;
 80022f0:	e027      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	0c9b      	lsrs	r3, r3, #18
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	4a17      	ldr	r2, [pc, #92]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022fc:	5cd3      	ldrb	r3, [r2, r3]
 80022fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d010      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800230a:	4b11      	ldr	r3, [pc, #68]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x94>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0c5b      	lsrs	r3, r3, #17
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	4a11      	ldr	r2, [pc, #68]	@ (800235c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a0d      	ldr	r2, [pc, #52]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 800231e:	fb03 f202 	mul.w	r2, r3, r2
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	e004      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a0c      	ldr	r2, [pc, #48]	@ (8002360 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	613b      	str	r3, [r7, #16]
      break;
 800233a:	e002      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 800233e:	613b      	str	r3, [r7, #16]
      break;
 8002340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002342:	693b      	ldr	r3, [r7, #16]
}
 8002344:	4618      	mov	r0, r3
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	007a1200 	.word	0x007a1200
 8002358:	08005204 	.word	0x08005204
 800235c:	08005214 	.word	0x08005214
 8002360:	003d0900 	.word	0x003d0900

08002364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002368:	4b02      	ldr	r3, [pc, #8]	@ (8002374 <HAL_RCC_GetHCLKFreq+0x10>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	20000000 	.word	0x20000000

08002378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800237c:	f7ff fff2 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	4903      	ldr	r1, [pc, #12]	@ (800239c <HAL_RCC_GetPCLK1Freq+0x24>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	080051fc 	.word	0x080051fc

080023a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a4:	f7ff ffde 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	0adb      	lsrs	r3, r3, #11
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	4903      	ldr	r1, [pc, #12]	@ (80023c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b6:	5ccb      	ldrb	r3, [r1, r3]
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000
 80023c4:	080051fc 	.word	0x080051fc

080023c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	220f      	movs	r2, #15
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023d8:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <HAL_RCC_GetClockConfig+0x58>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0203 	and.w	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_RCC_GetClockConfig+0x58>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_GetClockConfig+0x58>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80023fc:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <HAL_RCC_GetClockConfig+0x58>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_RCC_GetClockConfig+0x5c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0207 	and.w	r2, r3, #7
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr
 8002420:	40021000 	.word	0x40021000
 8002424:	40022000 	.word	0x40022000

08002428 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002430:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <RCC_Delay+0x34>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0a      	ldr	r2, [pc, #40]	@ (8002460 <RCC_Delay+0x38>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0a5b      	lsrs	r3, r3, #9
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002444:	bf00      	nop
  }
  while (Delay --);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1e5a      	subs	r2, r3, #1
 800244a:	60fa      	str	r2, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f9      	bne.n	8002444 <RCC_Delay+0x1c>
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	20000000 	.word	0x20000000
 8002460:	10624dd3 	.word	0x10624dd3

08002464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e041      	b.n	80024fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f839 	bl	8002502 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3304      	adds	r3, #4
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f000 f99c 	bl	80027e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d001      	beq.n	800252c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e03a      	b.n	80025a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a18      	ldr	r2, [pc, #96]	@ (80025ac <HAL_TIM_Base_Start_IT+0x98>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00e      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x58>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002556:	d009      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x58>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a14      	ldr	r2, [pc, #80]	@ (80025b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d004      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x58>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a13      	ldr	r2, [pc, #76]	@ (80025b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d111      	bne.n	8002590 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b06      	cmp	r3, #6
 800257c:	d010      	beq.n	80025a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258e:	e007      	b.n	80025a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	40000400 	.word	0x40000400
 80025b4:	40000800 	.word	0x40000800

080025b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d020      	beq.n	800261c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01b      	beq.n	800261c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0202 	mvn.w	r2, #2
 80025ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8d1 	bl	80027aa <HAL_TIM_IC_CaptureCallback>
 8002608:	e005      	b.n	8002616 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8c4 	bl	8002798 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f8d3 	bl	80027bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	d020      	beq.n	8002668 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01b      	beq.n	8002668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0204 	mvn.w	r2, #4
 8002638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2202      	movs	r2, #2
 800263e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f8ab 	bl	80027aa <HAL_TIM_IC_CaptureCallback>
 8002654:	e005      	b.n	8002662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f89e 	bl	8002798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f8ad 	bl	80027bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d020      	beq.n	80026b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01b      	beq.n	80026b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0208 	mvn.w	r2, #8
 8002684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2204      	movs	r2, #4
 800268a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f885 	bl	80027aa <HAL_TIM_IC_CaptureCallback>
 80026a0:	e005      	b.n	80026ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f878 	bl	8002798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f887 	bl	80027bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d020      	beq.n	8002700 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01b      	beq.n	8002700 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0210 	mvn.w	r2, #16
 80026d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2208      	movs	r2, #8
 80026d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f85f 	bl	80027aa <HAL_TIM_IC_CaptureCallback>
 80026ec:	e005      	b.n	80026fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f852 	bl	8002798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f861 	bl	80027bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00c      	beq.n	8002724 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0201 	mvn.w	r2, #1
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fd ff52 	bl	80005c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f8c3 	bl	80028ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00c      	beq.n	800276c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f831 	bl	80027ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00c      	beq.n	8002790 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0220 	mvn.w	r2, #32
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f896 	bl	80028bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002790:	bf00      	nop
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr

080027aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a2f      	ldr	r2, [pc, #188]	@ (80028b0 <TIM_Base_SetConfig+0xd0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00b      	beq.n	8002810 <TIM_Base_SetConfig+0x30>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027fe:	d007      	beq.n	8002810 <TIM_Base_SetConfig+0x30>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a2c      	ldr	r2, [pc, #176]	@ (80028b4 <TIM_Base_SetConfig+0xd4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d003      	beq.n	8002810 <TIM_Base_SetConfig+0x30>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a2b      	ldr	r2, [pc, #172]	@ (80028b8 <TIM_Base_SetConfig+0xd8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d108      	bne.n	8002822 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a22      	ldr	r2, [pc, #136]	@ (80028b0 <TIM_Base_SetConfig+0xd0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00b      	beq.n	8002842 <TIM_Base_SetConfig+0x62>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002830:	d007      	beq.n	8002842 <TIM_Base_SetConfig+0x62>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a1f      	ldr	r2, [pc, #124]	@ (80028b4 <TIM_Base_SetConfig+0xd4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d003      	beq.n	8002842 <TIM_Base_SetConfig+0x62>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a1e      	ldr	r2, [pc, #120]	@ (80028b8 <TIM_Base_SetConfig+0xd8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d108      	bne.n	8002854 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0d      	ldr	r2, [pc, #52]	@ (80028b0 <TIM_Base_SetConfig+0xd0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d103      	bne.n	8002888 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f023 0201 	bic.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	611a      	str	r2, [r3, #16]
  }
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40000800 	.word	0x40000800

080028bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e042      	b.n	8002978 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe f80e 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2224      	movs	r2, #36	@ 0x24
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f971 	bl	8002c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	@ 0x28
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b20      	cmp	r3, #32
 800299e:	d175      	bne.n	8002a8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_UART_Transmit+0x2c>
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e06e      	b.n	8002a8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2221      	movs	r2, #33	@ 0x21
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029be:	f7fe f84b 	bl	8000a58 <HAL_GetTick>
 80029c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	88fa      	ldrh	r2, [r7, #6]
 80029c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	88fa      	ldrh	r2, [r7, #6]
 80029ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029d8:	d108      	bne.n	80029ec <HAL_UART_Transmit+0x6c>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d104      	bne.n	80029ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	e003      	b.n	80029f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029f4:	e02e      	b.n	8002a54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2200      	movs	r2, #0
 80029fe:	2180      	movs	r1, #128	@ 0x80
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f848 	bl	8002a96 <UART_WaitOnFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e03a      	b.n	8002a8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10b      	bne.n	8002a36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	3302      	adds	r3, #2
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	e007      	b.n	8002a46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	781a      	ldrb	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	3301      	adds	r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1cb      	bne.n	80029f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2200      	movs	r2, #0
 8002a66:	2140      	movs	r1, #64	@ 0x40
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f814 	bl	8002a96 <UART_WaitOnFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e006      	b.n	8002a8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa6:	e03b      	b.n	8002b20 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aae:	d037      	beq.n	8002b20 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab0:	f7fd ffd2 	bl	8000a58 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	6a3a      	ldr	r2, [r7, #32]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d302      	bcc.n	8002ac6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e03a      	b.n	8002b40 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d023      	beq.n	8002b20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b80      	cmp	r3, #128	@ 0x80
 8002adc:	d020      	beq.n	8002b20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b40      	cmp	r3, #64	@ 0x40
 8002ae2:	d01d      	beq.n	8002b20 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d116      	bne.n	8002b20 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f81d 	bl	8002b48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2208      	movs	r2, #8
 8002b12:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e00f      	b.n	8002b40 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d0b4      	beq.n	8002aa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b095      	sub	sp, #84	@ 0x54
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	330c      	adds	r3, #12
 8002b56:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5a:	e853 3f00 	ldrex	r3, [r3]
 8002b5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	330c      	adds	r3, #12
 8002b6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b70:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b76:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b78:	e841 2300 	strex	r3, r2, [r1]
 8002b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e5      	bne.n	8002b50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3314      	adds	r3, #20
 8002b8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	e853 3f00 	ldrex	r3, [r3]
 8002b92:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3314      	adds	r3, #20
 8002ba2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ba4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bac:	e841 2300 	strex	r3, r2, [r1]
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e5      	bne.n	8002b84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d119      	bne.n	8002bf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	e853 3f00 	ldrex	r3, [r3]
 8002bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f023 0310 	bic.w	r3, r3, #16
 8002bd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	330c      	adds	r3, #12
 8002bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002be0:	61ba      	str	r2, [r7, #24]
 8002be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be4:	6979      	ldr	r1, [r7, #20]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	e841 2300 	strex	r3, r2, [r1]
 8002bec:	613b      	str	r3, [r7, #16]
   return(result);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e5      	bne.n	8002bc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c02:	bf00      	nop
 8002c04:	3754      	adds	r7, #84	@ 0x54
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c46:	f023 030c 	bic.w	r3, r3, #12
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699a      	ldr	r2, [r3, #24]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002d20 <UART_SetConfig+0x114>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d103      	bne.n	8002c7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c74:	f7ff fb94 	bl	80023a0 <HAL_RCC_GetPCLK2Freq>
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	e002      	b.n	8002c82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f7ff fb7c 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 8002c80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	009a      	lsls	r2, r3, #2
 8002c8c:	441a      	add	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	4a22      	ldr	r2, [pc, #136]	@ (8002d24 <UART_SetConfig+0x118>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	0119      	lsls	r1, r3, #4
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009a      	lsls	r2, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <UART_SetConfig+0x118>)
 8002cba:	fba3 0302 	umull	r0, r3, r3, r2
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2064      	movs	r0, #100	@ 0x64
 8002cc2:	fb00 f303 	mul.w	r3, r0, r3
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	3332      	adds	r3, #50	@ 0x32
 8002ccc:	4a15      	ldr	r2, [pc, #84]	@ (8002d24 <UART_SetConfig+0x118>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd8:	4419      	add	r1, r3
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009a      	lsls	r2, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <UART_SetConfig+0x118>)
 8002cf2:	fba3 0302 	umull	r0, r3, r3, r2
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	2064      	movs	r0, #100	@ 0x64
 8002cfa:	fb00 f303 	mul.w	r3, r0, r3
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	3332      	adds	r3, #50	@ 0x32
 8002d04:	4a07      	ldr	r2, [pc, #28]	@ (8002d24 <UART_SetConfig+0x118>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	f003 020f 	and.w	r2, r3, #15
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	440a      	add	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40013800 	.word	0x40013800
 8002d24:	51eb851f 	.word	0x51eb851f

08002d28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d3a:	2b84      	cmp	r3, #132	@ 0x84
 8002d3c:	d005      	beq.n	8002d4a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002d3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4413      	add	r3, r2
 8002d46:	3303      	adds	r3, #3
 8002d48:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002d5a:	f000 faf7 	bl	800334c <vTaskStartScheduler>
  
  return osOK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d66:	b089      	sub	sp, #36	@ 0x24
 8002d68:	af04      	add	r7, sp, #16
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d020      	beq.n	8002db8 <osThreadCreate+0x54>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01c      	beq.n	8002db8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685c      	ldr	r4, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691e      	ldr	r6, [r3, #16]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ffc9 	bl	8002d28 <makeFreeRtosPriority>
 8002d96:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002da0:	9202      	str	r2, [sp, #8]
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	9100      	str	r1, [sp, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	4632      	mov	r2, r6
 8002daa:	4629      	mov	r1, r5
 8002dac:	4620      	mov	r0, r4
 8002dae:	f000 f8e8 	bl	8002f82 <xTaskCreateStatic>
 8002db2:	4603      	mov	r3, r0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e01c      	b.n	8002df2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685c      	ldr	r4, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dc4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ffab 	bl	8002d28 <makeFreeRtosPriority>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	f107 030c 	add.w	r3, r7, #12
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	9200      	str	r2, [sp, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4632      	mov	r2, r6
 8002de0:	4629      	mov	r1, r5
 8002de2:	4620      	mov	r0, r4
 8002de4:	f000 f92d 	bl	8003042 <xTaskCreate>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d001      	beq.n	8002df2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002df2:	68fb      	ldr	r3, [r7, #12]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dfc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <osDelay+0x16>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	e000      	b.n	8002e14 <osDelay+0x18>
 8002e12:	2301      	movs	r3, #1
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fa63 	bl	80032e0 <vTaskDelay>
  
  return osOK;
 8002e1a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f103 0208 	add.w	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f103 0208 	add.w	r2, r3, #8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f103 0208 	add.w	r2, r3, #8
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr

08002e62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr

08002e7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b085      	sub	sp, #20
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	601a      	str	r2, [r3, #0]
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	d103      	bne.n	8002ee0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	e00c      	b.n	8002efa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	e002      	b.n	8002eee <vListInsert+0x2e>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d2f6      	bcs.n	8002ee8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
}
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6892      	ldr	r2, [r2, #8]
 8002f46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6852      	ldr	r2, [r2, #4]
 8002f50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d103      	bne.n	8002f64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	1e5a      	subs	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b08e      	sub	sp, #56	@ 0x38
 8002f86:	af04      	add	r7, sp, #16
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10b      	bne.n	8002fae <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	e7fd      	b.n	8002faa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <xTaskCreateStatic+0x4a>
	__asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	61fb      	str	r3, [r7, #28]
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	e7fd      	b.n	8002fc8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002fcc:	23a0      	movs	r3, #160	@ 0xa0
 8002fce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fd4:	d00b      	beq.n	8002fee <xTaskCreateStatic+0x6c>
	__asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	61bb      	str	r3, [r7, #24]
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	e7fd      	b.n	8002fea <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002fee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01e      	beq.n	8003034 <xTaskCreateStatic+0xb2>
 8002ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01b      	beq.n	8003034 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003004:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	2202      	movs	r2, #2
 800300a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800300e:	2300      	movs	r3, #0
 8003010:	9303      	str	r3, [sp, #12]
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	9302      	str	r3, [sp, #8]
 8003016:	f107 0314 	add.w	r3, r7, #20
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f850 	bl	80030cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800302c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800302e:	f000 f8ed 	bl	800320c <prvAddNewTaskToReadyList>
 8003032:	e001      	b.n	8003038 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003038:	697b      	ldr	r3, [r7, #20]
	}
 800303a:	4618      	mov	r0, r3
 800303c:	3728      	adds	r7, #40	@ 0x28
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003042:	b580      	push	{r7, lr}
 8003044:	b08c      	sub	sp, #48	@ 0x30
 8003046:	af04      	add	r7, sp, #16
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	4613      	mov	r3, r2
 8003050:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fea2 	bl	8003da0 <pvPortMalloc>
 800305c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00e      	beq.n	8003082 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003064:	20a0      	movs	r0, #160	@ 0xa0
 8003066:	f000 fe9b 	bl	8003da0 <pvPortMalloc>
 800306a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	631a      	str	r2, [r3, #48]	@ 0x30
 8003078:	e005      	b.n	8003086 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f000 ff5e 	bl	8003f3c <vPortFree>
 8003080:	e001      	b.n	8003086 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d017      	beq.n	80030bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003094:	88fa      	ldrh	r2, [r7, #6]
 8003096:	2300      	movs	r3, #0
 8003098:	9303      	str	r3, [sp, #12]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	9302      	str	r3, [sp, #8]
 800309e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a0:	9301      	str	r3, [sp, #4]
 80030a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f80e 	bl	80030cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030b0:	69f8      	ldr	r0, [r7, #28]
 80030b2:	f000 f8ab 	bl	800320c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030b6:	2301      	movs	r3, #1
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	e002      	b.n	80030c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
 80030c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030c2:	69bb      	ldr	r3, [r7, #24]
	}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3720      	adds	r7, #32
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030e4:	3b01      	subs	r3, #1
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f023 0307 	bic.w	r3, r3, #7
 80030f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	617b      	str	r3, [r7, #20]
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	e7fd      	b.n	8003112 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01f      	beq.n	800315c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800311c:	2300      	movs	r3, #0
 800311e:	61fb      	str	r3, [r7, #28]
 8003120:	e012      	b.n	8003148 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	7819      	ldrb	r1, [r3, #0]
 800312a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	4413      	add	r3, r2
 8003130:	3334      	adds	r3, #52	@ 0x34
 8003132:	460a      	mov	r2, r1
 8003134:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	4413      	add	r3, r2
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3301      	adds	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b0f      	cmp	r3, #15
 800314c:	d9e9      	bls.n	8003122 <prvInitialiseNewTask+0x56>
 800314e:	e000      	b.n	8003152 <prvInitialiseNewTask+0x86>
			{
				break;
 8003150:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800315a:	e003      	b.n	8003164 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800315c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003166:	2b06      	cmp	r3, #6
 8003168:	d901      	bls.n	800316e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800316a:	2306      	movs	r3, #6
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800316e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003170:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003172:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003176:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003178:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800317a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317c:	2200      	movs	r2, #0
 800317e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003182:	3304      	adds	r3, #4
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fe6c 	bl	8002e62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800318a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318c:	3318      	adds	r3, #24
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fe67 	bl	8002e62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003198:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800319a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319c:	f1c3 0207 	rsb	r2, r3, #7
 80031a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ac:	2200      	movs	r2, #0
 80031ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80031ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031bc:	334c      	adds	r3, #76	@ 0x4c
 80031be:	224c      	movs	r2, #76	@ 0x4c
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f001 f9e2 	bl	800458c <memset>
 80031c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003200 <prvInitialiseNewTask+0x134>)
 80031cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80031ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003204 <prvInitialiseNewTask+0x138>)
 80031d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80031d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003208 <prvInitialiseNewTask+0x13c>)
 80031d8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	68f9      	ldr	r1, [r7, #12]
 80031de:	69b8      	ldr	r0, [r7, #24]
 80031e0:	f000 fc28 	bl	8003a34 <pxPortInitialiseStack>
 80031e4:	4602      	mov	r2, r0
 80031e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80031ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031f6:	bf00      	nop
 80031f8:	3720      	adds	r7, #32
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200011b4 	.word	0x200011b4
 8003204:	2000121c 	.word	0x2000121c
 8003208:	20001284 	.word	0x20001284

0800320c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003214:	f000 fd02 	bl	8003c1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003218:	4b2a      	ldr	r3, [pc, #168]	@ (80032c4 <prvAddNewTaskToReadyList+0xb8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3301      	adds	r3, #1
 800321e:	4a29      	ldr	r2, [pc, #164]	@ (80032c4 <prvAddNewTaskToReadyList+0xb8>)
 8003220:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003222:	4b29      	ldr	r3, [pc, #164]	@ (80032c8 <prvAddNewTaskToReadyList+0xbc>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800322a:	4a27      	ldr	r2, [pc, #156]	@ (80032c8 <prvAddNewTaskToReadyList+0xbc>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003230:	4b24      	ldr	r3, [pc, #144]	@ (80032c4 <prvAddNewTaskToReadyList+0xb8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d110      	bne.n	800325a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003238:	f000 fad2 	bl	80037e0 <prvInitialiseTaskLists>
 800323c:	e00d      	b.n	800325a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800323e:	4b23      	ldr	r3, [pc, #140]	@ (80032cc <prvAddNewTaskToReadyList+0xc0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003246:	4b20      	ldr	r3, [pc, #128]	@ (80032c8 <prvAddNewTaskToReadyList+0xbc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	429a      	cmp	r2, r3
 8003252:	d802      	bhi.n	800325a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003254:	4a1c      	ldr	r2, [pc, #112]	@ (80032c8 <prvAddNewTaskToReadyList+0xbc>)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800325a:	4b1d      	ldr	r3, [pc, #116]	@ (80032d0 <prvAddNewTaskToReadyList+0xc4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3301      	adds	r3, #1
 8003260:	4a1b      	ldr	r2, [pc, #108]	@ (80032d0 <prvAddNewTaskToReadyList+0xc4>)
 8003262:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	2201      	movs	r2, #1
 800326a:	409a      	lsls	r2, r3
 800326c:	4b19      	ldr	r3, [pc, #100]	@ (80032d4 <prvAddNewTaskToReadyList+0xc8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4313      	orrs	r3, r2
 8003272:	4a18      	ldr	r2, [pc, #96]	@ (80032d4 <prvAddNewTaskToReadyList+0xc8>)
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4a15      	ldr	r2, [pc, #84]	@ (80032d8 <prvAddNewTaskToReadyList+0xcc>)
 8003284:	441a      	add	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3304      	adds	r3, #4
 800328a:	4619      	mov	r1, r3
 800328c:	4610      	mov	r0, r2
 800328e:	f7ff fdf4 	bl	8002e7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003292:	f000 fcf3 	bl	8003c7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <prvAddNewTaskToReadyList+0xc0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00e      	beq.n	80032bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800329e:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <prvAddNewTaskToReadyList+0xbc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d207      	bcs.n	80032bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032ac:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <prvAddNewTaskToReadyList+0xd0>)
 80032ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20000560 	.word	0x20000560
 80032c8:	20000460 	.word	0x20000460
 80032cc:	2000056c 	.word	0x2000056c
 80032d0:	2000057c 	.word	0x2000057c
 80032d4:	20000568 	.word	0x20000568
 80032d8:	20000464 	.word	0x20000464
 80032dc:	e000ed04 	.word	0xe000ed04

080032e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d018      	beq.n	8003324 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032f2:	4b14      	ldr	r3, [pc, #80]	@ (8003344 <vTaskDelay+0x64>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <vTaskDelay+0x32>
	__asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	60bb      	str	r3, [r7, #8]
}
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	e7fd      	b.n	800330e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003312:	f000 f885 	bl	8003420 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003316:	2100      	movs	r1, #0
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fb25 	bl	8003968 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800331e:	f000 f88d 	bl	800343c <xTaskResumeAll>
 8003322:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d107      	bne.n	800333a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800332a:	4b07      	ldr	r3, [pc, #28]	@ (8003348 <vTaskDelay+0x68>)
 800332c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000588 	.word	0x20000588
 8003348:	e000ed04 	.word	0xe000ed04

0800334c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	@ 0x28
 8003350:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003356:	2300      	movs	r3, #0
 8003358:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800335a:	463a      	mov	r2, r7
 800335c:	1d39      	adds	r1, r7, #4
 800335e:	f107 0308 	add.w	r3, r7, #8
 8003362:	4618      	mov	r0, r3
 8003364:	f7fc ff7e 	bl	8000264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003368:	6839      	ldr	r1, [r7, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	9202      	str	r2, [sp, #8]
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	2300      	movs	r3, #0
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	460a      	mov	r2, r1
 800337a:	4921      	ldr	r1, [pc, #132]	@ (8003400 <vTaskStartScheduler+0xb4>)
 800337c:	4821      	ldr	r0, [pc, #132]	@ (8003404 <vTaskStartScheduler+0xb8>)
 800337e:	f7ff fe00 	bl	8002f82 <xTaskCreateStatic>
 8003382:	4603      	mov	r3, r0
 8003384:	4a20      	ldr	r2, [pc, #128]	@ (8003408 <vTaskStartScheduler+0xbc>)
 8003386:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003388:	4b1f      	ldr	r3, [pc, #124]	@ (8003408 <vTaskStartScheduler+0xbc>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003390:	2301      	movs	r3, #1
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	e001      	b.n	800339a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d11b      	bne.n	80033d8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	613b      	str	r3, [r7, #16]
}
 80033b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80033b4:	4b15      	ldr	r3, [pc, #84]	@ (800340c <vTaskStartScheduler+0xc0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	334c      	adds	r3, #76	@ 0x4c
 80033ba:	4a15      	ldr	r2, [pc, #84]	@ (8003410 <vTaskStartScheduler+0xc4>)
 80033bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033be:	4b15      	ldr	r3, [pc, #84]	@ (8003414 <vTaskStartScheduler+0xc8>)
 80033c0:	f04f 32ff 	mov.w	r2, #4294967295
 80033c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033c6:	4b14      	ldr	r3, [pc, #80]	@ (8003418 <vTaskStartScheduler+0xcc>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033cc:	4b13      	ldr	r3, [pc, #76]	@ (800341c <vTaskStartScheduler+0xd0>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033d2:	f000 fbb1 	bl	8003b38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80033d6:	e00f      	b.n	80033f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033de:	d10b      	bne.n	80033f8 <vTaskStartScheduler+0xac>
	__asm volatile
 80033e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	60fb      	str	r3, [r7, #12]
}
 80033f2:	bf00      	nop
 80033f4:	bf00      	nop
 80033f6:	e7fd      	b.n	80033f4 <vTaskStartScheduler+0xa8>
}
 80033f8:	bf00      	nop
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	080051e4 	.word	0x080051e4
 8003404:	080037b1 	.word	0x080037b1
 8003408:	20000584 	.word	0x20000584
 800340c:	20000460 	.word	0x20000460
 8003410:	2000001c 	.word	0x2000001c
 8003414:	20000580 	.word	0x20000580
 8003418:	2000056c 	.word	0x2000056c
 800341c:	20000564 	.word	0x20000564

08003420 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003424:	4b04      	ldr	r3, [pc, #16]	@ (8003438 <vTaskSuspendAll+0x18>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3301      	adds	r3, #1
 800342a:	4a03      	ldr	r2, [pc, #12]	@ (8003438 <vTaskSuspendAll+0x18>)
 800342c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800342e:	bf00      	nop
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000588 	.word	0x20000588

0800343c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800344a:	4b42      	ldr	r3, [pc, #264]	@ (8003554 <xTaskResumeAll+0x118>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <xTaskResumeAll+0x2e>
	__asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	603b      	str	r3, [r7, #0]
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	e7fd      	b.n	8003466 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800346a:	f000 fbd7 	bl	8003c1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800346e:	4b39      	ldr	r3, [pc, #228]	@ (8003554 <xTaskResumeAll+0x118>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3b01      	subs	r3, #1
 8003474:	4a37      	ldr	r2, [pc, #220]	@ (8003554 <xTaskResumeAll+0x118>)
 8003476:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003478:	4b36      	ldr	r3, [pc, #216]	@ (8003554 <xTaskResumeAll+0x118>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d161      	bne.n	8003544 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003480:	4b35      	ldr	r3, [pc, #212]	@ (8003558 <xTaskResumeAll+0x11c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d05d      	beq.n	8003544 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003488:	e02e      	b.n	80034e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800348a:	4b34      	ldr	r3, [pc, #208]	@ (800355c <xTaskResumeAll+0x120>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3318      	adds	r3, #24
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fd4a 	bl	8002f30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3304      	adds	r3, #4
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fd45 	bl	8002f30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034aa:	2201      	movs	r2, #1
 80034ac:	409a      	lsls	r2, r3
 80034ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003560 <xTaskResumeAll+0x124>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003560 <xTaskResumeAll+0x124>)
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4a27      	ldr	r2, [pc, #156]	@ (8003564 <xTaskResumeAll+0x128>)
 80034c6:	441a      	add	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4619      	mov	r1, r3
 80034ce:	4610      	mov	r0, r2
 80034d0:	f7ff fcd3 	bl	8002e7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d8:	4b23      	ldr	r3, [pc, #140]	@ (8003568 <xTaskResumeAll+0x12c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	429a      	cmp	r2, r3
 80034e0:	d302      	bcc.n	80034e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80034e2:	4b22      	ldr	r3, [pc, #136]	@ (800356c <xTaskResumeAll+0x130>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034e8:	4b1c      	ldr	r3, [pc, #112]	@ (800355c <xTaskResumeAll+0x120>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1cc      	bne.n	800348a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80034f6:	f000 fa17 	bl	8003928 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80034fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003570 <xTaskResumeAll+0x134>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d010      	beq.n	8003528 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003506:	f000 f837 	bl	8003578 <xTaskIncrementTick>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003510:	4b16      	ldr	r3, [pc, #88]	@ (800356c <xTaskResumeAll+0x130>)
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3b01      	subs	r3, #1
 800351a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f1      	bne.n	8003506 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003522:	4b13      	ldr	r3, [pc, #76]	@ (8003570 <xTaskResumeAll+0x134>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003528:	4b10      	ldr	r3, [pc, #64]	@ (800356c <xTaskResumeAll+0x130>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003530:	2301      	movs	r3, #1
 8003532:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003534:	4b0f      	ldr	r3, [pc, #60]	@ (8003574 <xTaskResumeAll+0x138>)
 8003536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003544:	f000 fb9a 	bl	8003c7c <vPortExitCritical>

	return xAlreadyYielded;
 8003548:	68bb      	ldr	r3, [r7, #8]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000588 	.word	0x20000588
 8003558:	20000560 	.word	0x20000560
 800355c:	20000520 	.word	0x20000520
 8003560:	20000568 	.word	0x20000568
 8003564:	20000464 	.word	0x20000464
 8003568:	20000460 	.word	0x20000460
 800356c:	20000574 	.word	0x20000574
 8003570:	20000570 	.word	0x20000570
 8003574:	e000ed04 	.word	0xe000ed04

08003578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003582:	4b4f      	ldr	r3, [pc, #316]	@ (80036c0 <xTaskIncrementTick+0x148>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f040 808f 	bne.w	80036aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800358c:	4b4d      	ldr	r3, [pc, #308]	@ (80036c4 <xTaskIncrementTick+0x14c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003594:	4a4b      	ldr	r2, [pc, #300]	@ (80036c4 <xTaskIncrementTick+0x14c>)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d121      	bne.n	80035e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80035a0:	4b49      	ldr	r3, [pc, #292]	@ (80036c8 <xTaskIncrementTick+0x150>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	603b      	str	r3, [r7, #0]
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	e7fd      	b.n	80035be <xTaskIncrementTick+0x46>
 80035c2:	4b41      	ldr	r3, [pc, #260]	@ (80036c8 <xTaskIncrementTick+0x150>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	4b40      	ldr	r3, [pc, #256]	@ (80036cc <xTaskIncrementTick+0x154>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a3e      	ldr	r2, [pc, #248]	@ (80036c8 <xTaskIncrementTick+0x150>)
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4a3e      	ldr	r2, [pc, #248]	@ (80036cc <xTaskIncrementTick+0x154>)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b3e      	ldr	r3, [pc, #248]	@ (80036d0 <xTaskIncrementTick+0x158>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3301      	adds	r3, #1
 80035dc:	4a3c      	ldr	r2, [pc, #240]	@ (80036d0 <xTaskIncrementTick+0x158>)
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	f000 f9a2 	bl	8003928 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035e4:	4b3b      	ldr	r3, [pc, #236]	@ (80036d4 <xTaskIncrementTick+0x15c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d348      	bcc.n	8003680 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035ee:	4b36      	ldr	r3, [pc, #216]	@ (80036c8 <xTaskIncrementTick+0x150>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d104      	bne.n	8003602 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035f8:	4b36      	ldr	r3, [pc, #216]	@ (80036d4 <xTaskIncrementTick+0x15c>)
 80035fa:	f04f 32ff 	mov.w	r2, #4294967295
 80035fe:	601a      	str	r2, [r3, #0]
					break;
 8003600:	e03e      	b.n	8003680 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003602:	4b31      	ldr	r3, [pc, #196]	@ (80036c8 <xTaskIncrementTick+0x150>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	429a      	cmp	r2, r3
 8003618:	d203      	bcs.n	8003622 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800361a:	4a2e      	ldr	r2, [pc, #184]	@ (80036d4 <xTaskIncrementTick+0x15c>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003620:	e02e      	b.n	8003680 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3304      	adds	r3, #4
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fc82 	bl	8002f30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	3318      	adds	r3, #24
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff fc79 	bl	8002f30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003642:	2201      	movs	r2, #1
 8003644:	409a      	lsls	r2, r3
 8003646:	4b24      	ldr	r3, [pc, #144]	@ (80036d8 <xTaskIncrementTick+0x160>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4313      	orrs	r3, r2
 800364c:	4a22      	ldr	r2, [pc, #136]	@ (80036d8 <xTaskIncrementTick+0x160>)
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4a1f      	ldr	r2, [pc, #124]	@ (80036dc <xTaskIncrementTick+0x164>)
 800365e:	441a      	add	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	3304      	adds	r3, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f7ff fc07 	bl	8002e7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003670:	4b1b      	ldr	r3, [pc, #108]	@ (80036e0 <xTaskIncrementTick+0x168>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	429a      	cmp	r2, r3
 8003678:	d3b9      	bcc.n	80035ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800367a:	2301      	movs	r3, #1
 800367c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800367e:	e7b6      	b.n	80035ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003680:	4b17      	ldr	r3, [pc, #92]	@ (80036e0 <xTaskIncrementTick+0x168>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003686:	4915      	ldr	r1, [pc, #84]	@ (80036dc <xTaskIncrementTick+0x164>)
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d901      	bls.n	800369c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003698:	2301      	movs	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800369c:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <xTaskIncrementTick+0x16c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80036a4:	2301      	movs	r3, #1
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	e004      	b.n	80036b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80036aa:	4b0f      	ldr	r3, [pc, #60]	@ (80036e8 <xTaskIncrementTick+0x170>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3301      	adds	r3, #1
 80036b0:	4a0d      	ldr	r2, [pc, #52]	@ (80036e8 <xTaskIncrementTick+0x170>)
 80036b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80036b4:	697b      	ldr	r3, [r7, #20]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000588 	.word	0x20000588
 80036c4:	20000564 	.word	0x20000564
 80036c8:	20000518 	.word	0x20000518
 80036cc:	2000051c 	.word	0x2000051c
 80036d0:	20000578 	.word	0x20000578
 80036d4:	20000580 	.word	0x20000580
 80036d8:	20000568 	.word	0x20000568
 80036dc:	20000464 	.word	0x20000464
 80036e0:	20000460 	.word	0x20000460
 80036e4:	20000574 	.word	0x20000574
 80036e8:	20000570 	.word	0x20000570

080036ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036f2:	4b29      	ldr	r3, [pc, #164]	@ (8003798 <vTaskSwitchContext+0xac>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036fa:	4b28      	ldr	r3, [pc, #160]	@ (800379c <vTaskSwitchContext+0xb0>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003700:	e045      	b.n	800378e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003702:	4b26      	ldr	r3, [pc, #152]	@ (800379c <vTaskSwitchContext+0xb0>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003708:	4b25      	ldr	r3, [pc, #148]	@ (80037a0 <vTaskSwitchContext+0xb4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003716:	7afb      	ldrb	r3, [r7, #11]
 8003718:	f1c3 031f 	rsb	r3, r3, #31
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	4921      	ldr	r1, [pc, #132]	@ (80037a4 <vTaskSwitchContext+0xb8>)
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10b      	bne.n	800374a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	607b      	str	r3, [r7, #4]
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	e7fd      	b.n	8003746 <vTaskSwitchContext+0x5a>
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4a13      	ldr	r2, [pc, #76]	@ (80037a4 <vTaskSwitchContext+0xb8>)
 8003756:	4413      	add	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	3308      	adds	r3, #8
 800376c:	429a      	cmp	r2, r3
 800376e:	d104      	bne.n	800377a <vTaskSwitchContext+0x8e>
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4a09      	ldr	r2, [pc, #36]	@ (80037a8 <vTaskSwitchContext+0xbc>)
 8003782:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003784:	4b08      	ldr	r3, [pc, #32]	@ (80037a8 <vTaskSwitchContext+0xbc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	334c      	adds	r3, #76	@ 0x4c
 800378a:	4a08      	ldr	r2, [pc, #32]	@ (80037ac <vTaskSwitchContext+0xc0>)
 800378c:	6013      	str	r3, [r2, #0]
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr
 8003798:	20000588 	.word	0x20000588
 800379c:	20000574 	.word	0x20000574
 80037a0:	20000568 	.word	0x20000568
 80037a4:	20000464 	.word	0x20000464
 80037a8:	20000460 	.word	0x20000460
 80037ac:	2000001c 	.word	0x2000001c

080037b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037b8:	f000 f852 	bl	8003860 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037bc:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <prvIdleTask+0x28>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d9f9      	bls.n	80037b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80037c4:	4b05      	ldr	r3, [pc, #20]	@ (80037dc <prvIdleTask+0x2c>)
 80037c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80037d4:	e7f0      	b.n	80037b8 <prvIdleTask+0x8>
 80037d6:	bf00      	nop
 80037d8:	20000464 	.word	0x20000464
 80037dc:	e000ed04 	.word	0xe000ed04

080037e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037e6:	2300      	movs	r3, #0
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	e00c      	b.n	8003806 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4a12      	ldr	r2, [pc, #72]	@ (8003840 <prvInitialiseTaskLists+0x60>)
 80037f8:	4413      	add	r3, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fb12 	bl	8002e24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3301      	adds	r3, #1
 8003804:	607b      	str	r3, [r7, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b06      	cmp	r3, #6
 800380a:	d9ef      	bls.n	80037ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800380c:	480d      	ldr	r0, [pc, #52]	@ (8003844 <prvInitialiseTaskLists+0x64>)
 800380e:	f7ff fb09 	bl	8002e24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003812:	480d      	ldr	r0, [pc, #52]	@ (8003848 <prvInitialiseTaskLists+0x68>)
 8003814:	f7ff fb06 	bl	8002e24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003818:	480c      	ldr	r0, [pc, #48]	@ (800384c <prvInitialiseTaskLists+0x6c>)
 800381a:	f7ff fb03 	bl	8002e24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800381e:	480c      	ldr	r0, [pc, #48]	@ (8003850 <prvInitialiseTaskLists+0x70>)
 8003820:	f7ff fb00 	bl	8002e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003824:	480b      	ldr	r0, [pc, #44]	@ (8003854 <prvInitialiseTaskLists+0x74>)
 8003826:	f7ff fafd 	bl	8002e24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800382a:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <prvInitialiseTaskLists+0x78>)
 800382c:	4a05      	ldr	r2, [pc, #20]	@ (8003844 <prvInitialiseTaskLists+0x64>)
 800382e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003830:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <prvInitialiseTaskLists+0x7c>)
 8003832:	4a05      	ldr	r2, [pc, #20]	@ (8003848 <prvInitialiseTaskLists+0x68>)
 8003834:	601a      	str	r2, [r3, #0]
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000464 	.word	0x20000464
 8003844:	200004f0 	.word	0x200004f0
 8003848:	20000504 	.word	0x20000504
 800384c:	20000520 	.word	0x20000520
 8003850:	20000534 	.word	0x20000534
 8003854:	2000054c 	.word	0x2000054c
 8003858:	20000518 	.word	0x20000518
 800385c:	2000051c 	.word	0x2000051c

08003860 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003866:	e019      	b.n	800389c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003868:	f000 f9d8 	bl	8003c1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800386c:	4b10      	ldr	r3, [pc, #64]	@ (80038b0 <prvCheckTasksWaitingTermination+0x50>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3304      	adds	r3, #4
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fb59 	bl	8002f30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800387e:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <prvCheckTasksWaitingTermination+0x54>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3b01      	subs	r3, #1
 8003884:	4a0b      	ldr	r2, [pc, #44]	@ (80038b4 <prvCheckTasksWaitingTermination+0x54>)
 8003886:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003888:	4b0b      	ldr	r3, [pc, #44]	@ (80038b8 <prvCheckTasksWaitingTermination+0x58>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3b01      	subs	r3, #1
 800388e:	4a0a      	ldr	r2, [pc, #40]	@ (80038b8 <prvCheckTasksWaitingTermination+0x58>)
 8003890:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003892:	f000 f9f3 	bl	8003c7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f810 	bl	80038bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800389c:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <prvCheckTasksWaitingTermination+0x58>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e1      	bne.n	8003868 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000534 	.word	0x20000534
 80038b4:	20000560 	.word	0x20000560
 80038b8:	20000548 	.word	0x20000548

080038bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	334c      	adds	r3, #76	@ 0x4c
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fe77 	bl	80045bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d108      	bne.n	80038ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fb2d 	bl	8003f3c <vPortFree>
				vPortFree( pxTCB );
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fb2a 	bl	8003f3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80038e8:	e019      	b.n	800391e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d103      	bne.n	80038fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fb21 	bl	8003f3c <vPortFree>
	}
 80038fa:	e010      	b.n	800391e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003902:	2b02      	cmp	r3, #2
 8003904:	d00b      	beq.n	800391e <prvDeleteTCB+0x62>
	__asm volatile
 8003906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	60fb      	str	r3, [r7, #12]
}
 8003918:	bf00      	nop
 800391a:	bf00      	nop
 800391c:	e7fd      	b.n	800391a <prvDeleteTCB+0x5e>
	}
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800392e:	4b0c      	ldr	r3, [pc, #48]	@ (8003960 <prvResetNextTaskUnblockTime+0x38>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003938:	4b0a      	ldr	r3, [pc, #40]	@ (8003964 <prvResetNextTaskUnblockTime+0x3c>)
 800393a:	f04f 32ff 	mov.w	r2, #4294967295
 800393e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003940:	e008      	b.n	8003954 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003942:	4b07      	ldr	r3, [pc, #28]	@ (8003960 <prvResetNextTaskUnblockTime+0x38>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4a04      	ldr	r2, [pc, #16]	@ (8003964 <prvResetNextTaskUnblockTime+0x3c>)
 8003952:	6013      	str	r3, [r2, #0]
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	20000518 	.word	0x20000518
 8003964:	20000580 	.word	0x20000580

08003968 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003972:	4b29      	ldr	r3, [pc, #164]	@ (8003a18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003978:	4b28      	ldr	r3, [pc, #160]	@ (8003a1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3304      	adds	r3, #4
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fad6 	bl	8002f30 <uxListRemove>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10b      	bne.n	80039a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800398a:	4b24      	ldr	r3, [pc, #144]	@ (8003a1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003990:	2201      	movs	r2, #1
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43da      	mvns	r2, r3
 8003998:	4b21      	ldr	r3, [pc, #132]	@ (8003a20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4013      	ands	r3, r2
 800399e:	4a20      	ldr	r2, [pc, #128]	@ (8003a20 <prvAddCurrentTaskToDelayedList+0xb8>)
 80039a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d10a      	bne.n	80039c0 <prvAddCurrentTaskToDelayedList+0x58>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039b0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a1c <prvAddCurrentTaskToDelayedList+0xb4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3304      	adds	r3, #4
 80039b6:	4619      	mov	r1, r3
 80039b8:	481a      	ldr	r0, [pc, #104]	@ (8003a24 <prvAddCurrentTaskToDelayedList+0xbc>)
 80039ba:	f7ff fa5e 	bl	8002e7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039be:	e026      	b.n	8003a0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4413      	add	r3, r2
 80039c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039c8:	4b14      	ldr	r3, [pc, #80]	@ (8003a1c <prvAddCurrentTaskToDelayedList+0xb4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d209      	bcs.n	80039ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039d8:	4b13      	ldr	r3, [pc, #76]	@ (8003a28 <prvAddCurrentTaskToDelayedList+0xc0>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a1c <prvAddCurrentTaskToDelayedList+0xb4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3304      	adds	r3, #4
 80039e2:	4619      	mov	r1, r3
 80039e4:	4610      	mov	r0, r2
 80039e6:	f7ff fa6b 	bl	8002ec0 <vListInsert>
}
 80039ea:	e010      	b.n	8003a0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039ec:	4b0f      	ldr	r3, [pc, #60]	@ (8003a2c <prvAddCurrentTaskToDelayedList+0xc4>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b0a      	ldr	r3, [pc, #40]	@ (8003a1c <prvAddCurrentTaskToDelayedList+0xb4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3304      	adds	r3, #4
 80039f6:	4619      	mov	r1, r3
 80039f8:	4610      	mov	r0, r2
 80039fa:	f7ff fa61 	bl	8002ec0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003a30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d202      	bcs.n	8003a0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003a08:	4a09      	ldr	r2, [pc, #36]	@ (8003a30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	6013      	str	r3, [r2, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000564 	.word	0x20000564
 8003a1c:	20000460 	.word	0x20000460
 8003a20:	20000568 	.word	0x20000568
 8003a24:	2000054c 	.word	0x2000054c
 8003a28:	2000051c 	.word	0x2000051c
 8003a2c:	20000518 	.word	0x20000518
 8003a30:	20000580 	.word	0x20000580

08003a34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3b04      	subs	r3, #4
 8003a44:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3b04      	subs	r3, #4
 8003a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f023 0201 	bic.w	r2, r3, #1
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3b04      	subs	r3, #4
 8003a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a64:	4a08      	ldr	r2, [pc, #32]	@ (8003a88 <pxPortInitialiseStack+0x54>)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3b14      	subs	r3, #20
 8003a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	3b20      	subs	r3, #32
 8003a7a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	08003a8d 	.word	0x08003a8d

08003a8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003a96:	4b12      	ldr	r3, [pc, #72]	@ (8003ae0 <prvTaskExitError+0x54>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9e:	d00b      	beq.n	8003ab8 <prvTaskExitError+0x2c>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	60fb      	str	r3, [r7, #12]
}
 8003ab2:	bf00      	nop
 8003ab4:	bf00      	nop
 8003ab6:	e7fd      	b.n	8003ab4 <prvTaskExitError+0x28>
	__asm volatile
 8003ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	60bb      	str	r3, [r7, #8]
}
 8003aca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003acc:	bf00      	nop
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0fc      	beq.n	8003ace <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	2000000c 	.word	0x2000000c
	...

08003af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003af0:	4b07      	ldr	r3, [pc, #28]	@ (8003b10 <pxCurrentTCBConst2>)
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	6808      	ldr	r0, [r1, #0]
 8003af6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003afa:	f380 8809 	msr	PSP, r0
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f380 8811 	msr	BASEPRI, r0
 8003b0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003b0e:	4770      	bx	lr

08003b10 <pxCurrentTCBConst2>:
 8003b10:	20000460 	.word	0x20000460
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop

08003b18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003b18:	4806      	ldr	r0, [pc, #24]	@ (8003b34 <prvPortStartFirstTask+0x1c>)
 8003b1a:	6800      	ldr	r0, [r0, #0]
 8003b1c:	6800      	ldr	r0, [r0, #0]
 8003b1e:	f380 8808 	msr	MSP, r0
 8003b22:	b662      	cpsie	i
 8003b24:	b661      	cpsie	f
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	df00      	svc	0
 8003b30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b32:	bf00      	nop
 8003b34:	e000ed08 	.word	0xe000ed08

08003b38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b3e:	4b32      	ldr	r3, [pc, #200]	@ (8003c08 <xPortStartScheduler+0xd0>)
 8003b40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	22ff      	movs	r2, #255	@ 0xff
 8003b4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4b2a      	ldr	r3, [pc, #168]	@ (8003c0c <xPortStartScheduler+0xd4>)
 8003b64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b66:	4b2a      	ldr	r3, [pc, #168]	@ (8003c10 <xPortStartScheduler+0xd8>)
 8003b68:	2207      	movs	r2, #7
 8003b6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b6c:	e009      	b.n	8003b82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003b6e:	4b28      	ldr	r3, [pc, #160]	@ (8003c10 <xPortStartScheduler+0xd8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	4a26      	ldr	r2, [pc, #152]	@ (8003c10 <xPortStartScheduler+0xd8>)
 8003b76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8a:	2b80      	cmp	r3, #128	@ 0x80
 8003b8c:	d0ef      	beq.n	8003b6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b8e:	4b20      	ldr	r3, [pc, #128]	@ (8003c10 <xPortStartScheduler+0xd8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f1c3 0307 	rsb	r3, r3, #7
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d00b      	beq.n	8003bb2 <xPortStartScheduler+0x7a>
	__asm volatile
 8003b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	60bb      	str	r3, [r7, #8]
}
 8003bac:	bf00      	nop
 8003bae:	bf00      	nop
 8003bb0:	e7fd      	b.n	8003bae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bb2:	4b17      	ldr	r3, [pc, #92]	@ (8003c10 <xPortStartScheduler+0xd8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	4a15      	ldr	r2, [pc, #84]	@ (8003c10 <xPortStartScheduler+0xd8>)
 8003bba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bbc:	4b14      	ldr	r3, [pc, #80]	@ (8003c10 <xPortStartScheduler+0xd8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003bc4:	4a12      	ldr	r2, [pc, #72]	@ (8003c10 <xPortStartScheduler+0xd8>)
 8003bc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003bd0:	4b10      	ldr	r3, [pc, #64]	@ (8003c14 <xPortStartScheduler+0xdc>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8003c14 <xPortStartScheduler+0xdc>)
 8003bd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003bda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003c14 <xPortStartScheduler+0xdc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0c      	ldr	r2, [pc, #48]	@ (8003c14 <xPortStartScheduler+0xdc>)
 8003be2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003be6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003be8:	f000 f8b8 	bl	8003d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003bec:	4b0a      	ldr	r3, [pc, #40]	@ (8003c18 <xPortStartScheduler+0xe0>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003bf2:	f7ff ff91 	bl	8003b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003bf6:	f7ff fd79 	bl	80036ec <vTaskSwitchContext>
	prvTaskExitError();
 8003bfa:	f7ff ff47 	bl	8003a8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	e000e400 	.word	0xe000e400
 8003c0c:	2000058c 	.word	0x2000058c
 8003c10:	20000590 	.word	0x20000590
 8003c14:	e000ed20 	.word	0xe000ed20
 8003c18:	2000000c 	.word	0x2000000c

08003c1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	607b      	str	r3, [r7, #4]
}
 8003c34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c36:	4b0f      	ldr	r3, [pc, #60]	@ (8003c74 <vPortEnterCritical+0x58>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c74 <vPortEnterCritical+0x58>)
 8003c3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c40:	4b0c      	ldr	r3, [pc, #48]	@ (8003c74 <vPortEnterCritical+0x58>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d110      	bne.n	8003c6a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c48:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <vPortEnterCritical+0x5c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <vPortEnterCritical+0x4e>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	603b      	str	r3, [r7, #0]
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	e7fd      	b.n	8003c66 <vPortEnterCritical+0x4a>
	}
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	2000000c 	.word	0x2000000c
 8003c78:	e000ed04 	.word	0xe000ed04

08003c7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003c82:	4b12      	ldr	r3, [pc, #72]	@ (8003ccc <vPortExitCritical+0x50>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10b      	bne.n	8003ca2 <vPortExitCritical+0x26>
	__asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	607b      	str	r3, [r7, #4]
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	e7fd      	b.n	8003c9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <vPortExitCritical+0x50>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	4a08      	ldr	r2, [pc, #32]	@ (8003ccc <vPortExitCritical+0x50>)
 8003caa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003cac:	4b07      	ldr	r3, [pc, #28]	@ (8003ccc <vPortExitCritical+0x50>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d105      	bne.n	8003cc0 <vPortExitCritical+0x44>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003cbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	2000000c 	.word	0x2000000c

08003cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003cd0:	f3ef 8009 	mrs	r0, PSP
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003d10 <pxCurrentTCBConst>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ce0:	6010      	str	r0, [r2, #0]
 8003ce2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003ce6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003cea:	f380 8811 	msr	BASEPRI, r0
 8003cee:	f7ff fcfd 	bl	80036ec <vTaskSwitchContext>
 8003cf2:	f04f 0000 	mov.w	r0, #0
 8003cf6:	f380 8811 	msr	BASEPRI, r0
 8003cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003cfe:	6819      	ldr	r1, [r3, #0]
 8003d00:	6808      	ldr	r0, [r1, #0]
 8003d02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d06:	f380 8809 	msr	PSP, r0
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	4770      	bx	lr

08003d10 <pxCurrentTCBConst>:
 8003d10:	20000460 	.word	0x20000460
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop

08003d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	607b      	str	r3, [r7, #4]
}
 8003d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d32:	f7ff fc21 	bl	8003578 <xTaskIncrementTick>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d3c:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <SysTick_Handler+0x40>)
 8003d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	2300      	movs	r3, #0
 8003d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	f383 8811 	msr	BASEPRI, r3
}
 8003d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d50:	bf00      	nop
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	e000ed04 	.word	0xe000ed04

08003d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d60:	4b0a      	ldr	r3, [pc, #40]	@ (8003d8c <vPortSetupTimerInterrupt+0x30>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d66:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <vPortSetupTimerInterrupt+0x34>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d6c:	4b09      	ldr	r3, [pc, #36]	@ (8003d94 <vPortSetupTimerInterrupt+0x38>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a09      	ldr	r2, [pc, #36]	@ (8003d98 <vPortSetupTimerInterrupt+0x3c>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	099b      	lsrs	r3, r3, #6
 8003d78:	4a08      	ldr	r2, [pc, #32]	@ (8003d9c <vPortSetupTimerInterrupt+0x40>)
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d7e:	4b03      	ldr	r3, [pc, #12]	@ (8003d8c <vPortSetupTimerInterrupt+0x30>)
 8003d80:	2207      	movs	r2, #7
 8003d82:	601a      	str	r2, [r3, #0]
}
 8003d84:	bf00      	nop
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr
 8003d8c:	e000e010 	.word	0xe000e010
 8003d90:	e000e018 	.word	0xe000e018
 8003d94:	20000000 	.word	0x20000000
 8003d98:	10624dd3 	.word	0x10624dd3
 8003d9c:	e000e014 	.word	0xe000e014

08003da0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08a      	sub	sp, #40	@ 0x28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003dac:	f7ff fb38 	bl	8003420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003db0:	4b5c      	ldr	r3, [pc, #368]	@ (8003f24 <pvPortMalloc+0x184>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003db8:	f000 f924 	bl	8004004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003dbc:	4b5a      	ldr	r3, [pc, #360]	@ (8003f28 <pvPortMalloc+0x188>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f040 8095 	bne.w	8003ef4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01e      	beq.n	8003e0e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d015      	beq.n	8003e0e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f023 0307 	bic.w	r3, r3, #7
 8003de8:	3308      	adds	r3, #8
 8003dea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <pvPortMalloc+0x6e>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	617b      	str	r3, [r7, #20]
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	e7fd      	b.n	8003e0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d06f      	beq.n	8003ef4 <pvPortMalloc+0x154>
 8003e14:	4b45      	ldr	r3, [pc, #276]	@ (8003f2c <pvPortMalloc+0x18c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d86a      	bhi.n	8003ef4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e1e:	4b44      	ldr	r3, [pc, #272]	@ (8003f30 <pvPortMalloc+0x190>)
 8003e20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003e22:	4b43      	ldr	r3, [pc, #268]	@ (8003f30 <pvPortMalloc+0x190>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e28:	e004      	b.n	8003e34 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d903      	bls.n	8003e46 <pvPortMalloc+0xa6>
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f1      	bne.n	8003e2a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e46:	4b37      	ldr	r3, [pc, #220]	@ (8003f24 <pvPortMalloc+0x184>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d051      	beq.n	8003ef4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2208      	movs	r2, #8
 8003e56:	4413      	add	r3, r2
 8003e58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	1ad2      	subs	r2, r2, r3
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d920      	bls.n	8003eb4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4413      	add	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00b      	beq.n	8003e9c <pvPortMalloc+0xfc>
	__asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	613b      	str	r3, [r7, #16]
}
 8003e96:	bf00      	nop
 8003e98:	bf00      	nop
 8003e9a:	e7fd      	b.n	8003e98 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	1ad2      	subs	r2, r2, r3
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003eae:	69b8      	ldr	r0, [r7, #24]
 8003eb0:	f000 f90a 	bl	80040c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f2c <pvPortMalloc+0x18c>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8003f2c <pvPortMalloc+0x18c>)
 8003ec0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f2c <pvPortMalloc+0x18c>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f34 <pvPortMalloc+0x194>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d203      	bcs.n	8003ed6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ece:	4b17      	ldr	r3, [pc, #92]	@ (8003f2c <pvPortMalloc+0x18c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a18      	ldr	r2, [pc, #96]	@ (8003f34 <pvPortMalloc+0x194>)
 8003ed4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	4b13      	ldr	r3, [pc, #76]	@ (8003f28 <pvPortMalloc+0x188>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003eea:	4b13      	ldr	r3, [pc, #76]	@ (8003f38 <pvPortMalloc+0x198>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	4a11      	ldr	r2, [pc, #68]	@ (8003f38 <pvPortMalloc+0x198>)
 8003ef2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003ef4:	f7ff faa2 	bl	800343c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <pvPortMalloc+0x17a>
	__asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	60fb      	str	r3, [r7, #12]
}
 8003f14:	bf00      	nop
 8003f16:	bf00      	nop
 8003f18:	e7fd      	b.n	8003f16 <pvPortMalloc+0x176>
	return pvReturn;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3728      	adds	r7, #40	@ 0x28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	2000119c 	.word	0x2000119c
 8003f28:	200011b0 	.word	0x200011b0
 8003f2c:	200011a0 	.word	0x200011a0
 8003f30:	20001194 	.word	0x20001194
 8003f34:	200011a4 	.word	0x200011a4
 8003f38:	200011a8 	.word	0x200011a8

08003f3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04f      	beq.n	8003fee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f4e:	2308      	movs	r3, #8
 8003f50:	425b      	negs	r3, r3
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4413      	add	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	4b25      	ldr	r3, [pc, #148]	@ (8003ff8 <vPortFree+0xbc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4013      	ands	r3, r2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10b      	bne.n	8003f82 <vPortFree+0x46>
	__asm volatile
 8003f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	60fb      	str	r3, [r7, #12]
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	e7fd      	b.n	8003f7e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <vPortFree+0x66>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	60bb      	str	r3, [r7, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	e7fd      	b.n	8003f9e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	4b14      	ldr	r3, [pc, #80]	@ (8003ff8 <vPortFree+0xbc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01e      	beq.n	8003fee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d11a      	bne.n	8003fee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <vPortFree+0xbc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003fc8:	f7ff fa2a 	bl	8003420 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <vPortFree+0xc0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	4a09      	ldr	r2, [pc, #36]	@ (8003ffc <vPortFree+0xc0>)
 8003fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003fda:	6938      	ldr	r0, [r7, #16]
 8003fdc:	f000 f874 	bl	80040c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003fe0:	4b07      	ldr	r3, [pc, #28]	@ (8004000 <vPortFree+0xc4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	4a06      	ldr	r2, [pc, #24]	@ (8004000 <vPortFree+0xc4>)
 8003fe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003fea:	f7ff fa27 	bl	800343c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003fee:	bf00      	nop
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200011b0 	.word	0x200011b0
 8003ffc:	200011a0 	.word	0x200011a0
 8004000:	200011ac 	.word	0x200011ac

08004004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800400a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800400e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004010:	4b27      	ldr	r3, [pc, #156]	@ (80040b0 <prvHeapInit+0xac>)
 8004012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00c      	beq.n	8004038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3307      	adds	r3, #7
 8004022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0307 	bic.w	r3, r3, #7
 800402a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	4a1f      	ldr	r2, [pc, #124]	@ (80040b0 <prvHeapInit+0xac>)
 8004034:	4413      	add	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800403c:	4a1d      	ldr	r2, [pc, #116]	@ (80040b4 <prvHeapInit+0xb0>)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004042:	4b1c      	ldr	r3, [pc, #112]	@ (80040b4 <prvHeapInit+0xb0>)
 8004044:	2200      	movs	r2, #0
 8004046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	4413      	add	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004050:	2208      	movs	r2, #8
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0307 	bic.w	r3, r3, #7
 800405e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a15      	ldr	r2, [pc, #84]	@ (80040b8 <prvHeapInit+0xb4>)
 8004064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004066:	4b14      	ldr	r3, [pc, #80]	@ (80040b8 <prvHeapInit+0xb4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2200      	movs	r2, #0
 800406c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800406e:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <prvHeapInit+0xb4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	1ad2      	subs	r2, r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004084:	4b0c      	ldr	r3, [pc, #48]	@ (80040b8 <prvHeapInit+0xb4>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4a0a      	ldr	r2, [pc, #40]	@ (80040bc <prvHeapInit+0xb8>)
 8004092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4a09      	ldr	r2, [pc, #36]	@ (80040c0 <prvHeapInit+0xbc>)
 800409a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800409c:	4b09      	ldr	r3, [pc, #36]	@ (80040c4 <prvHeapInit+0xc0>)
 800409e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80040a2:	601a      	str	r2, [r3, #0]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000594 	.word	0x20000594
 80040b4:	20001194 	.word	0x20001194
 80040b8:	2000119c 	.word	0x2000119c
 80040bc:	200011a4 	.word	0x200011a4
 80040c0:	200011a0 	.word	0x200011a0
 80040c4:	200011b0 	.word	0x200011b0

080040c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040d0:	4b27      	ldr	r3, [pc, #156]	@ (8004170 <prvInsertBlockIntoFreeList+0xa8>)
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	e002      	b.n	80040dc <prvInsertBlockIntoFreeList+0x14>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d8f7      	bhi.n	80040d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	4413      	add	r3, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d108      	bne.n	800410a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	441a      	add	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	441a      	add	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d118      	bne.n	8004150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	4b14      	ldr	r3, [pc, #80]	@ (8004174 <prvInsertBlockIntoFreeList+0xac>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d00d      	beq.n	8004146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	441a      	add	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e008      	b.n	8004158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004146:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <prvInsertBlockIntoFreeList+0xac>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e003      	b.n	8004158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	429a      	cmp	r2, r3
 800415e:	d002      	beq.n	8004166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004166:	bf00      	nop
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	20001194 	.word	0x20001194
 8004174:	2000119c 	.word	0x2000119c

08004178 <std>:
 8004178:	2300      	movs	r3, #0
 800417a:	b510      	push	{r4, lr}
 800417c:	4604      	mov	r4, r0
 800417e:	e9c0 3300 	strd	r3, r3, [r0]
 8004182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004186:	6083      	str	r3, [r0, #8]
 8004188:	8181      	strh	r1, [r0, #12]
 800418a:	6643      	str	r3, [r0, #100]	@ 0x64
 800418c:	81c2      	strh	r2, [r0, #14]
 800418e:	6183      	str	r3, [r0, #24]
 8004190:	4619      	mov	r1, r3
 8004192:	2208      	movs	r2, #8
 8004194:	305c      	adds	r0, #92	@ 0x5c
 8004196:	f000 f9f9 	bl	800458c <memset>
 800419a:	4b0d      	ldr	r3, [pc, #52]	@ (80041d0 <std+0x58>)
 800419c:	6224      	str	r4, [r4, #32]
 800419e:	6263      	str	r3, [r4, #36]	@ 0x24
 80041a0:	4b0c      	ldr	r3, [pc, #48]	@ (80041d4 <std+0x5c>)
 80041a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041a4:	4b0c      	ldr	r3, [pc, #48]	@ (80041d8 <std+0x60>)
 80041a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041a8:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <std+0x64>)
 80041aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80041ac:	4b0c      	ldr	r3, [pc, #48]	@ (80041e0 <std+0x68>)
 80041ae:	429c      	cmp	r4, r3
 80041b0:	d006      	beq.n	80041c0 <std+0x48>
 80041b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041b6:	4294      	cmp	r4, r2
 80041b8:	d002      	beq.n	80041c0 <std+0x48>
 80041ba:	33d0      	adds	r3, #208	@ 0xd0
 80041bc:	429c      	cmp	r4, r3
 80041be:	d105      	bne.n	80041cc <std+0x54>
 80041c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041c8:	f000 baae 	b.w	8004728 <__retarget_lock_init_recursive>
 80041cc:	bd10      	pop	{r4, pc}
 80041ce:	bf00      	nop
 80041d0:	080043dd 	.word	0x080043dd
 80041d4:	080043ff 	.word	0x080043ff
 80041d8:	08004437 	.word	0x08004437
 80041dc:	0800445b 	.word	0x0800445b
 80041e0:	200011b4 	.word	0x200011b4

080041e4 <stdio_exit_handler>:
 80041e4:	4a02      	ldr	r2, [pc, #8]	@ (80041f0 <stdio_exit_handler+0xc>)
 80041e6:	4903      	ldr	r1, [pc, #12]	@ (80041f4 <stdio_exit_handler+0x10>)
 80041e8:	4803      	ldr	r0, [pc, #12]	@ (80041f8 <stdio_exit_handler+0x14>)
 80041ea:	f000 b869 	b.w	80042c0 <_fwalk_sglue>
 80041ee:	bf00      	nop
 80041f0:	20000010 	.word	0x20000010
 80041f4:	08004fc1 	.word	0x08004fc1
 80041f8:	20000020 	.word	0x20000020

080041fc <cleanup_stdio>:
 80041fc:	6841      	ldr	r1, [r0, #4]
 80041fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004230 <cleanup_stdio+0x34>)
 8004200:	b510      	push	{r4, lr}
 8004202:	4299      	cmp	r1, r3
 8004204:	4604      	mov	r4, r0
 8004206:	d001      	beq.n	800420c <cleanup_stdio+0x10>
 8004208:	f000 feda 	bl	8004fc0 <_fflush_r>
 800420c:	68a1      	ldr	r1, [r4, #8]
 800420e:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <cleanup_stdio+0x38>)
 8004210:	4299      	cmp	r1, r3
 8004212:	d002      	beq.n	800421a <cleanup_stdio+0x1e>
 8004214:	4620      	mov	r0, r4
 8004216:	f000 fed3 	bl	8004fc0 <_fflush_r>
 800421a:	68e1      	ldr	r1, [r4, #12]
 800421c:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <cleanup_stdio+0x3c>)
 800421e:	4299      	cmp	r1, r3
 8004220:	d004      	beq.n	800422c <cleanup_stdio+0x30>
 8004222:	4620      	mov	r0, r4
 8004224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004228:	f000 beca 	b.w	8004fc0 <_fflush_r>
 800422c:	bd10      	pop	{r4, pc}
 800422e:	bf00      	nop
 8004230:	200011b4 	.word	0x200011b4
 8004234:	2000121c 	.word	0x2000121c
 8004238:	20001284 	.word	0x20001284

0800423c <global_stdio_init.part.0>:
 800423c:	b510      	push	{r4, lr}
 800423e:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <global_stdio_init.part.0+0x30>)
 8004240:	4c0b      	ldr	r4, [pc, #44]	@ (8004270 <global_stdio_init.part.0+0x34>)
 8004242:	4a0c      	ldr	r2, [pc, #48]	@ (8004274 <global_stdio_init.part.0+0x38>)
 8004244:	4620      	mov	r0, r4
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	2104      	movs	r1, #4
 800424a:	2200      	movs	r2, #0
 800424c:	f7ff ff94 	bl	8004178 <std>
 8004250:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004254:	2201      	movs	r2, #1
 8004256:	2109      	movs	r1, #9
 8004258:	f7ff ff8e 	bl	8004178 <std>
 800425c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004260:	2202      	movs	r2, #2
 8004262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004266:	2112      	movs	r1, #18
 8004268:	f7ff bf86 	b.w	8004178 <std>
 800426c:	200012ec 	.word	0x200012ec
 8004270:	200011b4 	.word	0x200011b4
 8004274:	080041e5 	.word	0x080041e5

08004278 <__sfp_lock_acquire>:
 8004278:	4801      	ldr	r0, [pc, #4]	@ (8004280 <__sfp_lock_acquire+0x8>)
 800427a:	f000 ba56 	b.w	800472a <__retarget_lock_acquire_recursive>
 800427e:	bf00      	nop
 8004280:	200012f5 	.word	0x200012f5

08004284 <__sfp_lock_release>:
 8004284:	4801      	ldr	r0, [pc, #4]	@ (800428c <__sfp_lock_release+0x8>)
 8004286:	f000 ba51 	b.w	800472c <__retarget_lock_release_recursive>
 800428a:	bf00      	nop
 800428c:	200012f5 	.word	0x200012f5

08004290 <__sinit>:
 8004290:	b510      	push	{r4, lr}
 8004292:	4604      	mov	r4, r0
 8004294:	f7ff fff0 	bl	8004278 <__sfp_lock_acquire>
 8004298:	6a23      	ldr	r3, [r4, #32]
 800429a:	b11b      	cbz	r3, 80042a4 <__sinit+0x14>
 800429c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042a0:	f7ff bff0 	b.w	8004284 <__sfp_lock_release>
 80042a4:	4b04      	ldr	r3, [pc, #16]	@ (80042b8 <__sinit+0x28>)
 80042a6:	6223      	str	r3, [r4, #32]
 80042a8:	4b04      	ldr	r3, [pc, #16]	@ (80042bc <__sinit+0x2c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1f5      	bne.n	800429c <__sinit+0xc>
 80042b0:	f7ff ffc4 	bl	800423c <global_stdio_init.part.0>
 80042b4:	e7f2      	b.n	800429c <__sinit+0xc>
 80042b6:	bf00      	nop
 80042b8:	080041fd 	.word	0x080041fd
 80042bc:	200012ec 	.word	0x200012ec

080042c0 <_fwalk_sglue>:
 80042c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042c4:	4607      	mov	r7, r0
 80042c6:	4688      	mov	r8, r1
 80042c8:	4614      	mov	r4, r2
 80042ca:	2600      	movs	r6, #0
 80042cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042d0:	f1b9 0901 	subs.w	r9, r9, #1
 80042d4:	d505      	bpl.n	80042e2 <_fwalk_sglue+0x22>
 80042d6:	6824      	ldr	r4, [r4, #0]
 80042d8:	2c00      	cmp	r4, #0
 80042da:	d1f7      	bne.n	80042cc <_fwalk_sglue+0xc>
 80042dc:	4630      	mov	r0, r6
 80042de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042e2:	89ab      	ldrh	r3, [r5, #12]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d907      	bls.n	80042f8 <_fwalk_sglue+0x38>
 80042e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042ec:	3301      	adds	r3, #1
 80042ee:	d003      	beq.n	80042f8 <_fwalk_sglue+0x38>
 80042f0:	4629      	mov	r1, r5
 80042f2:	4638      	mov	r0, r7
 80042f4:	47c0      	blx	r8
 80042f6:	4306      	orrs	r6, r0
 80042f8:	3568      	adds	r5, #104	@ 0x68
 80042fa:	e7e9      	b.n	80042d0 <_fwalk_sglue+0x10>

080042fc <iprintf>:
 80042fc:	b40f      	push	{r0, r1, r2, r3}
 80042fe:	b507      	push	{r0, r1, r2, lr}
 8004300:	4906      	ldr	r1, [pc, #24]	@ (800431c <iprintf+0x20>)
 8004302:	ab04      	add	r3, sp, #16
 8004304:	6808      	ldr	r0, [r1, #0]
 8004306:	f853 2b04 	ldr.w	r2, [r3], #4
 800430a:	6881      	ldr	r1, [r0, #8]
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	f000 fb2d 	bl	800496c <_vfiprintf_r>
 8004312:	b003      	add	sp, #12
 8004314:	f85d eb04 	ldr.w	lr, [sp], #4
 8004318:	b004      	add	sp, #16
 800431a:	4770      	bx	lr
 800431c:	2000001c 	.word	0x2000001c

08004320 <_puts_r>:
 8004320:	6a03      	ldr	r3, [r0, #32]
 8004322:	b570      	push	{r4, r5, r6, lr}
 8004324:	4605      	mov	r5, r0
 8004326:	460e      	mov	r6, r1
 8004328:	6884      	ldr	r4, [r0, #8]
 800432a:	b90b      	cbnz	r3, 8004330 <_puts_r+0x10>
 800432c:	f7ff ffb0 	bl	8004290 <__sinit>
 8004330:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004332:	07db      	lsls	r3, r3, #31
 8004334:	d405      	bmi.n	8004342 <_puts_r+0x22>
 8004336:	89a3      	ldrh	r3, [r4, #12]
 8004338:	0598      	lsls	r0, r3, #22
 800433a:	d402      	bmi.n	8004342 <_puts_r+0x22>
 800433c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800433e:	f000 f9f4 	bl	800472a <__retarget_lock_acquire_recursive>
 8004342:	89a3      	ldrh	r3, [r4, #12]
 8004344:	0719      	lsls	r1, r3, #28
 8004346:	d502      	bpl.n	800434e <_puts_r+0x2e>
 8004348:	6923      	ldr	r3, [r4, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d135      	bne.n	80043ba <_puts_r+0x9a>
 800434e:	4621      	mov	r1, r4
 8004350:	4628      	mov	r0, r5
 8004352:	f000 f8c5 	bl	80044e0 <__swsetup_r>
 8004356:	b380      	cbz	r0, 80043ba <_puts_r+0x9a>
 8004358:	f04f 35ff 	mov.w	r5, #4294967295
 800435c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800435e:	07da      	lsls	r2, r3, #31
 8004360:	d405      	bmi.n	800436e <_puts_r+0x4e>
 8004362:	89a3      	ldrh	r3, [r4, #12]
 8004364:	059b      	lsls	r3, r3, #22
 8004366:	d402      	bmi.n	800436e <_puts_r+0x4e>
 8004368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800436a:	f000 f9df 	bl	800472c <__retarget_lock_release_recursive>
 800436e:	4628      	mov	r0, r5
 8004370:	bd70      	pop	{r4, r5, r6, pc}
 8004372:	2b00      	cmp	r3, #0
 8004374:	da04      	bge.n	8004380 <_puts_r+0x60>
 8004376:	69a2      	ldr	r2, [r4, #24]
 8004378:	429a      	cmp	r2, r3
 800437a:	dc17      	bgt.n	80043ac <_puts_r+0x8c>
 800437c:	290a      	cmp	r1, #10
 800437e:	d015      	beq.n	80043ac <_puts_r+0x8c>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	6022      	str	r2, [r4, #0]
 8004386:	7019      	strb	r1, [r3, #0]
 8004388:	68a3      	ldr	r3, [r4, #8]
 800438a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800438e:	3b01      	subs	r3, #1
 8004390:	60a3      	str	r3, [r4, #8]
 8004392:	2900      	cmp	r1, #0
 8004394:	d1ed      	bne.n	8004372 <_puts_r+0x52>
 8004396:	2b00      	cmp	r3, #0
 8004398:	da11      	bge.n	80043be <_puts_r+0x9e>
 800439a:	4622      	mov	r2, r4
 800439c:	210a      	movs	r1, #10
 800439e:	4628      	mov	r0, r5
 80043a0:	f000 f85f 	bl	8004462 <__swbuf_r>
 80043a4:	3001      	adds	r0, #1
 80043a6:	d0d7      	beq.n	8004358 <_puts_r+0x38>
 80043a8:	250a      	movs	r5, #10
 80043aa:	e7d7      	b.n	800435c <_puts_r+0x3c>
 80043ac:	4622      	mov	r2, r4
 80043ae:	4628      	mov	r0, r5
 80043b0:	f000 f857 	bl	8004462 <__swbuf_r>
 80043b4:	3001      	adds	r0, #1
 80043b6:	d1e7      	bne.n	8004388 <_puts_r+0x68>
 80043b8:	e7ce      	b.n	8004358 <_puts_r+0x38>
 80043ba:	3e01      	subs	r6, #1
 80043bc:	e7e4      	b.n	8004388 <_puts_r+0x68>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	6022      	str	r2, [r4, #0]
 80043c4:	220a      	movs	r2, #10
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	e7ee      	b.n	80043a8 <_puts_r+0x88>
	...

080043cc <puts>:
 80043cc:	4b02      	ldr	r3, [pc, #8]	@ (80043d8 <puts+0xc>)
 80043ce:	4601      	mov	r1, r0
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	f7ff bfa5 	b.w	8004320 <_puts_r>
 80043d6:	bf00      	nop
 80043d8:	2000001c 	.word	0x2000001c

080043dc <__sread>:
 80043dc:	b510      	push	{r4, lr}
 80043de:	460c      	mov	r4, r1
 80043e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e4:	f000 f952 	bl	800468c <_read_r>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	bfab      	itete	ge
 80043ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043ee:	89a3      	ldrhlt	r3, [r4, #12]
 80043f0:	181b      	addge	r3, r3, r0
 80043f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80043f6:	bfac      	ite	ge
 80043f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80043fa:	81a3      	strhlt	r3, [r4, #12]
 80043fc:	bd10      	pop	{r4, pc}

080043fe <__swrite>:
 80043fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004402:	461f      	mov	r7, r3
 8004404:	898b      	ldrh	r3, [r1, #12]
 8004406:	4605      	mov	r5, r0
 8004408:	05db      	lsls	r3, r3, #23
 800440a:	460c      	mov	r4, r1
 800440c:	4616      	mov	r6, r2
 800440e:	d505      	bpl.n	800441c <__swrite+0x1e>
 8004410:	2302      	movs	r3, #2
 8004412:	2200      	movs	r2, #0
 8004414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004418:	f000 f926 	bl	8004668 <_lseek_r>
 800441c:	89a3      	ldrh	r3, [r4, #12]
 800441e:	4632      	mov	r2, r6
 8004420:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004424:	81a3      	strh	r3, [r4, #12]
 8004426:	4628      	mov	r0, r5
 8004428:	463b      	mov	r3, r7
 800442a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800442e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004432:	f000 b93d 	b.w	80046b0 <_write_r>

08004436 <__sseek>:
 8004436:	b510      	push	{r4, lr}
 8004438:	460c      	mov	r4, r1
 800443a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800443e:	f000 f913 	bl	8004668 <_lseek_r>
 8004442:	1c43      	adds	r3, r0, #1
 8004444:	89a3      	ldrh	r3, [r4, #12]
 8004446:	bf15      	itete	ne
 8004448:	6560      	strne	r0, [r4, #84]	@ 0x54
 800444a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800444e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004452:	81a3      	strheq	r3, [r4, #12]
 8004454:	bf18      	it	ne
 8004456:	81a3      	strhne	r3, [r4, #12]
 8004458:	bd10      	pop	{r4, pc}

0800445a <__sclose>:
 800445a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800445e:	f000 b89d 	b.w	800459c <_close_r>

08004462 <__swbuf_r>:
 8004462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004464:	460e      	mov	r6, r1
 8004466:	4614      	mov	r4, r2
 8004468:	4605      	mov	r5, r0
 800446a:	b118      	cbz	r0, 8004474 <__swbuf_r+0x12>
 800446c:	6a03      	ldr	r3, [r0, #32]
 800446e:	b90b      	cbnz	r3, 8004474 <__swbuf_r+0x12>
 8004470:	f7ff ff0e 	bl	8004290 <__sinit>
 8004474:	69a3      	ldr	r3, [r4, #24]
 8004476:	60a3      	str	r3, [r4, #8]
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	071a      	lsls	r2, r3, #28
 800447c:	d501      	bpl.n	8004482 <__swbuf_r+0x20>
 800447e:	6923      	ldr	r3, [r4, #16]
 8004480:	b943      	cbnz	r3, 8004494 <__swbuf_r+0x32>
 8004482:	4621      	mov	r1, r4
 8004484:	4628      	mov	r0, r5
 8004486:	f000 f82b 	bl	80044e0 <__swsetup_r>
 800448a:	b118      	cbz	r0, 8004494 <__swbuf_r+0x32>
 800448c:	f04f 37ff 	mov.w	r7, #4294967295
 8004490:	4638      	mov	r0, r7
 8004492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	6922      	ldr	r2, [r4, #16]
 8004498:	b2f6      	uxtb	r6, r6
 800449a:	1a98      	subs	r0, r3, r2
 800449c:	6963      	ldr	r3, [r4, #20]
 800449e:	4637      	mov	r7, r6
 80044a0:	4283      	cmp	r3, r0
 80044a2:	dc05      	bgt.n	80044b0 <__swbuf_r+0x4e>
 80044a4:	4621      	mov	r1, r4
 80044a6:	4628      	mov	r0, r5
 80044a8:	f000 fd8a 	bl	8004fc0 <_fflush_r>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d1ed      	bne.n	800448c <__swbuf_r+0x2a>
 80044b0:	68a3      	ldr	r3, [r4, #8]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	60a3      	str	r3, [r4, #8]
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	6022      	str	r2, [r4, #0]
 80044bc:	701e      	strb	r6, [r3, #0]
 80044be:	6962      	ldr	r2, [r4, #20]
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d004      	beq.n	80044d0 <__swbuf_r+0x6e>
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	07db      	lsls	r3, r3, #31
 80044ca:	d5e1      	bpl.n	8004490 <__swbuf_r+0x2e>
 80044cc:	2e0a      	cmp	r6, #10
 80044ce:	d1df      	bne.n	8004490 <__swbuf_r+0x2e>
 80044d0:	4621      	mov	r1, r4
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 fd74 	bl	8004fc0 <_fflush_r>
 80044d8:	2800      	cmp	r0, #0
 80044da:	d0d9      	beq.n	8004490 <__swbuf_r+0x2e>
 80044dc:	e7d6      	b.n	800448c <__swbuf_r+0x2a>
	...

080044e0 <__swsetup_r>:
 80044e0:	b538      	push	{r3, r4, r5, lr}
 80044e2:	4b29      	ldr	r3, [pc, #164]	@ (8004588 <__swsetup_r+0xa8>)
 80044e4:	4605      	mov	r5, r0
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	460c      	mov	r4, r1
 80044ea:	b118      	cbz	r0, 80044f4 <__swsetup_r+0x14>
 80044ec:	6a03      	ldr	r3, [r0, #32]
 80044ee:	b90b      	cbnz	r3, 80044f4 <__swsetup_r+0x14>
 80044f0:	f7ff fece 	bl	8004290 <__sinit>
 80044f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044f8:	0719      	lsls	r1, r3, #28
 80044fa:	d422      	bmi.n	8004542 <__swsetup_r+0x62>
 80044fc:	06da      	lsls	r2, r3, #27
 80044fe:	d407      	bmi.n	8004510 <__swsetup_r+0x30>
 8004500:	2209      	movs	r2, #9
 8004502:	602a      	str	r2, [r5, #0]
 8004504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	81a3      	strh	r3, [r4, #12]
 800450e:	e033      	b.n	8004578 <__swsetup_r+0x98>
 8004510:	0758      	lsls	r0, r3, #29
 8004512:	d512      	bpl.n	800453a <__swsetup_r+0x5a>
 8004514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004516:	b141      	cbz	r1, 800452a <__swsetup_r+0x4a>
 8004518:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800451c:	4299      	cmp	r1, r3
 800451e:	d002      	beq.n	8004526 <__swsetup_r+0x46>
 8004520:	4628      	mov	r0, r5
 8004522:	f000 f905 	bl	8004730 <_free_r>
 8004526:	2300      	movs	r3, #0
 8004528:	6363      	str	r3, [r4, #52]	@ 0x34
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004530:	81a3      	strh	r3, [r4, #12]
 8004532:	2300      	movs	r3, #0
 8004534:	6063      	str	r3, [r4, #4]
 8004536:	6923      	ldr	r3, [r4, #16]
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	89a3      	ldrh	r3, [r4, #12]
 800453c:	f043 0308 	orr.w	r3, r3, #8
 8004540:	81a3      	strh	r3, [r4, #12]
 8004542:	6923      	ldr	r3, [r4, #16]
 8004544:	b94b      	cbnz	r3, 800455a <__swsetup_r+0x7a>
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800454c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004550:	d003      	beq.n	800455a <__swsetup_r+0x7a>
 8004552:	4621      	mov	r1, r4
 8004554:	4628      	mov	r0, r5
 8004556:	f000 fd80 	bl	800505a <__smakebuf_r>
 800455a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800455e:	f013 0201 	ands.w	r2, r3, #1
 8004562:	d00a      	beq.n	800457a <__swsetup_r+0x9a>
 8004564:	2200      	movs	r2, #0
 8004566:	60a2      	str	r2, [r4, #8]
 8004568:	6962      	ldr	r2, [r4, #20]
 800456a:	4252      	negs	r2, r2
 800456c:	61a2      	str	r2, [r4, #24]
 800456e:	6922      	ldr	r2, [r4, #16]
 8004570:	b942      	cbnz	r2, 8004584 <__swsetup_r+0xa4>
 8004572:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004576:	d1c5      	bne.n	8004504 <__swsetup_r+0x24>
 8004578:	bd38      	pop	{r3, r4, r5, pc}
 800457a:	0799      	lsls	r1, r3, #30
 800457c:	bf58      	it	pl
 800457e:	6962      	ldrpl	r2, [r4, #20]
 8004580:	60a2      	str	r2, [r4, #8]
 8004582:	e7f4      	b.n	800456e <__swsetup_r+0x8e>
 8004584:	2000      	movs	r0, #0
 8004586:	e7f7      	b.n	8004578 <__swsetup_r+0x98>
 8004588:	2000001c 	.word	0x2000001c

0800458c <memset>:
 800458c:	4603      	mov	r3, r0
 800458e:	4402      	add	r2, r0
 8004590:	4293      	cmp	r3, r2
 8004592:	d100      	bne.n	8004596 <memset+0xa>
 8004594:	4770      	bx	lr
 8004596:	f803 1b01 	strb.w	r1, [r3], #1
 800459a:	e7f9      	b.n	8004590 <memset+0x4>

0800459c <_close_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	2300      	movs	r3, #0
 80045a0:	4d05      	ldr	r5, [pc, #20]	@ (80045b8 <_close_r+0x1c>)
 80045a2:	4604      	mov	r4, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	602b      	str	r3, [r5, #0]
 80045a8:	f7fc f927 	bl	80007fa <_close>
 80045ac:	1c43      	adds	r3, r0, #1
 80045ae:	d102      	bne.n	80045b6 <_close_r+0x1a>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	b103      	cbz	r3, 80045b6 <_close_r+0x1a>
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	200012f0 	.word	0x200012f0

080045bc <_reclaim_reent>:
 80045bc:	4b29      	ldr	r3, [pc, #164]	@ (8004664 <_reclaim_reent+0xa8>)
 80045be:	b570      	push	{r4, r5, r6, lr}
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4604      	mov	r4, r0
 80045c4:	4283      	cmp	r3, r0
 80045c6:	d04b      	beq.n	8004660 <_reclaim_reent+0xa4>
 80045c8:	69c3      	ldr	r3, [r0, #28]
 80045ca:	b1ab      	cbz	r3, 80045f8 <_reclaim_reent+0x3c>
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	b16b      	cbz	r3, 80045ec <_reclaim_reent+0x30>
 80045d0:	2500      	movs	r5, #0
 80045d2:	69e3      	ldr	r3, [r4, #28]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	5959      	ldr	r1, [r3, r5]
 80045d8:	2900      	cmp	r1, #0
 80045da:	d13b      	bne.n	8004654 <_reclaim_reent+0x98>
 80045dc:	3504      	adds	r5, #4
 80045de:	2d80      	cmp	r5, #128	@ 0x80
 80045e0:	d1f7      	bne.n	80045d2 <_reclaim_reent+0x16>
 80045e2:	69e3      	ldr	r3, [r4, #28]
 80045e4:	4620      	mov	r0, r4
 80045e6:	68d9      	ldr	r1, [r3, #12]
 80045e8:	f000 f8a2 	bl	8004730 <_free_r>
 80045ec:	69e3      	ldr	r3, [r4, #28]
 80045ee:	6819      	ldr	r1, [r3, #0]
 80045f0:	b111      	cbz	r1, 80045f8 <_reclaim_reent+0x3c>
 80045f2:	4620      	mov	r0, r4
 80045f4:	f000 f89c 	bl	8004730 <_free_r>
 80045f8:	6961      	ldr	r1, [r4, #20]
 80045fa:	b111      	cbz	r1, 8004602 <_reclaim_reent+0x46>
 80045fc:	4620      	mov	r0, r4
 80045fe:	f000 f897 	bl	8004730 <_free_r>
 8004602:	69e1      	ldr	r1, [r4, #28]
 8004604:	b111      	cbz	r1, 800460c <_reclaim_reent+0x50>
 8004606:	4620      	mov	r0, r4
 8004608:	f000 f892 	bl	8004730 <_free_r>
 800460c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800460e:	b111      	cbz	r1, 8004616 <_reclaim_reent+0x5a>
 8004610:	4620      	mov	r0, r4
 8004612:	f000 f88d 	bl	8004730 <_free_r>
 8004616:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004618:	b111      	cbz	r1, 8004620 <_reclaim_reent+0x64>
 800461a:	4620      	mov	r0, r4
 800461c:	f000 f888 	bl	8004730 <_free_r>
 8004620:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004622:	b111      	cbz	r1, 800462a <_reclaim_reent+0x6e>
 8004624:	4620      	mov	r0, r4
 8004626:	f000 f883 	bl	8004730 <_free_r>
 800462a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800462c:	b111      	cbz	r1, 8004634 <_reclaim_reent+0x78>
 800462e:	4620      	mov	r0, r4
 8004630:	f000 f87e 	bl	8004730 <_free_r>
 8004634:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004636:	b111      	cbz	r1, 800463e <_reclaim_reent+0x82>
 8004638:	4620      	mov	r0, r4
 800463a:	f000 f879 	bl	8004730 <_free_r>
 800463e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004640:	b111      	cbz	r1, 8004648 <_reclaim_reent+0x8c>
 8004642:	4620      	mov	r0, r4
 8004644:	f000 f874 	bl	8004730 <_free_r>
 8004648:	6a23      	ldr	r3, [r4, #32]
 800464a:	b14b      	cbz	r3, 8004660 <_reclaim_reent+0xa4>
 800464c:	4620      	mov	r0, r4
 800464e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004652:	4718      	bx	r3
 8004654:	680e      	ldr	r6, [r1, #0]
 8004656:	4620      	mov	r0, r4
 8004658:	f000 f86a 	bl	8004730 <_free_r>
 800465c:	4631      	mov	r1, r6
 800465e:	e7bb      	b.n	80045d8 <_reclaim_reent+0x1c>
 8004660:	bd70      	pop	{r4, r5, r6, pc}
 8004662:	bf00      	nop
 8004664:	2000001c 	.word	0x2000001c

08004668 <_lseek_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4604      	mov	r4, r0
 800466c:	4608      	mov	r0, r1
 800466e:	4611      	mov	r1, r2
 8004670:	2200      	movs	r2, #0
 8004672:	4d05      	ldr	r5, [pc, #20]	@ (8004688 <_lseek_r+0x20>)
 8004674:	602a      	str	r2, [r5, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	f7fc f8e3 	bl	8000842 <_lseek>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d102      	bne.n	8004686 <_lseek_r+0x1e>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	b103      	cbz	r3, 8004686 <_lseek_r+0x1e>
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	bd38      	pop	{r3, r4, r5, pc}
 8004688:	200012f0 	.word	0x200012f0

0800468c <_read_r>:
 800468c:	b538      	push	{r3, r4, r5, lr}
 800468e:	4604      	mov	r4, r0
 8004690:	4608      	mov	r0, r1
 8004692:	4611      	mov	r1, r2
 8004694:	2200      	movs	r2, #0
 8004696:	4d05      	ldr	r5, [pc, #20]	@ (80046ac <_read_r+0x20>)
 8004698:	602a      	str	r2, [r5, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	f7fc f890 	bl	80007c0 <_read>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_read_r+0x1e>
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_read_r+0x1e>
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	200012f0 	.word	0x200012f0

080046b0 <_write_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4604      	mov	r4, r0
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	2200      	movs	r2, #0
 80046ba:	4d05      	ldr	r5, [pc, #20]	@ (80046d0 <_write_r+0x20>)
 80046bc:	602a      	str	r2, [r5, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	f7fb fe90 	bl	80003e4 <_write>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d102      	bne.n	80046ce <_write_r+0x1e>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	b103      	cbz	r3, 80046ce <_write_r+0x1e>
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	200012f0 	.word	0x200012f0

080046d4 <__errno>:
 80046d4:	4b01      	ldr	r3, [pc, #4]	@ (80046dc <__errno+0x8>)
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	2000001c 	.word	0x2000001c

080046e0 <__libc_init_array>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	2600      	movs	r6, #0
 80046e4:	4d0c      	ldr	r5, [pc, #48]	@ (8004718 <__libc_init_array+0x38>)
 80046e6:	4c0d      	ldr	r4, [pc, #52]	@ (800471c <__libc_init_array+0x3c>)
 80046e8:	1b64      	subs	r4, r4, r5
 80046ea:	10a4      	asrs	r4, r4, #2
 80046ec:	42a6      	cmp	r6, r4
 80046ee:	d109      	bne.n	8004704 <__libc_init_array+0x24>
 80046f0:	f000 fd30 	bl	8005154 <_init>
 80046f4:	2600      	movs	r6, #0
 80046f6:	4d0a      	ldr	r5, [pc, #40]	@ (8004720 <__libc_init_array+0x40>)
 80046f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004724 <__libc_init_array+0x44>)
 80046fa:	1b64      	subs	r4, r4, r5
 80046fc:	10a4      	asrs	r4, r4, #2
 80046fe:	42a6      	cmp	r6, r4
 8004700:	d105      	bne.n	800470e <__libc_init_array+0x2e>
 8004702:	bd70      	pop	{r4, r5, r6, pc}
 8004704:	f855 3b04 	ldr.w	r3, [r5], #4
 8004708:	4798      	blx	r3
 800470a:	3601      	adds	r6, #1
 800470c:	e7ee      	b.n	80046ec <__libc_init_array+0xc>
 800470e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004712:	4798      	blx	r3
 8004714:	3601      	adds	r6, #1
 8004716:	e7f2      	b.n	80046fe <__libc_init_array+0x1e>
 8004718:	0800524c 	.word	0x0800524c
 800471c:	0800524c 	.word	0x0800524c
 8004720:	0800524c 	.word	0x0800524c
 8004724:	08005250 	.word	0x08005250

08004728 <__retarget_lock_init_recursive>:
 8004728:	4770      	bx	lr

0800472a <__retarget_lock_acquire_recursive>:
 800472a:	4770      	bx	lr

0800472c <__retarget_lock_release_recursive>:
 800472c:	4770      	bx	lr
	...

08004730 <_free_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4605      	mov	r5, r0
 8004734:	2900      	cmp	r1, #0
 8004736:	d040      	beq.n	80047ba <_free_r+0x8a>
 8004738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800473c:	1f0c      	subs	r4, r1, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	bfb8      	it	lt
 8004742:	18e4      	addlt	r4, r4, r3
 8004744:	f000 f8de 	bl	8004904 <__malloc_lock>
 8004748:	4a1c      	ldr	r2, [pc, #112]	@ (80047bc <_free_r+0x8c>)
 800474a:	6813      	ldr	r3, [r2, #0]
 800474c:	b933      	cbnz	r3, 800475c <_free_r+0x2c>
 800474e:	6063      	str	r3, [r4, #4]
 8004750:	6014      	str	r4, [r2, #0]
 8004752:	4628      	mov	r0, r5
 8004754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004758:	f000 b8da 	b.w	8004910 <__malloc_unlock>
 800475c:	42a3      	cmp	r3, r4
 800475e:	d908      	bls.n	8004772 <_free_r+0x42>
 8004760:	6820      	ldr	r0, [r4, #0]
 8004762:	1821      	adds	r1, r4, r0
 8004764:	428b      	cmp	r3, r1
 8004766:	bf01      	itttt	eq
 8004768:	6819      	ldreq	r1, [r3, #0]
 800476a:	685b      	ldreq	r3, [r3, #4]
 800476c:	1809      	addeq	r1, r1, r0
 800476e:	6021      	streq	r1, [r4, #0]
 8004770:	e7ed      	b.n	800474e <_free_r+0x1e>
 8004772:	461a      	mov	r2, r3
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	b10b      	cbz	r3, 800477c <_free_r+0x4c>
 8004778:	42a3      	cmp	r3, r4
 800477a:	d9fa      	bls.n	8004772 <_free_r+0x42>
 800477c:	6811      	ldr	r1, [r2, #0]
 800477e:	1850      	adds	r0, r2, r1
 8004780:	42a0      	cmp	r0, r4
 8004782:	d10b      	bne.n	800479c <_free_r+0x6c>
 8004784:	6820      	ldr	r0, [r4, #0]
 8004786:	4401      	add	r1, r0
 8004788:	1850      	adds	r0, r2, r1
 800478a:	4283      	cmp	r3, r0
 800478c:	6011      	str	r1, [r2, #0]
 800478e:	d1e0      	bne.n	8004752 <_free_r+0x22>
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4408      	add	r0, r1
 8004796:	6010      	str	r0, [r2, #0]
 8004798:	6053      	str	r3, [r2, #4]
 800479a:	e7da      	b.n	8004752 <_free_r+0x22>
 800479c:	d902      	bls.n	80047a4 <_free_r+0x74>
 800479e:	230c      	movs	r3, #12
 80047a0:	602b      	str	r3, [r5, #0]
 80047a2:	e7d6      	b.n	8004752 <_free_r+0x22>
 80047a4:	6820      	ldr	r0, [r4, #0]
 80047a6:	1821      	adds	r1, r4, r0
 80047a8:	428b      	cmp	r3, r1
 80047aa:	bf01      	itttt	eq
 80047ac:	6819      	ldreq	r1, [r3, #0]
 80047ae:	685b      	ldreq	r3, [r3, #4]
 80047b0:	1809      	addeq	r1, r1, r0
 80047b2:	6021      	streq	r1, [r4, #0]
 80047b4:	6063      	str	r3, [r4, #4]
 80047b6:	6054      	str	r4, [r2, #4]
 80047b8:	e7cb      	b.n	8004752 <_free_r+0x22>
 80047ba:	bd38      	pop	{r3, r4, r5, pc}
 80047bc:	200012fc 	.word	0x200012fc

080047c0 <sbrk_aligned>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	4e0f      	ldr	r6, [pc, #60]	@ (8004800 <sbrk_aligned+0x40>)
 80047c4:	460c      	mov	r4, r1
 80047c6:	6831      	ldr	r1, [r6, #0]
 80047c8:	4605      	mov	r5, r0
 80047ca:	b911      	cbnz	r1, 80047d2 <sbrk_aligned+0x12>
 80047cc:	f000 fca4 	bl	8005118 <_sbrk_r>
 80047d0:	6030      	str	r0, [r6, #0]
 80047d2:	4621      	mov	r1, r4
 80047d4:	4628      	mov	r0, r5
 80047d6:	f000 fc9f 	bl	8005118 <_sbrk_r>
 80047da:	1c43      	adds	r3, r0, #1
 80047dc:	d103      	bne.n	80047e6 <sbrk_aligned+0x26>
 80047de:	f04f 34ff 	mov.w	r4, #4294967295
 80047e2:	4620      	mov	r0, r4
 80047e4:	bd70      	pop	{r4, r5, r6, pc}
 80047e6:	1cc4      	adds	r4, r0, #3
 80047e8:	f024 0403 	bic.w	r4, r4, #3
 80047ec:	42a0      	cmp	r0, r4
 80047ee:	d0f8      	beq.n	80047e2 <sbrk_aligned+0x22>
 80047f0:	1a21      	subs	r1, r4, r0
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 fc90 	bl	8005118 <_sbrk_r>
 80047f8:	3001      	adds	r0, #1
 80047fa:	d1f2      	bne.n	80047e2 <sbrk_aligned+0x22>
 80047fc:	e7ef      	b.n	80047de <sbrk_aligned+0x1e>
 80047fe:	bf00      	nop
 8004800:	200012f8 	.word	0x200012f8

08004804 <_malloc_r>:
 8004804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004808:	1ccd      	adds	r5, r1, #3
 800480a:	f025 0503 	bic.w	r5, r5, #3
 800480e:	3508      	adds	r5, #8
 8004810:	2d0c      	cmp	r5, #12
 8004812:	bf38      	it	cc
 8004814:	250c      	movcc	r5, #12
 8004816:	2d00      	cmp	r5, #0
 8004818:	4606      	mov	r6, r0
 800481a:	db01      	blt.n	8004820 <_malloc_r+0x1c>
 800481c:	42a9      	cmp	r1, r5
 800481e:	d904      	bls.n	800482a <_malloc_r+0x26>
 8004820:	230c      	movs	r3, #12
 8004822:	6033      	str	r3, [r6, #0]
 8004824:	2000      	movs	r0, #0
 8004826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800482a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004900 <_malloc_r+0xfc>
 800482e:	f000 f869 	bl	8004904 <__malloc_lock>
 8004832:	f8d8 3000 	ldr.w	r3, [r8]
 8004836:	461c      	mov	r4, r3
 8004838:	bb44      	cbnz	r4, 800488c <_malloc_r+0x88>
 800483a:	4629      	mov	r1, r5
 800483c:	4630      	mov	r0, r6
 800483e:	f7ff ffbf 	bl	80047c0 <sbrk_aligned>
 8004842:	1c43      	adds	r3, r0, #1
 8004844:	4604      	mov	r4, r0
 8004846:	d158      	bne.n	80048fa <_malloc_r+0xf6>
 8004848:	f8d8 4000 	ldr.w	r4, [r8]
 800484c:	4627      	mov	r7, r4
 800484e:	2f00      	cmp	r7, #0
 8004850:	d143      	bne.n	80048da <_malloc_r+0xd6>
 8004852:	2c00      	cmp	r4, #0
 8004854:	d04b      	beq.n	80048ee <_malloc_r+0xea>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	4639      	mov	r1, r7
 800485a:	4630      	mov	r0, r6
 800485c:	eb04 0903 	add.w	r9, r4, r3
 8004860:	f000 fc5a 	bl	8005118 <_sbrk_r>
 8004864:	4581      	cmp	r9, r0
 8004866:	d142      	bne.n	80048ee <_malloc_r+0xea>
 8004868:	6821      	ldr	r1, [r4, #0]
 800486a:	4630      	mov	r0, r6
 800486c:	1a6d      	subs	r5, r5, r1
 800486e:	4629      	mov	r1, r5
 8004870:	f7ff ffa6 	bl	80047c0 <sbrk_aligned>
 8004874:	3001      	adds	r0, #1
 8004876:	d03a      	beq.n	80048ee <_malloc_r+0xea>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	442b      	add	r3, r5
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	f8d8 3000 	ldr.w	r3, [r8]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	bb62      	cbnz	r2, 80048e0 <_malloc_r+0xdc>
 8004886:	f8c8 7000 	str.w	r7, [r8]
 800488a:	e00f      	b.n	80048ac <_malloc_r+0xa8>
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	1b52      	subs	r2, r2, r5
 8004890:	d420      	bmi.n	80048d4 <_malloc_r+0xd0>
 8004892:	2a0b      	cmp	r2, #11
 8004894:	d917      	bls.n	80048c6 <_malloc_r+0xc2>
 8004896:	1961      	adds	r1, r4, r5
 8004898:	42a3      	cmp	r3, r4
 800489a:	6025      	str	r5, [r4, #0]
 800489c:	bf18      	it	ne
 800489e:	6059      	strne	r1, [r3, #4]
 80048a0:	6863      	ldr	r3, [r4, #4]
 80048a2:	bf08      	it	eq
 80048a4:	f8c8 1000 	streq.w	r1, [r8]
 80048a8:	5162      	str	r2, [r4, r5]
 80048aa:	604b      	str	r3, [r1, #4]
 80048ac:	4630      	mov	r0, r6
 80048ae:	f000 f82f 	bl	8004910 <__malloc_unlock>
 80048b2:	f104 000b 	add.w	r0, r4, #11
 80048b6:	1d23      	adds	r3, r4, #4
 80048b8:	f020 0007 	bic.w	r0, r0, #7
 80048bc:	1ac2      	subs	r2, r0, r3
 80048be:	bf1c      	itt	ne
 80048c0:	1a1b      	subne	r3, r3, r0
 80048c2:	50a3      	strne	r3, [r4, r2]
 80048c4:	e7af      	b.n	8004826 <_malloc_r+0x22>
 80048c6:	6862      	ldr	r2, [r4, #4]
 80048c8:	42a3      	cmp	r3, r4
 80048ca:	bf0c      	ite	eq
 80048cc:	f8c8 2000 	streq.w	r2, [r8]
 80048d0:	605a      	strne	r2, [r3, #4]
 80048d2:	e7eb      	b.n	80048ac <_malloc_r+0xa8>
 80048d4:	4623      	mov	r3, r4
 80048d6:	6864      	ldr	r4, [r4, #4]
 80048d8:	e7ae      	b.n	8004838 <_malloc_r+0x34>
 80048da:	463c      	mov	r4, r7
 80048dc:	687f      	ldr	r7, [r7, #4]
 80048de:	e7b6      	b.n	800484e <_malloc_r+0x4a>
 80048e0:	461a      	mov	r2, r3
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	d1fb      	bne.n	80048e0 <_malloc_r+0xdc>
 80048e8:	2300      	movs	r3, #0
 80048ea:	6053      	str	r3, [r2, #4]
 80048ec:	e7de      	b.n	80048ac <_malloc_r+0xa8>
 80048ee:	230c      	movs	r3, #12
 80048f0:	4630      	mov	r0, r6
 80048f2:	6033      	str	r3, [r6, #0]
 80048f4:	f000 f80c 	bl	8004910 <__malloc_unlock>
 80048f8:	e794      	b.n	8004824 <_malloc_r+0x20>
 80048fa:	6005      	str	r5, [r0, #0]
 80048fc:	e7d6      	b.n	80048ac <_malloc_r+0xa8>
 80048fe:	bf00      	nop
 8004900:	200012fc 	.word	0x200012fc

08004904 <__malloc_lock>:
 8004904:	4801      	ldr	r0, [pc, #4]	@ (800490c <__malloc_lock+0x8>)
 8004906:	f7ff bf10 	b.w	800472a <__retarget_lock_acquire_recursive>
 800490a:	bf00      	nop
 800490c:	200012f4 	.word	0x200012f4

08004910 <__malloc_unlock>:
 8004910:	4801      	ldr	r0, [pc, #4]	@ (8004918 <__malloc_unlock+0x8>)
 8004912:	f7ff bf0b 	b.w	800472c <__retarget_lock_release_recursive>
 8004916:	bf00      	nop
 8004918:	200012f4 	.word	0x200012f4

0800491c <__sfputc_r>:
 800491c:	6893      	ldr	r3, [r2, #8]
 800491e:	b410      	push	{r4}
 8004920:	3b01      	subs	r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	6093      	str	r3, [r2, #8]
 8004926:	da07      	bge.n	8004938 <__sfputc_r+0x1c>
 8004928:	6994      	ldr	r4, [r2, #24]
 800492a:	42a3      	cmp	r3, r4
 800492c:	db01      	blt.n	8004932 <__sfputc_r+0x16>
 800492e:	290a      	cmp	r1, #10
 8004930:	d102      	bne.n	8004938 <__sfputc_r+0x1c>
 8004932:	bc10      	pop	{r4}
 8004934:	f7ff bd95 	b.w	8004462 <__swbuf_r>
 8004938:	6813      	ldr	r3, [r2, #0]
 800493a:	1c58      	adds	r0, r3, #1
 800493c:	6010      	str	r0, [r2, #0]
 800493e:	7019      	strb	r1, [r3, #0]
 8004940:	4608      	mov	r0, r1
 8004942:	bc10      	pop	{r4}
 8004944:	4770      	bx	lr

08004946 <__sfputs_r>:
 8004946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004948:	4606      	mov	r6, r0
 800494a:	460f      	mov	r7, r1
 800494c:	4614      	mov	r4, r2
 800494e:	18d5      	adds	r5, r2, r3
 8004950:	42ac      	cmp	r4, r5
 8004952:	d101      	bne.n	8004958 <__sfputs_r+0x12>
 8004954:	2000      	movs	r0, #0
 8004956:	e007      	b.n	8004968 <__sfputs_r+0x22>
 8004958:	463a      	mov	r2, r7
 800495a:	4630      	mov	r0, r6
 800495c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004960:	f7ff ffdc 	bl	800491c <__sfputc_r>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d1f3      	bne.n	8004950 <__sfputs_r+0xa>
 8004968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800496c <_vfiprintf_r>:
 800496c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004970:	460d      	mov	r5, r1
 8004972:	4614      	mov	r4, r2
 8004974:	4698      	mov	r8, r3
 8004976:	4606      	mov	r6, r0
 8004978:	b09d      	sub	sp, #116	@ 0x74
 800497a:	b118      	cbz	r0, 8004984 <_vfiprintf_r+0x18>
 800497c:	6a03      	ldr	r3, [r0, #32]
 800497e:	b90b      	cbnz	r3, 8004984 <_vfiprintf_r+0x18>
 8004980:	f7ff fc86 	bl	8004290 <__sinit>
 8004984:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004986:	07d9      	lsls	r1, r3, #31
 8004988:	d405      	bmi.n	8004996 <_vfiprintf_r+0x2a>
 800498a:	89ab      	ldrh	r3, [r5, #12]
 800498c:	059a      	lsls	r2, r3, #22
 800498e:	d402      	bmi.n	8004996 <_vfiprintf_r+0x2a>
 8004990:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004992:	f7ff feca 	bl	800472a <__retarget_lock_acquire_recursive>
 8004996:	89ab      	ldrh	r3, [r5, #12]
 8004998:	071b      	lsls	r3, r3, #28
 800499a:	d501      	bpl.n	80049a0 <_vfiprintf_r+0x34>
 800499c:	692b      	ldr	r3, [r5, #16]
 800499e:	b99b      	cbnz	r3, 80049c8 <_vfiprintf_r+0x5c>
 80049a0:	4629      	mov	r1, r5
 80049a2:	4630      	mov	r0, r6
 80049a4:	f7ff fd9c 	bl	80044e0 <__swsetup_r>
 80049a8:	b170      	cbz	r0, 80049c8 <_vfiprintf_r+0x5c>
 80049aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049ac:	07dc      	lsls	r4, r3, #31
 80049ae:	d504      	bpl.n	80049ba <_vfiprintf_r+0x4e>
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295
 80049b4:	b01d      	add	sp, #116	@ 0x74
 80049b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ba:	89ab      	ldrh	r3, [r5, #12]
 80049bc:	0598      	lsls	r0, r3, #22
 80049be:	d4f7      	bmi.n	80049b0 <_vfiprintf_r+0x44>
 80049c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80049c2:	f7ff feb3 	bl	800472c <__retarget_lock_release_recursive>
 80049c6:	e7f3      	b.n	80049b0 <_vfiprintf_r+0x44>
 80049c8:	2300      	movs	r3, #0
 80049ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80049cc:	2320      	movs	r3, #32
 80049ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049d2:	2330      	movs	r3, #48	@ 0x30
 80049d4:	f04f 0901 	mov.w	r9, #1
 80049d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80049dc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004b88 <_vfiprintf_r+0x21c>
 80049e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049e4:	4623      	mov	r3, r4
 80049e6:	469a      	mov	sl, r3
 80049e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049ec:	b10a      	cbz	r2, 80049f2 <_vfiprintf_r+0x86>
 80049ee:	2a25      	cmp	r2, #37	@ 0x25
 80049f0:	d1f9      	bne.n	80049e6 <_vfiprintf_r+0x7a>
 80049f2:	ebba 0b04 	subs.w	fp, sl, r4
 80049f6:	d00b      	beq.n	8004a10 <_vfiprintf_r+0xa4>
 80049f8:	465b      	mov	r3, fp
 80049fa:	4622      	mov	r2, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	4630      	mov	r0, r6
 8004a00:	f7ff ffa1 	bl	8004946 <__sfputs_r>
 8004a04:	3001      	adds	r0, #1
 8004a06:	f000 80a7 	beq.w	8004b58 <_vfiprintf_r+0x1ec>
 8004a0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a0c:	445a      	add	r2, fp
 8004a0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a10:	f89a 3000 	ldrb.w	r3, [sl]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 809f 	beq.w	8004b58 <_vfiprintf_r+0x1ec>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a24:	f10a 0a01 	add.w	sl, sl, #1
 8004a28:	9304      	str	r3, [sp, #16]
 8004a2a:	9307      	str	r3, [sp, #28]
 8004a2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a30:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a32:	4654      	mov	r4, sl
 8004a34:	2205      	movs	r2, #5
 8004a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a3a:	4853      	ldr	r0, [pc, #332]	@ (8004b88 <_vfiprintf_r+0x21c>)
 8004a3c:	f000 fb7c 	bl	8005138 <memchr>
 8004a40:	9a04      	ldr	r2, [sp, #16]
 8004a42:	b9d8      	cbnz	r0, 8004a7c <_vfiprintf_r+0x110>
 8004a44:	06d1      	lsls	r1, r2, #27
 8004a46:	bf44      	itt	mi
 8004a48:	2320      	movmi	r3, #32
 8004a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a4e:	0713      	lsls	r3, r2, #28
 8004a50:	bf44      	itt	mi
 8004a52:	232b      	movmi	r3, #43	@ 0x2b
 8004a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a58:	f89a 3000 	ldrb.w	r3, [sl]
 8004a5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a5e:	d015      	beq.n	8004a8c <_vfiprintf_r+0x120>
 8004a60:	4654      	mov	r4, sl
 8004a62:	2000      	movs	r0, #0
 8004a64:	f04f 0c0a 	mov.w	ip, #10
 8004a68:	9a07      	ldr	r2, [sp, #28]
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a70:	3b30      	subs	r3, #48	@ 0x30
 8004a72:	2b09      	cmp	r3, #9
 8004a74:	d94b      	bls.n	8004b0e <_vfiprintf_r+0x1a2>
 8004a76:	b1b0      	cbz	r0, 8004aa6 <_vfiprintf_r+0x13a>
 8004a78:	9207      	str	r2, [sp, #28]
 8004a7a:	e014      	b.n	8004aa6 <_vfiprintf_r+0x13a>
 8004a7c:	eba0 0308 	sub.w	r3, r0, r8
 8004a80:	fa09 f303 	lsl.w	r3, r9, r3
 8004a84:	4313      	orrs	r3, r2
 8004a86:	46a2      	mov	sl, r4
 8004a88:	9304      	str	r3, [sp, #16]
 8004a8a:	e7d2      	b.n	8004a32 <_vfiprintf_r+0xc6>
 8004a8c:	9b03      	ldr	r3, [sp, #12]
 8004a8e:	1d19      	adds	r1, r3, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	9103      	str	r1, [sp, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bfbb      	ittet	lt
 8004a98:	425b      	neglt	r3, r3
 8004a9a:	f042 0202 	orrlt.w	r2, r2, #2
 8004a9e:	9307      	strge	r3, [sp, #28]
 8004aa0:	9307      	strlt	r3, [sp, #28]
 8004aa2:	bfb8      	it	lt
 8004aa4:	9204      	strlt	r2, [sp, #16]
 8004aa6:	7823      	ldrb	r3, [r4, #0]
 8004aa8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004aaa:	d10a      	bne.n	8004ac2 <_vfiprintf_r+0x156>
 8004aac:	7863      	ldrb	r3, [r4, #1]
 8004aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ab0:	d132      	bne.n	8004b18 <_vfiprintf_r+0x1ac>
 8004ab2:	9b03      	ldr	r3, [sp, #12]
 8004ab4:	3402      	adds	r4, #2
 8004ab6:	1d1a      	adds	r2, r3, #4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	9203      	str	r2, [sp, #12]
 8004abc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ac0:	9305      	str	r3, [sp, #20]
 8004ac2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004b8c <_vfiprintf_r+0x220>
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	4650      	mov	r0, sl
 8004aca:	7821      	ldrb	r1, [r4, #0]
 8004acc:	f000 fb34 	bl	8005138 <memchr>
 8004ad0:	b138      	cbz	r0, 8004ae2 <_vfiprintf_r+0x176>
 8004ad2:	2240      	movs	r2, #64	@ 0x40
 8004ad4:	9b04      	ldr	r3, [sp, #16]
 8004ad6:	eba0 000a 	sub.w	r0, r0, sl
 8004ada:	4082      	lsls	r2, r0
 8004adc:	4313      	orrs	r3, r2
 8004ade:	3401      	adds	r4, #1
 8004ae0:	9304      	str	r3, [sp, #16]
 8004ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae6:	2206      	movs	r2, #6
 8004ae8:	4829      	ldr	r0, [pc, #164]	@ (8004b90 <_vfiprintf_r+0x224>)
 8004aea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004aee:	f000 fb23 	bl	8005138 <memchr>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d03f      	beq.n	8004b76 <_vfiprintf_r+0x20a>
 8004af6:	4b27      	ldr	r3, [pc, #156]	@ (8004b94 <_vfiprintf_r+0x228>)
 8004af8:	bb1b      	cbnz	r3, 8004b42 <_vfiprintf_r+0x1d6>
 8004afa:	9b03      	ldr	r3, [sp, #12]
 8004afc:	3307      	adds	r3, #7
 8004afe:	f023 0307 	bic.w	r3, r3, #7
 8004b02:	3308      	adds	r3, #8
 8004b04:	9303      	str	r3, [sp, #12]
 8004b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b08:	443b      	add	r3, r7
 8004b0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b0c:	e76a      	b.n	80049e4 <_vfiprintf_r+0x78>
 8004b0e:	460c      	mov	r4, r1
 8004b10:	2001      	movs	r0, #1
 8004b12:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b16:	e7a8      	b.n	8004a6a <_vfiprintf_r+0xfe>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f04f 0c0a 	mov.w	ip, #10
 8004b1e:	4619      	mov	r1, r3
 8004b20:	3401      	adds	r4, #1
 8004b22:	9305      	str	r3, [sp, #20]
 8004b24:	4620      	mov	r0, r4
 8004b26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b2a:	3a30      	subs	r2, #48	@ 0x30
 8004b2c:	2a09      	cmp	r2, #9
 8004b2e:	d903      	bls.n	8004b38 <_vfiprintf_r+0x1cc>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0c6      	beq.n	8004ac2 <_vfiprintf_r+0x156>
 8004b34:	9105      	str	r1, [sp, #20]
 8004b36:	e7c4      	b.n	8004ac2 <_vfiprintf_r+0x156>
 8004b38:	4604      	mov	r4, r0
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b40:	e7f0      	b.n	8004b24 <_vfiprintf_r+0x1b8>
 8004b42:	ab03      	add	r3, sp, #12
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	462a      	mov	r2, r5
 8004b48:	4630      	mov	r0, r6
 8004b4a:	4b13      	ldr	r3, [pc, #76]	@ (8004b98 <_vfiprintf_r+0x22c>)
 8004b4c:	a904      	add	r1, sp, #16
 8004b4e:	f3af 8000 	nop.w
 8004b52:	4607      	mov	r7, r0
 8004b54:	1c78      	adds	r0, r7, #1
 8004b56:	d1d6      	bne.n	8004b06 <_vfiprintf_r+0x19a>
 8004b58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b5a:	07d9      	lsls	r1, r3, #31
 8004b5c:	d405      	bmi.n	8004b6a <_vfiprintf_r+0x1fe>
 8004b5e:	89ab      	ldrh	r3, [r5, #12]
 8004b60:	059a      	lsls	r2, r3, #22
 8004b62:	d402      	bmi.n	8004b6a <_vfiprintf_r+0x1fe>
 8004b64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b66:	f7ff fde1 	bl	800472c <__retarget_lock_release_recursive>
 8004b6a:	89ab      	ldrh	r3, [r5, #12]
 8004b6c:	065b      	lsls	r3, r3, #25
 8004b6e:	f53f af1f 	bmi.w	80049b0 <_vfiprintf_r+0x44>
 8004b72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b74:	e71e      	b.n	80049b4 <_vfiprintf_r+0x48>
 8004b76:	ab03      	add	r3, sp, #12
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	462a      	mov	r2, r5
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <_vfiprintf_r+0x22c>)
 8004b80:	a904      	add	r1, sp, #16
 8004b82:	f000 f87d 	bl	8004c80 <_printf_i>
 8004b86:	e7e4      	b.n	8004b52 <_vfiprintf_r+0x1e6>
 8004b88:	08005216 	.word	0x08005216
 8004b8c:	0800521c 	.word	0x0800521c
 8004b90:	08005220 	.word	0x08005220
 8004b94:	00000000 	.word	0x00000000
 8004b98:	08004947 	.word	0x08004947

08004b9c <_printf_common>:
 8004b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba0:	4616      	mov	r6, r2
 8004ba2:	4698      	mov	r8, r3
 8004ba4:	688a      	ldr	r2, [r1, #8]
 8004ba6:	690b      	ldr	r3, [r1, #16]
 8004ba8:	4607      	mov	r7, r0
 8004baa:	4293      	cmp	r3, r2
 8004bac:	bfb8      	it	lt
 8004bae:	4613      	movlt	r3, r2
 8004bb0:	6033      	str	r3, [r6, #0]
 8004bb2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bbc:	b10a      	cbz	r2, 8004bc2 <_printf_common+0x26>
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	6033      	str	r3, [r6, #0]
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	0699      	lsls	r1, r3, #26
 8004bc6:	bf42      	ittt	mi
 8004bc8:	6833      	ldrmi	r3, [r6, #0]
 8004bca:	3302      	addmi	r3, #2
 8004bcc:	6033      	strmi	r3, [r6, #0]
 8004bce:	6825      	ldr	r5, [r4, #0]
 8004bd0:	f015 0506 	ands.w	r5, r5, #6
 8004bd4:	d106      	bne.n	8004be4 <_printf_common+0x48>
 8004bd6:	f104 0a19 	add.w	sl, r4, #25
 8004bda:	68e3      	ldr	r3, [r4, #12]
 8004bdc:	6832      	ldr	r2, [r6, #0]
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	42ab      	cmp	r3, r5
 8004be2:	dc2b      	bgt.n	8004c3c <_printf_common+0xa0>
 8004be4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004be8:	6822      	ldr	r2, [r4, #0]
 8004bea:	3b00      	subs	r3, #0
 8004bec:	bf18      	it	ne
 8004bee:	2301      	movne	r3, #1
 8004bf0:	0692      	lsls	r2, r2, #26
 8004bf2:	d430      	bmi.n	8004c56 <_printf_common+0xba>
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	4638      	mov	r0, r7
 8004bf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bfc:	47c8      	blx	r9
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d023      	beq.n	8004c4a <_printf_common+0xae>
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	6922      	ldr	r2, [r4, #16]
 8004c06:	f003 0306 	and.w	r3, r3, #6
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	bf14      	ite	ne
 8004c0e:	2500      	movne	r5, #0
 8004c10:	6833      	ldreq	r3, [r6, #0]
 8004c12:	f04f 0600 	mov.w	r6, #0
 8004c16:	bf08      	it	eq
 8004c18:	68e5      	ldreq	r5, [r4, #12]
 8004c1a:	f104 041a 	add.w	r4, r4, #26
 8004c1e:	bf08      	it	eq
 8004c20:	1aed      	subeq	r5, r5, r3
 8004c22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c26:	bf08      	it	eq
 8004c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	bfc4      	itt	gt
 8004c30:	1a9b      	subgt	r3, r3, r2
 8004c32:	18ed      	addgt	r5, r5, r3
 8004c34:	42b5      	cmp	r5, r6
 8004c36:	d11a      	bne.n	8004c6e <_printf_common+0xd2>
 8004c38:	2000      	movs	r0, #0
 8004c3a:	e008      	b.n	8004c4e <_printf_common+0xb2>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	4652      	mov	r2, sl
 8004c40:	4641      	mov	r1, r8
 8004c42:	4638      	mov	r0, r7
 8004c44:	47c8      	blx	r9
 8004c46:	3001      	adds	r0, #1
 8004c48:	d103      	bne.n	8004c52 <_printf_common+0xb6>
 8004c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c52:	3501      	adds	r5, #1
 8004c54:	e7c1      	b.n	8004bda <_printf_common+0x3e>
 8004c56:	2030      	movs	r0, #48	@ 0x30
 8004c58:	18e1      	adds	r1, r4, r3
 8004c5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c64:	4422      	add	r2, r4
 8004c66:	3302      	adds	r3, #2
 8004c68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c6c:	e7c2      	b.n	8004bf4 <_printf_common+0x58>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	4622      	mov	r2, r4
 8004c72:	4641      	mov	r1, r8
 8004c74:	4638      	mov	r0, r7
 8004c76:	47c8      	blx	r9
 8004c78:	3001      	adds	r0, #1
 8004c7a:	d0e6      	beq.n	8004c4a <_printf_common+0xae>
 8004c7c:	3601      	adds	r6, #1
 8004c7e:	e7d9      	b.n	8004c34 <_printf_common+0x98>

08004c80 <_printf_i>:
 8004c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c84:	7e0f      	ldrb	r7, [r1, #24]
 8004c86:	4691      	mov	r9, r2
 8004c88:	2f78      	cmp	r7, #120	@ 0x78
 8004c8a:	4680      	mov	r8, r0
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	469a      	mov	sl, r3
 8004c90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c96:	d807      	bhi.n	8004ca8 <_printf_i+0x28>
 8004c98:	2f62      	cmp	r7, #98	@ 0x62
 8004c9a:	d80a      	bhi.n	8004cb2 <_printf_i+0x32>
 8004c9c:	2f00      	cmp	r7, #0
 8004c9e:	f000 80d3 	beq.w	8004e48 <_printf_i+0x1c8>
 8004ca2:	2f58      	cmp	r7, #88	@ 0x58
 8004ca4:	f000 80ba 	beq.w	8004e1c <_printf_i+0x19c>
 8004ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004cb0:	e03a      	b.n	8004d28 <_printf_i+0xa8>
 8004cb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cb6:	2b15      	cmp	r3, #21
 8004cb8:	d8f6      	bhi.n	8004ca8 <_printf_i+0x28>
 8004cba:	a101      	add	r1, pc, #4	@ (adr r1, 8004cc0 <_printf_i+0x40>)
 8004cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cc0:	08004d19 	.word	0x08004d19
 8004cc4:	08004d2d 	.word	0x08004d2d
 8004cc8:	08004ca9 	.word	0x08004ca9
 8004ccc:	08004ca9 	.word	0x08004ca9
 8004cd0:	08004ca9 	.word	0x08004ca9
 8004cd4:	08004ca9 	.word	0x08004ca9
 8004cd8:	08004d2d 	.word	0x08004d2d
 8004cdc:	08004ca9 	.word	0x08004ca9
 8004ce0:	08004ca9 	.word	0x08004ca9
 8004ce4:	08004ca9 	.word	0x08004ca9
 8004ce8:	08004ca9 	.word	0x08004ca9
 8004cec:	08004e2f 	.word	0x08004e2f
 8004cf0:	08004d57 	.word	0x08004d57
 8004cf4:	08004de9 	.word	0x08004de9
 8004cf8:	08004ca9 	.word	0x08004ca9
 8004cfc:	08004ca9 	.word	0x08004ca9
 8004d00:	08004e51 	.word	0x08004e51
 8004d04:	08004ca9 	.word	0x08004ca9
 8004d08:	08004d57 	.word	0x08004d57
 8004d0c:	08004ca9 	.word	0x08004ca9
 8004d10:	08004ca9 	.word	0x08004ca9
 8004d14:	08004df1 	.word	0x08004df1
 8004d18:	6833      	ldr	r3, [r6, #0]
 8004d1a:	1d1a      	adds	r2, r3, #4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6032      	str	r2, [r6, #0]
 8004d20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e09e      	b.n	8004e6a <_printf_i+0x1ea>
 8004d2c:	6833      	ldr	r3, [r6, #0]
 8004d2e:	6820      	ldr	r0, [r4, #0]
 8004d30:	1d19      	adds	r1, r3, #4
 8004d32:	6031      	str	r1, [r6, #0]
 8004d34:	0606      	lsls	r6, r0, #24
 8004d36:	d501      	bpl.n	8004d3c <_printf_i+0xbc>
 8004d38:	681d      	ldr	r5, [r3, #0]
 8004d3a:	e003      	b.n	8004d44 <_printf_i+0xc4>
 8004d3c:	0645      	lsls	r5, r0, #25
 8004d3e:	d5fb      	bpl.n	8004d38 <_printf_i+0xb8>
 8004d40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d44:	2d00      	cmp	r5, #0
 8004d46:	da03      	bge.n	8004d50 <_printf_i+0xd0>
 8004d48:	232d      	movs	r3, #45	@ 0x2d
 8004d4a:	426d      	negs	r5, r5
 8004d4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d50:	230a      	movs	r3, #10
 8004d52:	4859      	ldr	r0, [pc, #356]	@ (8004eb8 <_printf_i+0x238>)
 8004d54:	e011      	b.n	8004d7a <_printf_i+0xfa>
 8004d56:	6821      	ldr	r1, [r4, #0]
 8004d58:	6833      	ldr	r3, [r6, #0]
 8004d5a:	0608      	lsls	r0, r1, #24
 8004d5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d60:	d402      	bmi.n	8004d68 <_printf_i+0xe8>
 8004d62:	0649      	lsls	r1, r1, #25
 8004d64:	bf48      	it	mi
 8004d66:	b2ad      	uxthmi	r5, r5
 8004d68:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d6a:	6033      	str	r3, [r6, #0]
 8004d6c:	bf14      	ite	ne
 8004d6e:	230a      	movne	r3, #10
 8004d70:	2308      	moveq	r3, #8
 8004d72:	4851      	ldr	r0, [pc, #324]	@ (8004eb8 <_printf_i+0x238>)
 8004d74:	2100      	movs	r1, #0
 8004d76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d7a:	6866      	ldr	r6, [r4, #4]
 8004d7c:	2e00      	cmp	r6, #0
 8004d7e:	bfa8      	it	ge
 8004d80:	6821      	ldrge	r1, [r4, #0]
 8004d82:	60a6      	str	r6, [r4, #8]
 8004d84:	bfa4      	itt	ge
 8004d86:	f021 0104 	bicge.w	r1, r1, #4
 8004d8a:	6021      	strge	r1, [r4, #0]
 8004d8c:	b90d      	cbnz	r5, 8004d92 <_printf_i+0x112>
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	d04b      	beq.n	8004e2a <_printf_i+0x1aa>
 8004d92:	4616      	mov	r6, r2
 8004d94:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d98:	fb03 5711 	mls	r7, r3, r1, r5
 8004d9c:	5dc7      	ldrb	r7, [r0, r7]
 8004d9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004da2:	462f      	mov	r7, r5
 8004da4:	42bb      	cmp	r3, r7
 8004da6:	460d      	mov	r5, r1
 8004da8:	d9f4      	bls.n	8004d94 <_printf_i+0x114>
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d10b      	bne.n	8004dc6 <_printf_i+0x146>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	07df      	lsls	r7, r3, #31
 8004db2:	d508      	bpl.n	8004dc6 <_printf_i+0x146>
 8004db4:	6923      	ldr	r3, [r4, #16]
 8004db6:	6861      	ldr	r1, [r4, #4]
 8004db8:	4299      	cmp	r1, r3
 8004dba:	bfde      	ittt	le
 8004dbc:	2330      	movle	r3, #48	@ 0x30
 8004dbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dc6:	1b92      	subs	r2, r2, r6
 8004dc8:	6122      	str	r2, [r4, #16]
 8004dca:	464b      	mov	r3, r9
 8004dcc:	4621      	mov	r1, r4
 8004dce:	4640      	mov	r0, r8
 8004dd0:	f8cd a000 	str.w	sl, [sp]
 8004dd4:	aa03      	add	r2, sp, #12
 8004dd6:	f7ff fee1 	bl	8004b9c <_printf_common>
 8004dda:	3001      	adds	r0, #1
 8004ddc:	d14a      	bne.n	8004e74 <_printf_i+0x1f4>
 8004dde:	f04f 30ff 	mov.w	r0, #4294967295
 8004de2:	b004      	add	sp, #16
 8004de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	f043 0320 	orr.w	r3, r3, #32
 8004dee:	6023      	str	r3, [r4, #0]
 8004df0:	2778      	movs	r7, #120	@ 0x78
 8004df2:	4832      	ldr	r0, [pc, #200]	@ (8004ebc <_printf_i+0x23c>)
 8004df4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004df8:	6823      	ldr	r3, [r4, #0]
 8004dfa:	6831      	ldr	r1, [r6, #0]
 8004dfc:	061f      	lsls	r7, r3, #24
 8004dfe:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e02:	d402      	bmi.n	8004e0a <_printf_i+0x18a>
 8004e04:	065f      	lsls	r7, r3, #25
 8004e06:	bf48      	it	mi
 8004e08:	b2ad      	uxthmi	r5, r5
 8004e0a:	6031      	str	r1, [r6, #0]
 8004e0c:	07d9      	lsls	r1, r3, #31
 8004e0e:	bf44      	itt	mi
 8004e10:	f043 0320 	orrmi.w	r3, r3, #32
 8004e14:	6023      	strmi	r3, [r4, #0]
 8004e16:	b11d      	cbz	r5, 8004e20 <_printf_i+0x1a0>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	e7ab      	b.n	8004d74 <_printf_i+0xf4>
 8004e1c:	4826      	ldr	r0, [pc, #152]	@ (8004eb8 <_printf_i+0x238>)
 8004e1e:	e7e9      	b.n	8004df4 <_printf_i+0x174>
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	f023 0320 	bic.w	r3, r3, #32
 8004e26:	6023      	str	r3, [r4, #0]
 8004e28:	e7f6      	b.n	8004e18 <_printf_i+0x198>
 8004e2a:	4616      	mov	r6, r2
 8004e2c:	e7bd      	b.n	8004daa <_printf_i+0x12a>
 8004e2e:	6833      	ldr	r3, [r6, #0]
 8004e30:	6825      	ldr	r5, [r4, #0]
 8004e32:	1d18      	adds	r0, r3, #4
 8004e34:	6961      	ldr	r1, [r4, #20]
 8004e36:	6030      	str	r0, [r6, #0]
 8004e38:	062e      	lsls	r6, r5, #24
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	d501      	bpl.n	8004e42 <_printf_i+0x1c2>
 8004e3e:	6019      	str	r1, [r3, #0]
 8004e40:	e002      	b.n	8004e48 <_printf_i+0x1c8>
 8004e42:	0668      	lsls	r0, r5, #25
 8004e44:	d5fb      	bpl.n	8004e3e <_printf_i+0x1be>
 8004e46:	8019      	strh	r1, [r3, #0]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	4616      	mov	r6, r2
 8004e4c:	6123      	str	r3, [r4, #16]
 8004e4e:	e7bc      	b.n	8004dca <_printf_i+0x14a>
 8004e50:	6833      	ldr	r3, [r6, #0]
 8004e52:	2100      	movs	r1, #0
 8004e54:	1d1a      	adds	r2, r3, #4
 8004e56:	6032      	str	r2, [r6, #0]
 8004e58:	681e      	ldr	r6, [r3, #0]
 8004e5a:	6862      	ldr	r2, [r4, #4]
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	f000 f96b 	bl	8005138 <memchr>
 8004e62:	b108      	cbz	r0, 8004e68 <_printf_i+0x1e8>
 8004e64:	1b80      	subs	r0, r0, r6
 8004e66:	6060      	str	r0, [r4, #4]
 8004e68:	6863      	ldr	r3, [r4, #4]
 8004e6a:	6123      	str	r3, [r4, #16]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e72:	e7aa      	b.n	8004dca <_printf_i+0x14a>
 8004e74:	4632      	mov	r2, r6
 8004e76:	4649      	mov	r1, r9
 8004e78:	4640      	mov	r0, r8
 8004e7a:	6923      	ldr	r3, [r4, #16]
 8004e7c:	47d0      	blx	sl
 8004e7e:	3001      	adds	r0, #1
 8004e80:	d0ad      	beq.n	8004dde <_printf_i+0x15e>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	079b      	lsls	r3, r3, #30
 8004e86:	d413      	bmi.n	8004eb0 <_printf_i+0x230>
 8004e88:	68e0      	ldr	r0, [r4, #12]
 8004e8a:	9b03      	ldr	r3, [sp, #12]
 8004e8c:	4298      	cmp	r0, r3
 8004e8e:	bfb8      	it	lt
 8004e90:	4618      	movlt	r0, r3
 8004e92:	e7a6      	b.n	8004de2 <_printf_i+0x162>
 8004e94:	2301      	movs	r3, #1
 8004e96:	4632      	mov	r2, r6
 8004e98:	4649      	mov	r1, r9
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	47d0      	blx	sl
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d09d      	beq.n	8004dde <_printf_i+0x15e>
 8004ea2:	3501      	adds	r5, #1
 8004ea4:	68e3      	ldr	r3, [r4, #12]
 8004ea6:	9903      	ldr	r1, [sp, #12]
 8004ea8:	1a5b      	subs	r3, r3, r1
 8004eaa:	42ab      	cmp	r3, r5
 8004eac:	dcf2      	bgt.n	8004e94 <_printf_i+0x214>
 8004eae:	e7eb      	b.n	8004e88 <_printf_i+0x208>
 8004eb0:	2500      	movs	r5, #0
 8004eb2:	f104 0619 	add.w	r6, r4, #25
 8004eb6:	e7f5      	b.n	8004ea4 <_printf_i+0x224>
 8004eb8:	08005227 	.word	0x08005227
 8004ebc:	08005238 	.word	0x08005238

08004ec0 <__sflush_r>:
 8004ec0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec6:	0716      	lsls	r6, r2, #28
 8004ec8:	4605      	mov	r5, r0
 8004eca:	460c      	mov	r4, r1
 8004ecc:	d454      	bmi.n	8004f78 <__sflush_r+0xb8>
 8004ece:	684b      	ldr	r3, [r1, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	dc02      	bgt.n	8004eda <__sflush_r+0x1a>
 8004ed4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	dd48      	ble.n	8004f6c <__sflush_r+0xac>
 8004eda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004edc:	2e00      	cmp	r6, #0
 8004ede:	d045      	beq.n	8004f6c <__sflush_r+0xac>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004ee6:	682f      	ldr	r7, [r5, #0]
 8004ee8:	6a21      	ldr	r1, [r4, #32]
 8004eea:	602b      	str	r3, [r5, #0]
 8004eec:	d030      	beq.n	8004f50 <__sflush_r+0x90>
 8004eee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ef0:	89a3      	ldrh	r3, [r4, #12]
 8004ef2:	0759      	lsls	r1, r3, #29
 8004ef4:	d505      	bpl.n	8004f02 <__sflush_r+0x42>
 8004ef6:	6863      	ldr	r3, [r4, #4]
 8004ef8:	1ad2      	subs	r2, r2, r3
 8004efa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004efc:	b10b      	cbz	r3, 8004f02 <__sflush_r+0x42>
 8004efe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f00:	1ad2      	subs	r2, r2, r3
 8004f02:	2300      	movs	r3, #0
 8004f04:	4628      	mov	r0, r5
 8004f06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f08:	6a21      	ldr	r1, [r4, #32]
 8004f0a:	47b0      	blx	r6
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	d106      	bne.n	8004f20 <__sflush_r+0x60>
 8004f12:	6829      	ldr	r1, [r5, #0]
 8004f14:	291d      	cmp	r1, #29
 8004f16:	d82b      	bhi.n	8004f70 <__sflush_r+0xb0>
 8004f18:	4a28      	ldr	r2, [pc, #160]	@ (8004fbc <__sflush_r+0xfc>)
 8004f1a:	410a      	asrs	r2, r1
 8004f1c:	07d6      	lsls	r6, r2, #31
 8004f1e:	d427      	bmi.n	8004f70 <__sflush_r+0xb0>
 8004f20:	2200      	movs	r2, #0
 8004f22:	6062      	str	r2, [r4, #4]
 8004f24:	6922      	ldr	r2, [r4, #16]
 8004f26:	04d9      	lsls	r1, r3, #19
 8004f28:	6022      	str	r2, [r4, #0]
 8004f2a:	d504      	bpl.n	8004f36 <__sflush_r+0x76>
 8004f2c:	1c42      	adds	r2, r0, #1
 8004f2e:	d101      	bne.n	8004f34 <__sflush_r+0x74>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	b903      	cbnz	r3, 8004f36 <__sflush_r+0x76>
 8004f34:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f38:	602f      	str	r7, [r5, #0]
 8004f3a:	b1b9      	cbz	r1, 8004f6c <__sflush_r+0xac>
 8004f3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f40:	4299      	cmp	r1, r3
 8004f42:	d002      	beq.n	8004f4a <__sflush_r+0x8a>
 8004f44:	4628      	mov	r0, r5
 8004f46:	f7ff fbf3 	bl	8004730 <_free_r>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f4e:	e00d      	b.n	8004f6c <__sflush_r+0xac>
 8004f50:	2301      	movs	r3, #1
 8004f52:	4628      	mov	r0, r5
 8004f54:	47b0      	blx	r6
 8004f56:	4602      	mov	r2, r0
 8004f58:	1c50      	adds	r0, r2, #1
 8004f5a:	d1c9      	bne.n	8004ef0 <__sflush_r+0x30>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0c6      	beq.n	8004ef0 <__sflush_r+0x30>
 8004f62:	2b1d      	cmp	r3, #29
 8004f64:	d001      	beq.n	8004f6a <__sflush_r+0xaa>
 8004f66:	2b16      	cmp	r3, #22
 8004f68:	d11d      	bne.n	8004fa6 <__sflush_r+0xe6>
 8004f6a:	602f      	str	r7, [r5, #0]
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	e021      	b.n	8004fb4 <__sflush_r+0xf4>
 8004f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f74:	b21b      	sxth	r3, r3
 8004f76:	e01a      	b.n	8004fae <__sflush_r+0xee>
 8004f78:	690f      	ldr	r7, [r1, #16]
 8004f7a:	2f00      	cmp	r7, #0
 8004f7c:	d0f6      	beq.n	8004f6c <__sflush_r+0xac>
 8004f7e:	0793      	lsls	r3, r2, #30
 8004f80:	bf18      	it	ne
 8004f82:	2300      	movne	r3, #0
 8004f84:	680e      	ldr	r6, [r1, #0]
 8004f86:	bf08      	it	eq
 8004f88:	694b      	ldreq	r3, [r1, #20]
 8004f8a:	1bf6      	subs	r6, r6, r7
 8004f8c:	600f      	str	r7, [r1, #0]
 8004f8e:	608b      	str	r3, [r1, #8]
 8004f90:	2e00      	cmp	r6, #0
 8004f92:	ddeb      	ble.n	8004f6c <__sflush_r+0xac>
 8004f94:	4633      	mov	r3, r6
 8004f96:	463a      	mov	r2, r7
 8004f98:	4628      	mov	r0, r5
 8004f9a:	6a21      	ldr	r1, [r4, #32]
 8004f9c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004fa0:	47e0      	blx	ip
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	dc07      	bgt.n	8004fb6 <__sflush_r+0xf6>
 8004fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004faa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fae:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb2:	81a3      	strh	r3, [r4, #12]
 8004fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb6:	4407      	add	r7, r0
 8004fb8:	1a36      	subs	r6, r6, r0
 8004fba:	e7e9      	b.n	8004f90 <__sflush_r+0xd0>
 8004fbc:	dfbffffe 	.word	0xdfbffffe

08004fc0 <_fflush_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	690b      	ldr	r3, [r1, #16]
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	b913      	cbnz	r3, 8004fd0 <_fflush_r+0x10>
 8004fca:	2500      	movs	r5, #0
 8004fcc:	4628      	mov	r0, r5
 8004fce:	bd38      	pop	{r3, r4, r5, pc}
 8004fd0:	b118      	cbz	r0, 8004fda <_fflush_r+0x1a>
 8004fd2:	6a03      	ldr	r3, [r0, #32]
 8004fd4:	b90b      	cbnz	r3, 8004fda <_fflush_r+0x1a>
 8004fd6:	f7ff f95b 	bl	8004290 <__sinit>
 8004fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f3      	beq.n	8004fca <_fflush_r+0xa>
 8004fe2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004fe4:	07d0      	lsls	r0, r2, #31
 8004fe6:	d404      	bmi.n	8004ff2 <_fflush_r+0x32>
 8004fe8:	0599      	lsls	r1, r3, #22
 8004fea:	d402      	bmi.n	8004ff2 <_fflush_r+0x32>
 8004fec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fee:	f7ff fb9c 	bl	800472a <__retarget_lock_acquire_recursive>
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	f7ff ff63 	bl	8004ec0 <__sflush_r>
 8004ffa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ffc:	4605      	mov	r5, r0
 8004ffe:	07da      	lsls	r2, r3, #31
 8005000:	d4e4      	bmi.n	8004fcc <_fflush_r+0xc>
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	059b      	lsls	r3, r3, #22
 8005006:	d4e1      	bmi.n	8004fcc <_fflush_r+0xc>
 8005008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800500a:	f7ff fb8f 	bl	800472c <__retarget_lock_release_recursive>
 800500e:	e7dd      	b.n	8004fcc <_fflush_r+0xc>

08005010 <__swhatbuf_r>:
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	460c      	mov	r4, r1
 8005014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005018:	4615      	mov	r5, r2
 800501a:	2900      	cmp	r1, #0
 800501c:	461e      	mov	r6, r3
 800501e:	b096      	sub	sp, #88	@ 0x58
 8005020:	da0c      	bge.n	800503c <__swhatbuf_r+0x2c>
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	2100      	movs	r1, #0
 8005026:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800502a:	bf14      	ite	ne
 800502c:	2340      	movne	r3, #64	@ 0x40
 800502e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005032:	2000      	movs	r0, #0
 8005034:	6031      	str	r1, [r6, #0]
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	b016      	add	sp, #88	@ 0x58
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	466a      	mov	r2, sp
 800503e:	f000 f849 	bl	80050d4 <_fstat_r>
 8005042:	2800      	cmp	r0, #0
 8005044:	dbed      	blt.n	8005022 <__swhatbuf_r+0x12>
 8005046:	9901      	ldr	r1, [sp, #4]
 8005048:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800504c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005050:	4259      	negs	r1, r3
 8005052:	4159      	adcs	r1, r3
 8005054:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005058:	e7eb      	b.n	8005032 <__swhatbuf_r+0x22>

0800505a <__smakebuf_r>:
 800505a:	898b      	ldrh	r3, [r1, #12]
 800505c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800505e:	079d      	lsls	r5, r3, #30
 8005060:	4606      	mov	r6, r0
 8005062:	460c      	mov	r4, r1
 8005064:	d507      	bpl.n	8005076 <__smakebuf_r+0x1c>
 8005066:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800506a:	6023      	str	r3, [r4, #0]
 800506c:	6123      	str	r3, [r4, #16]
 800506e:	2301      	movs	r3, #1
 8005070:	6163      	str	r3, [r4, #20]
 8005072:	b003      	add	sp, #12
 8005074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005076:	466a      	mov	r2, sp
 8005078:	ab01      	add	r3, sp, #4
 800507a:	f7ff ffc9 	bl	8005010 <__swhatbuf_r>
 800507e:	9f00      	ldr	r7, [sp, #0]
 8005080:	4605      	mov	r5, r0
 8005082:	4639      	mov	r1, r7
 8005084:	4630      	mov	r0, r6
 8005086:	f7ff fbbd 	bl	8004804 <_malloc_r>
 800508a:	b948      	cbnz	r0, 80050a0 <__smakebuf_r+0x46>
 800508c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005090:	059a      	lsls	r2, r3, #22
 8005092:	d4ee      	bmi.n	8005072 <__smakebuf_r+0x18>
 8005094:	f023 0303 	bic.w	r3, r3, #3
 8005098:	f043 0302 	orr.w	r3, r3, #2
 800509c:	81a3      	strh	r3, [r4, #12]
 800509e:	e7e2      	b.n	8005066 <__smakebuf_r+0xc>
 80050a0:	89a3      	ldrh	r3, [r4, #12]
 80050a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80050a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050aa:	81a3      	strh	r3, [r4, #12]
 80050ac:	9b01      	ldr	r3, [sp, #4]
 80050ae:	6020      	str	r0, [r4, #0]
 80050b0:	b15b      	cbz	r3, 80050ca <__smakebuf_r+0x70>
 80050b2:	4630      	mov	r0, r6
 80050b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050b8:	f000 f81e 	bl	80050f8 <_isatty_r>
 80050bc:	b128      	cbz	r0, 80050ca <__smakebuf_r+0x70>
 80050be:	89a3      	ldrh	r3, [r4, #12]
 80050c0:	f023 0303 	bic.w	r3, r3, #3
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	81a3      	strh	r3, [r4, #12]
 80050ca:	89a3      	ldrh	r3, [r4, #12]
 80050cc:	431d      	orrs	r5, r3
 80050ce:	81a5      	strh	r5, [r4, #12]
 80050d0:	e7cf      	b.n	8005072 <__smakebuf_r+0x18>
	...

080050d4 <_fstat_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	2300      	movs	r3, #0
 80050d8:	4d06      	ldr	r5, [pc, #24]	@ (80050f4 <_fstat_r+0x20>)
 80050da:	4604      	mov	r4, r0
 80050dc:	4608      	mov	r0, r1
 80050de:	4611      	mov	r1, r2
 80050e0:	602b      	str	r3, [r5, #0]
 80050e2:	f7fb fb95 	bl	8000810 <_fstat>
 80050e6:	1c43      	adds	r3, r0, #1
 80050e8:	d102      	bne.n	80050f0 <_fstat_r+0x1c>
 80050ea:	682b      	ldr	r3, [r5, #0]
 80050ec:	b103      	cbz	r3, 80050f0 <_fstat_r+0x1c>
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	bd38      	pop	{r3, r4, r5, pc}
 80050f2:	bf00      	nop
 80050f4:	200012f0 	.word	0x200012f0

080050f8 <_isatty_r>:
 80050f8:	b538      	push	{r3, r4, r5, lr}
 80050fa:	2300      	movs	r3, #0
 80050fc:	4d05      	ldr	r5, [pc, #20]	@ (8005114 <_isatty_r+0x1c>)
 80050fe:	4604      	mov	r4, r0
 8005100:	4608      	mov	r0, r1
 8005102:	602b      	str	r3, [r5, #0]
 8005104:	f7fb fb93 	bl	800082e <_isatty>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d102      	bne.n	8005112 <_isatty_r+0x1a>
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	b103      	cbz	r3, 8005112 <_isatty_r+0x1a>
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	bd38      	pop	{r3, r4, r5, pc}
 8005114:	200012f0 	.word	0x200012f0

08005118 <_sbrk_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	2300      	movs	r3, #0
 800511c:	4d05      	ldr	r5, [pc, #20]	@ (8005134 <_sbrk_r+0x1c>)
 800511e:	4604      	mov	r4, r0
 8005120:	4608      	mov	r0, r1
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	f7fb fb9a 	bl	800085c <_sbrk>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_sbrk_r+0x1a>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	b103      	cbz	r3, 8005132 <_sbrk_r+0x1a>
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	200012f0 	.word	0x200012f0

08005138 <memchr>:
 8005138:	4603      	mov	r3, r0
 800513a:	b510      	push	{r4, lr}
 800513c:	b2c9      	uxtb	r1, r1
 800513e:	4402      	add	r2, r0
 8005140:	4293      	cmp	r3, r2
 8005142:	4618      	mov	r0, r3
 8005144:	d101      	bne.n	800514a <memchr+0x12>
 8005146:	2000      	movs	r0, #0
 8005148:	e003      	b.n	8005152 <memchr+0x1a>
 800514a:	7804      	ldrb	r4, [r0, #0]
 800514c:	3301      	adds	r3, #1
 800514e:	428c      	cmp	r4, r1
 8005150:	d1f6      	bne.n	8005140 <memchr+0x8>
 8005152:	bd10      	pop	{r4, pc}

08005154 <_init>:
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	bf00      	nop
 8005158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515a:	bc08      	pop	{r3}
 800515c:	469e      	mov	lr, r3
 800515e:	4770      	bx	lr

08005160 <_fini>:
 8005160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005162:	bf00      	nop
 8005164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005166:	bc08      	pop	{r3}
 8005168:	469e      	mov	lr, r3
 800516a:	4770      	bx	lr
