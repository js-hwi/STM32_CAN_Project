
KostaCanProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005310  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000039f4  08005420  08005420  00006420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e14  08008e14  0000a068  2**0
                  CONTENTS
  4 .ARM          00000000  08008e14  08008e14  0000a068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e14  08008e14  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e14  08008e14  00009e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e18  08008e18  00009e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008e1c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000150c  20000068  08008e84  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001574  08008e84  0000a574  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145cd  00000000  00000000  0000a091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003750  00000000  00000000  0001e65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  00021db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f77  00000000  00000000  000231b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a59d  00000000  00000000  00024127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017fbf  00000000  00000000  0003e6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095a22  00000000  00000000  00056683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec0a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000557c  00000000  00000000  000ec0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f1664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08005408 	.word	0x08005408

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08005408 	.word	0x08005408

08000150 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000154:	4b17      	ldr	r3, [pc, #92]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000156:	4a18      	ldr	r2, [pc, #96]	@ (80001b8 <MX_CAN_Init+0x68>)
 8000158:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800015a:	4b16      	ldr	r3, [pc, #88]	@ (80001b4 <MX_CAN_Init+0x64>)
 800015c:	2209      	movs	r2, #9
 800015e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000160:	4b14      	ldr	r3, [pc, #80]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000162:	2200      	movs	r2, #0
 8000164:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000166:	4b13      	ldr	r3, [pc, #76]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000168:	2200      	movs	r2, #0
 800016a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 800016c:	4b11      	ldr	r3, [pc, #68]	@ (80001b4 <MX_CAN_Init+0x64>)
 800016e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000172:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000174:	4b0f      	ldr	r3, [pc, #60]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000176:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800017a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800017c:	4b0d      	ldr	r3, [pc, #52]	@ (80001b4 <MX_CAN_Init+0x64>)
 800017e:	2200      	movs	r2, #0
 8000180:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000182:	4b0c      	ldr	r3, [pc, #48]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000184:	2200      	movs	r2, #0
 8000186:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000188:	4b0a      	ldr	r3, [pc, #40]	@ (80001b4 <MX_CAN_Init+0x64>)
 800018a:	2200      	movs	r2, #0
 800018c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018e:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000190:	2200      	movs	r2, #0
 8000192:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000194:	4b07      	ldr	r3, [pc, #28]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000196:	2200      	movs	r2, #0
 8000198:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800019a:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <MX_CAN_Init+0x64>)
 800019c:	2200      	movs	r2, #0
 800019e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <MX_CAN_Init+0x64>)
 80001a2:	f001 fa59 	bl	8001658 <HAL_CAN_Init>
 80001a6:	4603      	mov	r3, r0
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d001      	beq.n	80001b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001ac:	f000 fd8a 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000084 	.word	0x20000084
 80001b8:	40006400 	.word	0x40006400

080001bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	f107 0310 	add.w	r3, r7, #16
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a20      	ldr	r2, [pc, #128]	@ (8000258 <HAL_CAN_MspInit+0x9c>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	d139      	bne.n	8000250 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001dc:	4b1f      	ldr	r3, [pc, #124]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001de:	69db      	ldr	r3, [r3, #28]
 80001e0:	4a1e      	ldr	r2, [pc, #120]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001e6:	61d3      	str	r3, [r2, #28]
 80001e8:	4b1c      	ldr	r3, [pc, #112]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001ea:	69db      	ldr	r3, [r3, #28]
 80001ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f4:	4b19      	ldr	r3, [pc, #100]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a18      	ldr	r2, [pc, #96]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 80001fa:	f043 0304 	orr.w	r3, r3, #4
 80001fe:	6193      	str	r3, [r2, #24]
 8000200:	4b16      	ldr	r3, [pc, #88]	@ (800025c <HAL_CAN_MspInit+0xa0>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	f003 0304 	and.w	r3, r3, #4
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800020c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000210:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	f107 0310 	add.w	r3, r7, #16
 800021e:	4619      	mov	r1, r3
 8000220:	480f      	ldr	r0, [pc, #60]	@ (8000260 <HAL_CAN_MspInit+0xa4>)
 8000222:	f002 f939 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800022a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800022c:	2302      	movs	r3, #2
 800022e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000230:	2303      	movs	r3, #3
 8000232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000234:	f107 0310 	add.w	r3, r7, #16
 8000238:	4619      	mov	r1, r3
 800023a:	4809      	ldr	r0, [pc, #36]	@ (8000260 <HAL_CAN_MspInit+0xa4>)
 800023c:	f002 f92c 	bl	8002498 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000240:	2200      	movs	r2, #0
 8000242:	2105      	movs	r1, #5
 8000244:	2014      	movs	r0, #20
 8000246:	f002 f8fc 	bl	8002442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800024a:	2014      	movs	r0, #20
 800024c:	f002 f915 	bl	800247a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000250:	bf00      	nop
 8000252:	3720      	adds	r7, #32
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40006400 	.word	0x40006400
 800025c:	40021000 	.word	0x40021000
 8000260:	40010800 	.word	0x40010800

08000264 <FND_INIT>:
#include "stm32f103xb.h"

uint8_t _LED_0F[29];
uint32_t n = 0; //hwi

void FND_INIT(){
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
		_LED_0F[0] = 0xC0; //0
 8000268:	4b2d      	ldr	r3, [pc, #180]	@ (8000320 <FND_INIT+0xbc>)
 800026a:	22c0      	movs	r2, #192	@ 0xc0
 800026c:	701a      	strb	r2, [r3, #0]
		_LED_0F[1] = 0xF9; //1
 800026e:	4b2c      	ldr	r3, [pc, #176]	@ (8000320 <FND_INIT+0xbc>)
 8000270:	22f9      	movs	r2, #249	@ 0xf9
 8000272:	705a      	strb	r2, [r3, #1]
		_LED_0F[2] = 0xA4; //2
 8000274:	4b2a      	ldr	r3, [pc, #168]	@ (8000320 <FND_INIT+0xbc>)
 8000276:	22a4      	movs	r2, #164	@ 0xa4
 8000278:	709a      	strb	r2, [r3, #2]
		_LED_0F[3] = 0xB0; //3
 800027a:	4b29      	ldr	r3, [pc, #164]	@ (8000320 <FND_INIT+0xbc>)
 800027c:	22b0      	movs	r2, #176	@ 0xb0
 800027e:	70da      	strb	r2, [r3, #3]
		_LED_0F[4] = 0x99; //4
 8000280:	4b27      	ldr	r3, [pc, #156]	@ (8000320 <FND_INIT+0xbc>)
 8000282:	2299      	movs	r2, #153	@ 0x99
 8000284:	711a      	strb	r2, [r3, #4]
		_LED_0F[5] = 0x92; //5
 8000286:	4b26      	ldr	r3, [pc, #152]	@ (8000320 <FND_INIT+0xbc>)
 8000288:	2292      	movs	r2, #146	@ 0x92
 800028a:	715a      	strb	r2, [r3, #5]
		_LED_0F[6] = 0x82; //6
 800028c:	4b24      	ldr	r3, [pc, #144]	@ (8000320 <FND_INIT+0xbc>)
 800028e:	2282      	movs	r2, #130	@ 0x82
 8000290:	719a      	strb	r2, [r3, #6]
		_LED_0F[7] = 0xF8; //7
 8000292:	4b23      	ldr	r3, [pc, #140]	@ (8000320 <FND_INIT+0xbc>)
 8000294:	22f8      	movs	r2, #248	@ 0xf8
 8000296:	71da      	strb	r2, [r3, #7]
		_LED_0F[8] = 0x80; //8
 8000298:	4b21      	ldr	r3, [pc, #132]	@ (8000320 <FND_INIT+0xbc>)
 800029a:	2280      	movs	r2, #128	@ 0x80
 800029c:	721a      	strb	r2, [r3, #8]
		_LED_0F[9] = 0x90; //9
 800029e:	4b20      	ldr	r3, [pc, #128]	@ (8000320 <FND_INIT+0xbc>)
 80002a0:	2290      	movs	r2, #144	@ 0x90
 80002a2:	725a      	strb	r2, [r3, #9]
		_LED_0F[10] = 0x88; //A
 80002a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000320 <FND_INIT+0xbc>)
 80002a6:	2288      	movs	r2, #136	@ 0x88
 80002a8:	729a      	strb	r2, [r3, #10]
		_LED_0F[11] = 0x83; //b
 80002aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000320 <FND_INIT+0xbc>)
 80002ac:	2283      	movs	r2, #131	@ 0x83
 80002ae:	72da      	strb	r2, [r3, #11]
		_LED_0F[12] = 0xC6; //C
 80002b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000320 <FND_INIT+0xbc>)
 80002b2:	22c6      	movs	r2, #198	@ 0xc6
 80002b4:	731a      	strb	r2, [r3, #12]
		_LED_0F[13] = 0xA1; //d
 80002b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000320 <FND_INIT+0xbc>)
 80002b8:	22a1      	movs	r2, #161	@ 0xa1
 80002ba:	735a      	strb	r2, [r3, #13]
		_LED_0F[14] = 0x86; //E
 80002bc:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <FND_INIT+0xbc>)
 80002be:	2286      	movs	r2, #134	@ 0x86
 80002c0:	739a      	strb	r2, [r3, #14]
		_LED_0F[15] = 0x8E; //F
 80002c2:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <FND_INIT+0xbc>)
 80002c4:	228e      	movs	r2, #142	@ 0x8e
 80002c6:	73da      	strb	r2, [r3, #15]
		_LED_0F[16] = 0xC2; //G
 80002c8:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <FND_INIT+0xbc>)
 80002ca:	22c2      	movs	r2, #194	@ 0xc2
 80002cc:	741a      	strb	r2, [r3, #16]
		_LED_0F[17] = 0x89; //H
 80002ce:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <FND_INIT+0xbc>)
 80002d0:	2289      	movs	r2, #137	@ 0x89
 80002d2:	745a      	strb	r2, [r3, #17]
		_LED_0F[18] = 0xF9; //I
 80002d4:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <FND_INIT+0xbc>)
 80002d6:	22f9      	movs	r2, #249	@ 0xf9
 80002d8:	749a      	strb	r2, [r3, #18]
		_LED_0F[19] = 0xF1; //J
 80002da:	4b11      	ldr	r3, [pc, #68]	@ (8000320 <FND_INIT+0xbc>)
 80002dc:	22f1      	movs	r2, #241	@ 0xf1
 80002de:	74da      	strb	r2, [r3, #19]
		_LED_0F[20] = 0xC3; //L
 80002e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <FND_INIT+0xbc>)
 80002e2:	22c3      	movs	r2, #195	@ 0xc3
 80002e4:	751a      	strb	r2, [r3, #20]
		_LED_0F[21] = 0xA9; //n
 80002e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <FND_INIT+0xbc>)
 80002e8:	22a9      	movs	r2, #169	@ 0xa9
 80002ea:	755a      	strb	r2, [r3, #21]
		_LED_0F[22] = 0xC0; //O
 80002ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <FND_INIT+0xbc>)
 80002ee:	22c0      	movs	r2, #192	@ 0xc0
 80002f0:	759a      	strb	r2, [r3, #22]
		_LED_0F[23] = 0x8C; //P
 80002f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <FND_INIT+0xbc>)
 80002f4:	228c      	movs	r2, #140	@ 0x8c
 80002f6:	75da      	strb	r2, [r3, #23]
		_LED_0F[24] = 0x98; //q
 80002f8:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <FND_INIT+0xbc>)
 80002fa:	2298      	movs	r2, #152	@ 0x98
 80002fc:	761a      	strb	r2, [r3, #24]
		_LED_0F[25] = 0x92; //S
 80002fe:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <FND_INIT+0xbc>)
 8000300:	2292      	movs	r2, #146	@ 0x92
 8000302:	765a      	strb	r2, [r3, #25]
		_LED_0F[26] = 0xC1; //U
 8000304:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <FND_INIT+0xbc>)
 8000306:	22c1      	movs	r2, #193	@ 0xc1
 8000308:	769a      	strb	r2, [r3, #26]
		_LED_0F[27] = 0x91; //Y
 800030a:	4b05      	ldr	r3, [pc, #20]	@ (8000320 <FND_INIT+0xbc>)
 800030c:	2291      	movs	r2, #145	@ 0x91
 800030e:	76da      	strb	r2, [r3, #27]
		_LED_0F[28] = 0xFE; //
 8000310:	4b03      	ldr	r3, [pc, #12]	@ (8000320 <FND_INIT+0xbc>)
 8000312:	22fe      	movs	r2, #254	@ 0xfe
 8000314:	771a      	strb	r2, [r3, #28]
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	200000ac 	.word	0x200000ac

08000324 <send>:


void send(uint8_t x){
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
	for(int i = 8; i >= 1; i--){
 800032e:	2308      	movs	r3, #8
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e022      	b.n	800037a <send+0x56>
		if(x & 0x80){
 8000334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000338:	2b00      	cmp	r3, #0
 800033a:	da06      	bge.n	800034a <send+0x26>
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, HIGH);
 800033c:	2201      	movs	r2, #1
 800033e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000342:	4812      	ldr	r0, [pc, #72]	@ (800038c <send+0x68>)
 8000344:	f002 fa2c 	bl	80027a0 <HAL_GPIO_WritePin>
 8000348:	e005      	b.n	8000356 <send+0x32>
		}
		else{
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, LOW);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000350:	480e      	ldr	r0, [pc, #56]	@ (800038c <send+0x68>)
 8000352:	f002 fa25 	bl	80027a0 <HAL_GPIO_WritePin>
		}
		x<<=1;
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, LOW);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000362:	480a      	ldr	r0, [pc, #40]	@ (800038c <send+0x68>)
 8000364:	f002 fa1c 	bl	80027a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, HIGH);
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800036e:	4807      	ldr	r0, [pc, #28]	@ (800038c <send+0x68>)
 8000370:	f002 fa16 	bl	80027a0 <HAL_GPIO_WritePin>
	for(int i = 8; i >= 1; i--){
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	3b01      	subs	r3, #1
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	2b00      	cmp	r3, #0
 800037e:	dcd9      	bgt.n	8000334 <send+0x10>
	}
}
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40010c00 	.word	0x40010c00

08000390 <send_port>:

void send_port(uint8_t X, uint8_t port)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	460a      	mov	r2, r1
 800039a:	71fb      	strb	r3, [r7, #7]
 800039c:	4613      	mov	r3, r2
 800039e:	71bb      	strb	r3, [r7, #6]
  send(X);
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ffbe 	bl	8000324 <send>
  send(port);
 80003a8:	79bb      	ldrb	r3, [r7, #6]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f7ff ffba 	bl	8000324 <send>
  HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003b6:	4806      	ldr	r0, [pc, #24]	@ (80003d0 <send_port+0x40>)
 80003b8:	f002 f9f2 	bl	80027a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c2:	4803      	ldr	r0, [pc, #12]	@ (80003d0 <send_port+0x40>)
 80003c4:	f002 f9ec 	bl	80027a0 <HAL_GPIO_WritePin>
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40010c00 	.word	0x40010c00

080003d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	60f8      	str	r0, [r7, #12]
 80003dc:	60b9      	str	r1, [r7, #8]
 80003de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	4a06      	ldr	r2, [pc, #24]	@ (80003fc <vApplicationGetIdleTaskMemory+0x28>)
 80003e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	4a05      	ldr	r2, [pc, #20]	@ (8000400 <vApplicationGetIdleTaskMemory+0x2c>)
 80003ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2280      	movs	r2, #128	@ 0x80
 80003f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	20000144 	.word	0x20000144
 8000400:	200001e4 	.word	0x200001e4

08000404 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000404:	b5b0      	push	{r4, r5, r7, lr}
 8000406:	b08e      	sub	sp, #56	@ 0x38
 8000408:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800040a:	4b14      	ldr	r3, [pc, #80]	@ (800045c <MX_FREERTOS_Init+0x58>)
 800040c:	f107 041c 	add.w	r4, r7, #28
 8000410:	461d      	mov	r5, r3
 8000412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000416:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800041a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800041e:	f107 031c 	add.w	r3, r7, #28
 8000422:	2100      	movs	r1, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f003 fd11 	bl	8003e4c <osThreadCreate>
 800042a:	4603      	mov	r3, r0
 800042c:	4a0c      	ldr	r2, [pc, #48]	@ (8000460 <MX_FREERTOS_Init+0x5c>)
 800042e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 256);
 8000430:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <MX_FREERTOS_Init+0x60>)
 8000432:	463c      	mov	r4, r7
 8000434:	461d      	mov	r5, r3
 8000436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800043a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800043e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000442:	463b      	mov	r3, r7
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f003 fd00 	bl	8003e4c <osThreadCreate>
 800044c:	4603      	mov	r3, r0
 800044e:	4a06      	ldr	r2, [pc, #24]	@ (8000468 <MX_FREERTOS_Init+0x64>)
 8000450:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000452:	bf00      	nop
 8000454:	3738      	adds	r7, #56	@ 0x38
 8000456:	46bd      	mov	sp, r7
 8000458:	bdb0      	pop	{r4, r5, r7, pc}
 800045a:	bf00      	nop
 800045c:	0800542c 	.word	0x0800542c
 8000460:	2000013c 	.word	0x2000013c
 8000464:	08005454 	.word	0x08005454
 8000468:	20000140 	.word	0x20000140

0800046c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
		  canfil.FilterBank = 0;
 8000474:	4b9b      	ldr	r3, [pc, #620]	@ (80006e4 <StartDefaultTask+0x278>)
 8000476:	2200      	movs	r2, #0
 8000478:	615a      	str	r2, [r3, #20]
		  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800047a:	4b9a      	ldr	r3, [pc, #616]	@ (80006e4 <StartDefaultTask+0x278>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
		  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000480:	4b98      	ldr	r3, [pc, #608]	@ (80006e4 <StartDefaultTask+0x278>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
		  canfil.FilterIdHigh = 0;
 8000486:	4b97      	ldr	r3, [pc, #604]	@ (80006e4 <StartDefaultTask+0x278>)
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
		  canfil.FilterIdLow = 0;
 800048c:	4b95      	ldr	r3, [pc, #596]	@ (80006e4 <StartDefaultTask+0x278>)
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
		  canfil.FilterMaskIdHigh = 0;
 8000492:	4b94      	ldr	r3, [pc, #592]	@ (80006e4 <StartDefaultTask+0x278>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
		  canfil.FilterMaskIdLow = 0;
 8000498:	4b92      	ldr	r3, [pc, #584]	@ (80006e4 <StartDefaultTask+0x278>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
		  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800049e:	4b91      	ldr	r3, [pc, #580]	@ (80006e4 <StartDefaultTask+0x278>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	61da      	str	r2, [r3, #28]
		  canfil.FilterActivation = ENABLE;
 80004a4:	4b8f      	ldr	r3, [pc, #572]	@ (80006e4 <StartDefaultTask+0x278>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	621a      	str	r2, [r3, #32]
		  canfil.SlaveStartFilterBank = 14;
 80004aa:	4b8e      	ldr	r3, [pc, #568]	@ (80006e4 <StartDefaultTask+0x278>)
 80004ac:	220e      	movs	r2, #14
 80004ae:	625a      	str	r2, [r3, #36]	@ 0x24

		  txHeader.DLC = 8;
 80004b0:	4b8d      	ldr	r3, [pc, #564]	@ (80006e8 <StartDefaultTask+0x27c>)
 80004b2:	2208      	movs	r2, #8
 80004b4:	611a      	str	r2, [r3, #16]
		  txHeader.IDE = CAN_ID_STD;
 80004b6:	4b8c      	ldr	r3, [pc, #560]	@ (80006e8 <StartDefaultTask+0x27c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
		  txHeader.RTR = CAN_RTR_DATA;
 80004bc:	4b8a      	ldr	r3, [pc, #552]	@ (80006e8 <StartDefaultTask+0x27c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	60da      	str	r2, [r3, #12]
		  txHeader.StdId = 0x77;
 80004c2:	4b89      	ldr	r3, [pc, #548]	@ (80006e8 <StartDefaultTask+0x27c>)
 80004c4:	2277      	movs	r2, #119	@ 0x77
 80004c6:	601a      	str	r2, [r3, #0]
		  //txHeader.ExtId = 0x02;
		  txHeader.TransmitGlobalTime = DISABLE;
 80004c8:	4b87      	ldr	r3, [pc, #540]	@ (80006e8 <StartDefaultTask+0x27c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	751a      	strb	r2, [r3, #20]

		  HAL_CAN_ConfigFilter(&hcan,&canfil);
 80004ce:	4985      	ldr	r1, [pc, #532]	@ (80006e4 <StartDefaultTask+0x278>)
 80004d0:	4886      	ldr	r0, [pc, #536]	@ (80006ec <StartDefaultTask+0x280>)
 80004d2:	f001 f9bc 	bl	800184e <HAL_CAN_ConfigFilter>
		  HAL_CAN_Start(&hcan);
 80004d6:	4885      	ldr	r0, [pc, #532]	@ (80006ec <StartDefaultTask+0x280>)
 80004d8:	f001 fa82 	bl	80019e0 <HAL_CAN_Start>
		  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 80004dc:	2102      	movs	r1, #2
 80004de:	4883      	ldr	r0, [pc, #524]	@ (80006ec <StartDefaultTask+0x280>)
 80004e0:	f001 fcb2 	bl	8001e48 <HAL_CAN_ActivateNotification>

		  /* Infinite loop */
		  for(;;)
		  {
			  Velocity = canData[1];
 80004e4:	4b82      	ldr	r3, [pc, #520]	@ (80006f0 <StartDefaultTask+0x284>)
 80004e6:	785a      	ldrb	r2, [r3, #1]
 80004e8:	4b82      	ldr	r3, [pc, #520]	@ (80006f4 <StartDefaultTask+0x288>)
 80004ea:	701a      	strb	r2, [r3, #0]
			  uint8_t tmp = canData[1];
 80004ec:	4b80      	ldr	r3, [pc, #512]	@ (80006f0 <StartDefaultTask+0x284>)
 80004ee:	785b      	ldrb	r3, [r3, #1]
 80004f0:	75fb      	strb	r3, [r7, #23]
			  if (canData[0] >= 0 && canData[0] <10){
 80004f2:	4b7f      	ldr	r3, [pc, #508]	@ (80006f0 <StartDefaultTask+0x284>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b09      	cmp	r3, #9
 80004f8:	d86f      	bhi.n	80005da <StartDefaultTask+0x16e>
				  //for(int i = 0; i<10; i++){
					//  if(canData[i] == i) { send_port(_LED_0F[i], LED_ADDRESS);
				  //}
				  if(canData[0] ==0){send_port(_LED_0F[0], LED_ADDRESS);}
 80004fa:	4b7d      	ldr	r3, [pc, #500]	@ (80006f0 <StartDefaultTask+0x284>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d106      	bne.n	8000510 <StartDefaultTask+0xa4>
 8000502:	4b7d      	ldr	r3, [pc, #500]	@ (80006f8 <StartDefaultTask+0x28c>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2101      	movs	r1, #1
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ff41 	bl	8000390 <send_port>
 800050e:	e061      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==1){send_port(_LED_0F[1], LED_ADDRESS);}
 8000510:	4b77      	ldr	r3, [pc, #476]	@ (80006f0 <StartDefaultTask+0x284>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d106      	bne.n	8000526 <StartDefaultTask+0xba>
 8000518:	4b77      	ldr	r3, [pc, #476]	@ (80006f8 <StartDefaultTask+0x28c>)
 800051a:	785b      	ldrb	r3, [r3, #1]
 800051c:	2101      	movs	r1, #1
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ff36 	bl	8000390 <send_port>
 8000524:	e056      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==2){send_port(_LED_0F[2], LED_ADDRESS);}
 8000526:	4b72      	ldr	r3, [pc, #456]	@ (80006f0 <StartDefaultTask+0x284>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d106      	bne.n	800053c <StartDefaultTask+0xd0>
 800052e:	4b72      	ldr	r3, [pc, #456]	@ (80006f8 <StartDefaultTask+0x28c>)
 8000530:	789b      	ldrb	r3, [r3, #2]
 8000532:	2101      	movs	r1, #1
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff2b 	bl	8000390 <send_port>
 800053a:	e04b      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==3){send_port(_LED_0F[3], LED_ADDRESS);}
 800053c:	4b6c      	ldr	r3, [pc, #432]	@ (80006f0 <StartDefaultTask+0x284>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d106      	bne.n	8000552 <StartDefaultTask+0xe6>
 8000544:	4b6c      	ldr	r3, [pc, #432]	@ (80006f8 <StartDefaultTask+0x28c>)
 8000546:	78db      	ldrb	r3, [r3, #3]
 8000548:	2101      	movs	r1, #1
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff ff20 	bl	8000390 <send_port>
 8000550:	e040      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==4){send_port(_LED_0F[4], LED_ADDRESS);}
 8000552:	4b67      	ldr	r3, [pc, #412]	@ (80006f0 <StartDefaultTask+0x284>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b04      	cmp	r3, #4
 8000558:	d106      	bne.n	8000568 <StartDefaultTask+0xfc>
 800055a:	4b67      	ldr	r3, [pc, #412]	@ (80006f8 <StartDefaultTask+0x28c>)
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	2101      	movs	r1, #1
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff15 	bl	8000390 <send_port>
 8000566:	e035      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==5){send_port(_LED_0F[5], LED_ADDRESS);}
 8000568:	4b61      	ldr	r3, [pc, #388]	@ (80006f0 <StartDefaultTask+0x284>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b05      	cmp	r3, #5
 800056e:	d106      	bne.n	800057e <StartDefaultTask+0x112>
 8000570:	4b61      	ldr	r3, [pc, #388]	@ (80006f8 <StartDefaultTask+0x28c>)
 8000572:	795b      	ldrb	r3, [r3, #5]
 8000574:	2101      	movs	r1, #1
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ff0a 	bl	8000390 <send_port>
 800057c:	e02a      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==6){send_port(_LED_0F[6], LED_ADDRESS);}
 800057e:	4b5c      	ldr	r3, [pc, #368]	@ (80006f0 <StartDefaultTask+0x284>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b06      	cmp	r3, #6
 8000584:	d106      	bne.n	8000594 <StartDefaultTask+0x128>
 8000586:	4b5c      	ldr	r3, [pc, #368]	@ (80006f8 <StartDefaultTask+0x28c>)
 8000588:	799b      	ldrb	r3, [r3, #6]
 800058a:	2101      	movs	r1, #1
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff feff 	bl	8000390 <send_port>
 8000592:	e01f      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==7){send_port(_LED_0F[7], LED_ADDRESS);}
 8000594:	4b56      	ldr	r3, [pc, #344]	@ (80006f0 <StartDefaultTask+0x284>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b07      	cmp	r3, #7
 800059a:	d106      	bne.n	80005aa <StartDefaultTask+0x13e>
 800059c:	4b56      	ldr	r3, [pc, #344]	@ (80006f8 <StartDefaultTask+0x28c>)
 800059e:	79db      	ldrb	r3, [r3, #7]
 80005a0:	2101      	movs	r1, #1
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff fef4 	bl	8000390 <send_port>
 80005a8:	e014      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==8){send_port(_LED_0F[8], LED_ADDRESS);}
 80005aa:	4b51      	ldr	r3, [pc, #324]	@ (80006f0 <StartDefaultTask+0x284>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b08      	cmp	r3, #8
 80005b0:	d106      	bne.n	80005c0 <StartDefaultTask+0x154>
 80005b2:	4b51      	ldr	r3, [pc, #324]	@ (80006f8 <StartDefaultTask+0x28c>)
 80005b4:	7a1b      	ldrb	r3, [r3, #8]
 80005b6:	2101      	movs	r1, #1
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fee9 	bl	8000390 <send_port>
 80005be:	e009      	b.n	80005d4 <StartDefaultTask+0x168>
				  else if(canData[0] ==9){send_port(_LED_0F[9], LED_ADDRESS);}
 80005c0:	4b4b      	ldr	r3, [pc, #300]	@ (80006f0 <StartDefaultTask+0x284>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b09      	cmp	r3, #9
 80005c6:	d105      	bne.n	80005d4 <StartDefaultTask+0x168>
 80005c8:	4b4b      	ldr	r3, [pc, #300]	@ (80006f8 <StartDefaultTask+0x28c>)
 80005ca:	7a5b      	ldrb	r3, [r3, #9]
 80005cc:	2101      	movs	r1, #1
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fede 	bl	8000390 <send_port>
				  tmp = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	75fb      	strb	r3, [r7, #23]
 80005d8:	e0b0      	b.n	800073c <StartDefaultTask+0x2d0>
			  }
			  else if (canData[0] >= 10 && canData[0] <= 20) {
 80005da:	4b45      	ldr	r3, [pc, #276]	@ (80006f0 <StartDefaultTask+0x284>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b09      	cmp	r3, #9
 80005e0:	f240 808c 	bls.w	80006fc <StartDefaultTask+0x290>
 80005e4:	4b42      	ldr	r3, [pc, #264]	@ (80006f0 <StartDefaultTask+0x284>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b14      	cmp	r3, #20
 80005ea:	f200 8087 	bhi.w	80006fc <StartDefaultTask+0x290>
				  if(canData[0] == 10){send_port(_LED_0F[10], LED_ADDRESS);} // 1's digit i cant see. fix it after
 80005ee:	4b40      	ldr	r3, [pc, #256]	@ (80006f0 <StartDefaultTask+0x284>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b0a      	cmp	r3, #10
 80005f4:	d106      	bne.n	8000604 <StartDefaultTask+0x198>
 80005f6:	4b40      	ldr	r3, [pc, #256]	@ (80006f8 <StartDefaultTask+0x28c>)
 80005f8:	7a9b      	ldrb	r3, [r3, #10]
 80005fa:	2101      	movs	r1, #1
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fec7 	bl	8000390 <send_port>
 8000602:	e06c      	b.n	80006de <StartDefaultTask+0x272>
				  else if(canData[0] == 11){send_port(_LED_0F[11], LED_ADDRESS);}
 8000604:	4b3a      	ldr	r3, [pc, #232]	@ (80006f0 <StartDefaultTask+0x284>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b0b      	cmp	r3, #11
 800060a:	d106      	bne.n	800061a <StartDefaultTask+0x1ae>
 800060c:	4b3a      	ldr	r3, [pc, #232]	@ (80006f8 <StartDefaultTask+0x28c>)
 800060e:	7adb      	ldrb	r3, [r3, #11]
 8000610:	2101      	movs	r1, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff febc 	bl	8000390 <send_port>
 8000618:	e061      	b.n	80006de <StartDefaultTask+0x272>
				  else if(canData[0] == 12){send_port(_LED_0F[12], LED_ADDRESS);}
 800061a:	4b35      	ldr	r3, [pc, #212]	@ (80006f0 <StartDefaultTask+0x284>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b0c      	cmp	r3, #12
 8000620:	d106      	bne.n	8000630 <StartDefaultTask+0x1c4>
 8000622:	4b35      	ldr	r3, [pc, #212]	@ (80006f8 <StartDefaultTask+0x28c>)
 8000624:	7b1b      	ldrb	r3, [r3, #12]
 8000626:	2101      	movs	r1, #1
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff feb1 	bl	8000390 <send_port>
 800062e:	e056      	b.n	80006de <StartDefaultTask+0x272>
				  else if(canData[0] == 13){send_port(_LED_0F[13], LED_ADDRESS);}
 8000630:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <StartDefaultTask+0x284>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b0d      	cmp	r3, #13
 8000636:	d106      	bne.n	8000646 <StartDefaultTask+0x1da>
 8000638:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <StartDefaultTask+0x28c>)
 800063a:	7b5b      	ldrb	r3, [r3, #13]
 800063c:	2101      	movs	r1, #1
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fea6 	bl	8000390 <send_port>
 8000644:	e04b      	b.n	80006de <StartDefaultTask+0x272>
				  else if(canData[0] == 14){send_port(_LED_0F[14], LED_ADDRESS);}
 8000646:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <StartDefaultTask+0x284>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b0e      	cmp	r3, #14
 800064c:	d106      	bne.n	800065c <StartDefaultTask+0x1f0>
 800064e:	4b2a      	ldr	r3, [pc, #168]	@ (80006f8 <StartDefaultTask+0x28c>)
 8000650:	7b9b      	ldrb	r3, [r3, #14]
 8000652:	2101      	movs	r1, #1
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fe9b 	bl	8000390 <send_port>
 800065a:	e040      	b.n	80006de <StartDefaultTask+0x272>
				  else if(canData[0] == 15){send_port(_LED_0F[15], LED_ADDRESS);}
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <StartDefaultTask+0x284>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d106      	bne.n	8000672 <StartDefaultTask+0x206>
 8000664:	4b24      	ldr	r3, [pc, #144]	@ (80006f8 <StartDefaultTask+0x28c>)
 8000666:	7bdb      	ldrb	r3, [r3, #15]
 8000668:	2101      	movs	r1, #1
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fe90 	bl	8000390 <send_port>
 8000670:	e035      	b.n	80006de <StartDefaultTask+0x272>
				  else if(canData[0] == 16){send_port(_LED_0F[16], LED_ADDRESS);}
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <StartDefaultTask+0x284>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b10      	cmp	r3, #16
 8000678:	d106      	bne.n	8000688 <StartDefaultTask+0x21c>
 800067a:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <StartDefaultTask+0x28c>)
 800067c:	7c1b      	ldrb	r3, [r3, #16]
 800067e:	2101      	movs	r1, #1
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff fe85 	bl	8000390 <send_port>
 8000686:	e02a      	b.n	80006de <StartDefaultTask+0x272>
				  else if(canData[0] == 17){send_port(_LED_0F[17], LED_ADDRESS);}
 8000688:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <StartDefaultTask+0x284>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b11      	cmp	r3, #17
 800068e:	d106      	bne.n	800069e <StartDefaultTask+0x232>
 8000690:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <StartDefaultTask+0x28c>)
 8000692:	7c5b      	ldrb	r3, [r3, #17]
 8000694:	2101      	movs	r1, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fe7a 	bl	8000390 <send_port>
 800069c:	e01f      	b.n	80006de <StartDefaultTask+0x272>
				  else if(canData[0] == 18){send_port(_LED_0F[18], LED_ADDRESS);}
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <StartDefaultTask+0x284>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b12      	cmp	r3, #18
 80006a4:	d106      	bne.n	80006b4 <StartDefaultTask+0x248>
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <StartDefaultTask+0x28c>)
 80006a8:	7c9b      	ldrb	r3, [r3, #18]
 80006aa:	2101      	movs	r1, #1
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fe6f 	bl	8000390 <send_port>
 80006b2:	e014      	b.n	80006de <StartDefaultTask+0x272>
				  else if(canData[0] == 19){send_port(_LED_0F[19], LED_ADDRESS);}
 80006b4:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <StartDefaultTask+0x284>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b13      	cmp	r3, #19
 80006ba:	d106      	bne.n	80006ca <StartDefaultTask+0x25e>
 80006bc:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <StartDefaultTask+0x28c>)
 80006be:	7cdb      	ldrb	r3, [r3, #19]
 80006c0:	2101      	movs	r1, #1
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff fe64 	bl	8000390 <send_port>
 80006c8:	e009      	b.n	80006de <StartDefaultTask+0x272>
				  else if(canData[0] == 20){send_port(_LED_0F[20], LED_ADDRESS);}
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <StartDefaultTask+0x284>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b14      	cmp	r3, #20
 80006d0:	d105      	bne.n	80006de <StartDefaultTask+0x272>
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <StartDefaultTask+0x28c>)
 80006d4:	7d1b      	ldrb	r3, [r3, #20]
 80006d6:	2101      	movs	r1, #1
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fe59 	bl	8000390 <send_port>
				  tmp = 10;
 80006de:	230a      	movs	r3, #10
 80006e0:	75fb      	strb	r3, [r7, #23]
 80006e2:	e02b      	b.n	800073c <StartDefaultTask+0x2d0>
 80006e4:	20000110 	.word	0x20000110
 80006e8:	200000e8 	.word	0x200000e8
 80006ec:	20000084 	.word	0x20000084
 80006f0:	20000100 	.word	0x20000100
 80006f4:	200000c9 	.word	0x200000c9
 80006f8:	200000ac 	.word	0x200000ac
			  }
			  else if (canData[0] > 20 && canData[0] <= 30) tmp= 15;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <StartDefaultTask+0x310>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b14      	cmp	r3, #20
 8000702:	d906      	bls.n	8000712 <StartDefaultTask+0x2a6>
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <StartDefaultTask+0x310>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b1e      	cmp	r3, #30
 800070a:	d802      	bhi.n	8000712 <StartDefaultTask+0x2a6>
 800070c:	230f      	movs	r3, #15
 800070e:	75fb      	strb	r3, [r7, #23]
 8000710:	e014      	b.n	800073c <StartDefaultTask+0x2d0>
			  else if (canData[0] > 30 && canData[0] <= 40) tmp = 20;
 8000712:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <StartDefaultTask+0x310>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b1e      	cmp	r3, #30
 8000718:	d906      	bls.n	8000728 <StartDefaultTask+0x2bc>
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <StartDefaultTask+0x310>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b28      	cmp	r3, #40	@ 0x28
 8000720:	d802      	bhi.n	8000728 <StartDefaultTask+0x2bc>
 8000722:	2314      	movs	r3, #20
 8000724:	75fb      	strb	r3, [r7, #23]
 8000726:	e009      	b.n	800073c <StartDefaultTask+0x2d0>
			  else if (canData[0] > 40 && canData[0] <= 50) tmp = 25;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <StartDefaultTask+0x310>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b28      	cmp	r3, #40	@ 0x28
 800072e:	d922      	bls.n	8000776 <StartDefaultTask+0x30a>
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <StartDefaultTask+0x310>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b32      	cmp	r3, #50	@ 0x32
 8000736:	d81e      	bhi.n	8000776 <StartDefaultTask+0x30a>
 8000738:	2319      	movs	r3, #25
 800073a:	75fb      	strb	r3, [r7, #23]
			  else{
				  continue;
			  }

			  uint8_t csend[] = {canData[0], tmp, 0, 0, 0, 0 , 0 , 0};
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <StartDefaultTask+0x310>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	733b      	strb	r3, [r7, #12]
 8000742:	7dfb      	ldrb	r3, [r7, #23]
 8000744:	737b      	strb	r3, [r7, #13]
 8000746:	2300      	movs	r3, #0
 8000748:	73bb      	strb	r3, [r7, #14]
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	2300      	movs	r3, #0
 8000750:	743b      	strb	r3, [r7, #16]
 8000752:	2300      	movs	r3, #0
 8000754:	747b      	strb	r3, [r7, #17]
 8000756:	2300      	movs	r3, #0
 8000758:	74bb      	strb	r3, [r7, #18]
 800075a:	2300      	movs	r3, #0
 800075c:	74fb      	strb	r3, [r7, #19]
			  HAL_CAN_AddTxMessage(&hcan,&txHeader,csend,&canMailbox);
 800075e:	f107 020c 	add.w	r2, r7, #12
 8000762:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <StartDefaultTask+0x314>)
 8000764:	4907      	ldr	r1, [pc, #28]	@ (8000784 <StartDefaultTask+0x318>)
 8000766:	4808      	ldr	r0, [pc, #32]	@ (8000788 <StartDefaultTask+0x31c>)
 8000768:	f001 f97e 	bl	8001a68 <HAL_CAN_AddTxMessage>

			  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

			  osDelay(1000);
 800076c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000770:	f003 fbb8 	bl	8003ee4 <osDelay>
 8000774:	e6b6      	b.n	80004e4 <StartDefaultTask+0x78>
				  continue;
 8000776:	bf00      	nop
		  {
 8000778:	e6b4      	b.n	80004e4 <StartDefaultTask+0x78>
 800077a:	bf00      	nop
 800077c:	20000100 	.word	0x20000100
 8000780:	20000138 	.word	0x20000138
 8000784:	200000e8 	.word	0x200000e8
 8000788:	20000084 	.word	0x20000084

0800078c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af02      	add	r7, sp, #8
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	//functionIdle();
    SSD1306_GotoXY (0,0);
 8000794:	2100      	movs	r1, #0
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fcb2 	bl	8001100 <SSD1306_GotoXY>
    SSD1306_Puts ("HELLO", &Font_11x18, 1);
 800079c:	2201      	movs	r2, #1
 800079e:	497c      	ldr	r1, [pc, #496]	@ (8000990 <StartTask02+0x204>)
 80007a0:	487c      	ldr	r0, [pc, #496]	@ (8000994 <StartTask02+0x208>)
 80007a2:	f000 fd41 	bl	8001228 <SSD1306_Puts>
    SSD1306_GotoXY (10, 30);
 80007a6:	211e      	movs	r1, #30
 80007a8:	200a      	movs	r0, #10
 80007aa:	f000 fca9 	bl	8001100 <SSD1306_GotoXY>
    SSD1306_Puts ("  WORLD :)", &Font_11x18, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	4977      	ldr	r1, [pc, #476]	@ (8000990 <StartTask02+0x204>)
 80007b2:	4879      	ldr	r0, [pc, #484]	@ (8000998 <StartTask02+0x20c>)
 80007b4:	f000 fd38 	bl	8001228 <SSD1306_Puts>
    SSD1306_UpdateScreen(); //display
 80007b8:	f000 fbfe 	bl	8000fb8 <SSD1306_UpdateScreen>

    HAL_Delay (2000);
 80007bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007c0:	f000 ff26 	bl	8001610 <HAL_Delay>


    SSD1306_ScrollRight(0,7);  // scroll entire screen
 80007c4:	2107      	movs	r1, #7
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 fa82 	bl	8000cd0 <SSD1306_ScrollRight>
    HAL_Delay(2000);  // 2 sec
 80007cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007d0:	f000 ff1e 	bl	8001610 <HAL_Delay>

    SSD1306_ScrollLeft(0,7);  // scroll entire screen
 80007d4:	2107      	movs	r1, #7
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 fab0 	bl	8000d3c <SSD1306_ScrollLeft>
    HAL_Delay(2000);  // 2 sec
 80007dc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007e0:	f000 ff16 	bl	8001610 <HAL_Delay>

    SSD1306_Stopscroll();
 80007e4:	f000 fb60 	bl	8000ea8 <SSD1306_Stopscroll>
    SSD1306_Clear();
 80007e8:	f000 fd43 	bl	8001272 <SSD1306_Clear>

    SSD1306_DrawBitmap(0,0,logo, 128, 64, 1);
 80007ec:	2301      	movs	r3, #1
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	2340      	movs	r3, #64	@ 0x40
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2380      	movs	r3, #128	@ 0x80
 80007f6:	4a69      	ldr	r2, [pc, #420]	@ (800099c <StartTask02+0x210>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 fb73 	bl	8000ee6 <SSD1306_DrawBitmap>
    SSD1306_UpdateScreen();
 8000800:	f000 fbda 	bl	8000fb8 <SSD1306_UpdateScreen>

    HAL_Delay(2000);
 8000804:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000808:	f000 ff02 	bl	8001610 <HAL_Delay>

    SSD1306_ScrollRight(0x00, 0x0f);    // scroll entire screen right
 800080c:	210f      	movs	r1, #15
 800080e:	2000      	movs	r0, #0
 8000810:	f000 fa5e 	bl	8000cd0 <SSD1306_ScrollRight>

    HAL_Delay (2000);
 8000814:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000818:	f000 fefa 	bl	8001610 <HAL_Delay>

    SSD1306_ScrollLeft(0x00, 0x0f);  // scroll entire screen left
 800081c:	210f      	movs	r1, #15
 800081e:	2000      	movs	r0, #0
 8000820:	f000 fa8c 	bl	8000d3c <SSD1306_ScrollLeft>

    HAL_Delay (2000);
 8000824:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000828:	f000 fef2 	bl	8001610 <HAL_Delay>

    SSD1306_Scrolldiagright(0x00, 0x0f);  // scroll entire screen diagonal right
 800082c:	210f      	movs	r1, #15
 800082e:	2000      	movs	r0, #0
 8000830:	f000 faba 	bl	8000da8 <SSD1306_Scrolldiagright>

    HAL_Delay (2000);
 8000834:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000838:	f000 feea 	bl	8001610 <HAL_Delay>

    SSD1306_Scrolldiagleft(0x00, 0x0f);  // scroll entire screen diagonal left
 800083c:	210f      	movs	r1, #15
 800083e:	2000      	movs	r0, #0
 8000840:	f000 faf2 	bl	8000e28 <SSD1306_Scrolldiagleft>

    HAL_Delay (2000);
 8000844:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000848:	f000 fee2 	bl	8001610 <HAL_Delay>

    SSD1306_Stopscroll();   // stop scrolling. If not done, screen will keep on scrolling
 800084c:	f000 fb2c 	bl	8000ea8 <SSD1306_Stopscroll>


    SSD1306_InvertDisplay(1);   // invert the display
 8000850:	2001      	movs	r0, #1
 8000852:	f000 fb32 	bl	8000eba <SSD1306_InvertDisplay>

    HAL_Delay(2000);
 8000856:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800085a:	f000 fed9 	bl	8001610 <HAL_Delay>

    SSD1306_InvertDisplay(0);  // normalize the display
 800085e:	2000      	movs	r0, #0
 8000860:	f000 fb2b 	bl	8000eba <SSD1306_InvertDisplay>
//

    HAL_Delay(2000);
 8000864:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000868:	f000 fed2 	bl	8001610 <HAL_Delay>
  /* Infinite loop */
  for(;;)
  {

	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  SSD1306_Clear();
 800086c:	f000 fd01 	bl	8001272 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse1,128,64,1);
 8000870:	2301      	movs	r3, #1
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	2340      	movs	r3, #64	@ 0x40
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2380      	movs	r3, #128	@ 0x80
 800087a:	4a49      	ldr	r2, [pc, #292]	@ (80009a0 <StartTask02+0x214>)
 800087c:	2100      	movs	r1, #0
 800087e:	2000      	movs	r0, #0
 8000880:	f000 fb31 	bl	8000ee6 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000884:	f000 fb98 	bl	8000fb8 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 8000888:	f000 fcf3 	bl	8001272 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse2,128,64,1);
 800088c:	2301      	movs	r3, #1
 800088e:	9301      	str	r3, [sp, #4]
 8000890:	2340      	movs	r3, #64	@ 0x40
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2380      	movs	r3, #128	@ 0x80
 8000896:	4a43      	ldr	r2, [pc, #268]	@ (80009a4 <StartTask02+0x218>)
 8000898:	2100      	movs	r1, #0
 800089a:	2000      	movs	r0, #0
 800089c:	f000 fb23 	bl	8000ee6 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80008a0:	f000 fb8a 	bl	8000fb8 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 80008a4:	f000 fce5 	bl	8001272 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse3,128,64,1);
 80008a8:	2301      	movs	r3, #1
 80008aa:	9301      	str	r3, [sp, #4]
 80008ac:	2340      	movs	r3, #64	@ 0x40
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2380      	movs	r3, #128	@ 0x80
 80008b2:	4a3d      	ldr	r2, [pc, #244]	@ (80009a8 <StartTask02+0x21c>)
 80008b4:	2100      	movs	r1, #0
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 fb15 	bl	8000ee6 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80008bc:	f000 fb7c 	bl	8000fb8 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 80008c0:	f000 fcd7 	bl	8001272 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse4,128,64,1);
 80008c4:	2301      	movs	r3, #1
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	2340      	movs	r3, #64	@ 0x40
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	4a37      	ldr	r2, [pc, #220]	@ (80009ac <StartTask02+0x220>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 fb07 	bl	8000ee6 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80008d8:	f000 fb6e 	bl	8000fb8 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 80008dc:	f000 fcc9 	bl	8001272 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse5,128,64,1);
 80008e0:	2301      	movs	r3, #1
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	2340      	movs	r3, #64	@ 0x40
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2380      	movs	r3, #128	@ 0x80
 80008ea:	4a31      	ldr	r2, [pc, #196]	@ (80009b0 <StartTask02+0x224>)
 80008ec:	2100      	movs	r1, #0
 80008ee:	2000      	movs	r0, #0
 80008f0:	f000 faf9 	bl	8000ee6 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80008f4:	f000 fb60 	bl	8000fb8 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 80008f8:	f000 fcbb 	bl	8001272 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse6,128,64,1);
 80008fc:	2301      	movs	r3, #1
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	2340      	movs	r3, #64	@ 0x40
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	2380      	movs	r3, #128	@ 0x80
 8000906:	4a2b      	ldr	r2, [pc, #172]	@ (80009b4 <StartTask02+0x228>)
 8000908:	2100      	movs	r1, #0
 800090a:	2000      	movs	r0, #0
 800090c:	f000 faeb 	bl	8000ee6 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000910:	f000 fb52 	bl	8000fb8 <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 8000914:	f000 fcad 	bl	8001272 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse7,128,64,1);
 8000918:	2301      	movs	r3, #1
 800091a:	9301      	str	r3, [sp, #4]
 800091c:	2340      	movs	r3, #64	@ 0x40
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2380      	movs	r3, #128	@ 0x80
 8000922:	4a25      	ldr	r2, [pc, #148]	@ (80009b8 <StartTask02+0x22c>)
 8000924:	2100      	movs	r1, #0
 8000926:	2000      	movs	r0, #0
 8000928:	f000 fadd 	bl	8000ee6 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800092c:	f000 fb44 	bl	8000fb8 <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 8000930:	f000 fc9f 	bl	8001272 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse8,128,64,1);
 8000934:	2301      	movs	r3, #1
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	2340      	movs	r3, #64	@ 0x40
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2380      	movs	r3, #128	@ 0x80
 800093e:	4a1f      	ldr	r2, [pc, #124]	@ (80009bc <StartTask02+0x230>)
 8000940:	2100      	movs	r1, #0
 8000942:	2000      	movs	r0, #0
 8000944:	f000 facf 	bl	8000ee6 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000948:	f000 fb36 	bl	8000fb8 <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 800094c:	f000 fc91 	bl	8001272 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse9,128,64,1);
 8000950:	2301      	movs	r3, #1
 8000952:	9301      	str	r3, [sp, #4]
 8000954:	2340      	movs	r3, #64	@ 0x40
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2380      	movs	r3, #128	@ 0x80
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <StartTask02+0x234>)
 800095c:	2100      	movs	r1, #0
 800095e:	2000      	movs	r0, #0
 8000960:	f000 fac1 	bl	8000ee6 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000964:	f000 fb28 	bl	8000fb8 <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 8000968:	f000 fc83 	bl	8001272 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse10,128,64,1);
 800096c:	2301      	movs	r3, #1
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	2340      	movs	r3, #64	@ 0x40
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2380      	movs	r3, #128	@ 0x80
 8000976:	4a13      	ldr	r2, [pc, #76]	@ (80009c4 <StartTask02+0x238>)
 8000978:	2100      	movs	r1, #0
 800097a:	2000      	movs	r0, #0
 800097c:	f000 fab3 	bl	8000ee6 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8000980:	f000 fb1a 	bl	8000fb8 <SSD1306_UpdateScreen>
	  osDelay(1000);
 8000984:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000988:	f003 faac 	bl	8003ee4 <osDelay>
	  SSD1306_Clear();
 800098c:	bf00      	nop
 800098e:	e76d      	b.n	800086c <StartTask02+0xe0>
 8000990:	20000000 	.word	0x20000000
 8000994:	08005470 	.word	0x08005470
 8000998:	08005478 	.word	0x08005478
 800099c:	080061e8 	.word	0x080061e8
 80009a0:	080065e8 	.word	0x080065e8
 80009a4:	080069e8 	.word	0x080069e8
 80009a8:	08006de8 	.word	0x08006de8
 80009ac:	080071e8 	.word	0x080071e8
 80009b0:	080075e8 	.word	0x080075e8
 80009b4:	080079e8 	.word	0x080079e8
 80009b8:	08007de8 	.word	0x08007de8
 80009bc:	080081e8 	.word	0x080081e8
 80009c0:	080085e8 	.word	0x080085e8
 80009c4:	080089e8 	.word	0x080089e8

080009c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 80009d0:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80009d2:	4a11      	ldr	r2, [pc, #68]	@ (8000a18 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f001 f915 	bl	8001c06 <HAL_CAN_GetRxMessage>
	for(int i = 0; i<2; i++){
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	e00b      	b.n	80009fa <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		canData[i] = canRX[i];
 80009e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4413      	add	r3, r2
 80009e8:	7819      	ldrb	r1, [r3, #0]
 80009ea:	4a0c      	ldr	r2, [pc, #48]	@ (8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	460a      	mov	r2, r1
 80009f2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<2; i++){
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3301      	adds	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	ddf0      	ble.n	80009e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a04:	4806      	ldr	r0, [pc, #24]	@ (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000a06:	f001 fee3 	bl	80027d0 <HAL_GPIO_TogglePin>

	//if (rxHeader.StdId == 0x0F6) {
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	//}

}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000108 	.word	0x20000108
 8000a18:	200000cc 	.word	0x200000cc
 8000a1c:	20000100 	.word	0x20000100
 8000a20:	40011000 	.word	0x40011000

08000a24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a38:	4b2e      	ldr	r3, [pc, #184]	@ (8000af4 <MX_GPIO_Init+0xd0>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000af4 <MX_GPIO_Init+0xd0>)
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b2b      	ldr	r3, [pc, #172]	@ (8000af4 <MX_GPIO_Init+0xd0>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0310 	and.w	r3, r3, #16
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a50:	4b28      	ldr	r3, [pc, #160]	@ (8000af4 <MX_GPIO_Init+0xd0>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a27      	ldr	r2, [pc, #156]	@ (8000af4 <MX_GPIO_Init+0xd0>)
 8000a56:	f043 0320 	orr.w	r3, r3, #32
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b25      	ldr	r3, [pc, #148]	@ (8000af4 <MX_GPIO_Init+0xd0>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0320 	and.w	r3, r3, #32
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a68:	4b22      	ldr	r3, [pc, #136]	@ (8000af4 <MX_GPIO_Init+0xd0>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a21      	ldr	r2, [pc, #132]	@ (8000af4 <MX_GPIO_Init+0xd0>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b1f      	ldr	r3, [pc, #124]	@ (8000af4 <MX_GPIO_Init+0xd0>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <MX_GPIO_Init+0xd0>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a1b      	ldr	r2, [pc, #108]	@ (8000af4 <MX_GPIO_Init+0xd0>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <MX_GPIO_Init+0xd0>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a9e:	4816      	ldr	r0, [pc, #88]	@ (8000af8 <MX_GPIO_Init+0xd4>)
 8000aa0:	f001 fe7e 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000aaa:	4814      	ldr	r0, [pc, #80]	@ (8000afc <MX_GPIO_Init+0xd8>)
 8000aac:	f001 fe78 	bl	80027a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <MX_GPIO_Init+0xd4>)
 8000aca:	f001 fce5 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin;
 8000ace:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_GPIO_Init+0xd8>)
 8000ae8:	f001 fcd6 	bl	8002498 <HAL_GPIO_Init>

}
 8000aec:	bf00      	nop
 8000aee:	3720      	adds	r7, #32
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40011000 	.word	0x40011000
 8000afc:	40010c00 	.word	0x40010c00

08000b00 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b06:	4a13      	ldr	r2, [pc, #76]	@ (8000b54 <MX_I2C2_Init+0x54>)
 8000b08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b0c:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <MX_I2C2_Init+0x58>)
 8000b0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b3e:	f001 fe61 	bl	8002804 <HAL_I2C_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b48:	f000 f8bc 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200003e4 	.word	0x200003e4
 8000b54:	40005800 	.word	0x40005800
 8000b58:	000186a0 	.word	0x000186a0

08000b5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a16      	ldr	r2, [pc, #88]	@ (8000bd0 <HAL_I2C_MspInit+0x74>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d124      	bne.n	8000bc6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <HAL_I2C_MspInit+0x78>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <HAL_I2C_MspInit+0x78>)
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <HAL_I2C_MspInit+0x78>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0308 	and.w	r3, r3, #8
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b94:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9a:	2312      	movs	r3, #18
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480b      	ldr	r0, [pc, #44]	@ (8000bd8 <HAL_I2C_MspInit+0x7c>)
 8000baa:	f001 fc75 	bl	8002498 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_I2C_MspInit+0x78>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4a08      	ldr	r2, [pc, #32]	@ (8000bd4 <HAL_I2C_MspInit+0x78>)
 8000bb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bb8:	61d3      	str	r3, [r2, #28]
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_I2C_MspInit+0x78>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3720      	adds	r7, #32
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40005800 	.word	0x40005800
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	send_port(_LED_0F[0], 0b0001);  //4 bit segment initial
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <main+0x34>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2101      	movs	r1, #1
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fbd2 	bl	8000390 <send_port>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bec:	f000 fcde 	bl	80015ac <HAL_Init>

  /* USER CODE BEGIN Init */
  FND_INIT();
 8000bf0:	f7ff fb38 	bl	8000264 <FND_INIT>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf4:	f000 f80e 	bl	8000c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf8:	f7ff ff14 	bl	8000a24 <MX_GPIO_Init>
  MX_CAN_Init();
 8000bfc:	f7ff faa8 	bl	8000150 <MX_CAN_Init>
  MX_I2C2_Init();
 8000c00:	f7ff ff7e 	bl	8000b00 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c04:	f7ff fbfe 	bl	8000404 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c08:	f003 f919 	bl	8003e3e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <main+0x30>
 8000c10:	200000ac 	.word	0x200000ac

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b090      	sub	sp, #64	@ 0x40
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 0318 	add.w	r3, r7, #24
 8000c1e:	2228      	movs	r2, #40	@ 0x28
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f004 fb18 	bl	8005258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c44:	2301      	movs	r3, #1
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c52:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 fa6d 	bl	800313c <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c68:	f000 f82c 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c70:	2302      	movs	r3, #2
 8000c72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2102      	movs	r1, #2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 fcda 	bl	8003640 <HAL_RCC_ClockConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c92:	f000 f817 	bl	8000cc4 <Error_Handler>
  }
}
 8000c96:	bf00      	nop
 8000c98:	3740      	adds	r7, #64	@ 0x40
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a04      	ldr	r2, [pc, #16]	@ (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d101      	bne.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cb2:	f000 fc91 	bl	80015d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40000800 	.word	0x40000800

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <Error_Handler+0x8>

08000cd0 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460a      	mov	r2, r1
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8000ce0:	2226      	movs	r2, #38	@ 0x26
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2078      	movs	r0, #120	@ 0x78
 8000ce6:	f000 fb33 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2078      	movs	r0, #120	@ 0x78
 8000cf0:	f000 fb2e 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2078      	movs	r0, #120	@ 0x78
 8000cfc:	f000 fb28 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2078      	movs	r0, #120	@ 0x78
 8000d06:	f000 fb23 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2078      	movs	r0, #120	@ 0x78
 8000d12:	f000 fb1d 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2078      	movs	r0, #120	@ 0x78
 8000d1c:	f000 fb18 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000d20:	22ff      	movs	r2, #255	@ 0xff
 8000d22:	2100      	movs	r1, #0
 8000d24:	2078      	movs	r0, #120	@ 0x78
 8000d26:	f000 fb13 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000d2a:	222f      	movs	r2, #47	@ 0x2f
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2078      	movs	r0, #120	@ 0x78
 8000d30:	f000 fb0e 	bl	8001350 <ssd1306_I2C_Write>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	460a      	mov	r2, r1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8000d4c:	2227      	movs	r2, #39	@ 0x27
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2078      	movs	r0, #120	@ 0x78
 8000d52:	f000 fafd 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2078      	movs	r0, #120	@ 0x78
 8000d5c:	f000 faf8 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	461a      	mov	r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	2078      	movs	r0, #120	@ 0x78
 8000d68:	f000 faf2 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	2078      	movs	r0, #120	@ 0x78
 8000d72:	f000 faed 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2078      	movs	r0, #120	@ 0x78
 8000d7e:	f000 fae7 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	@ 0x78
 8000d88:	f000 fae2 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000d8c:	22ff      	movs	r2, #255	@ 0xff
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2078      	movs	r0, #120	@ 0x78
 8000d92:	f000 fadd 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000d96:	222f      	movs	r2, #47	@ 0x2f
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2078      	movs	r0, #120	@ 0x78
 8000d9c:	f000 fad8 	bl	8001350 <ssd1306_I2C_Write>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <SSD1306_Scrolldiagright>:


void SSD1306_Scrolldiagright(uint8_t start_row, uint8_t end_row)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	460a      	mov	r2, r1
 8000db2:	71fb      	strb	r3, [r7, #7]
 8000db4:	4613      	mov	r3, r2
 8000db6:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 8000db8:	22a3      	movs	r2, #163	@ 0xa3
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2078      	movs	r0, #120	@ 0x78
 8000dbe:	f000 fac7 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2078      	movs	r0, #120	@ 0x78
 8000dc8:	f000 fac2 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 8000dcc:	2220      	movs	r2, #32
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2078      	movs	r0, #120	@ 0x78
 8000dd2:	f000 fabd 	bl	8001350 <ssd1306_I2C_Write>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
 8000dd6:	2229      	movs	r2, #41	@ 0x29
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2078      	movs	r0, #120	@ 0x78
 8000ddc:	f000 fab8 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	2078      	movs	r0, #120	@ 0x78
 8000de6:	f000 fab3 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	461a      	mov	r2, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	2078      	movs	r0, #120	@ 0x78
 8000df2:	f000 faad 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2078      	movs	r0, #120	@ 0x78
 8000dfc:	f000 faa8 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	461a      	mov	r2, r3
 8000e04:	2100      	movs	r1, #0
 8000e06:	2078      	movs	r0, #120	@ 0x78
 8000e08:	f000 faa2 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2078      	movs	r0, #120	@ 0x78
 8000e12:	f000 fa9d 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 8000e16:	222f      	movs	r2, #47	@ 0x2f
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2078      	movs	r0, #120	@ 0x78
 8000e1c:	f000 fa98 	bl	8001350 <ssd1306_I2C_Write>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <SSD1306_Scrolldiagleft>:


void SSD1306_Scrolldiagleft(uint8_t start_row, uint8_t end_row)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	460a      	mov	r2, r1
 8000e32:	71fb      	strb	r3, [r7, #7]
 8000e34:	4613      	mov	r3, r2
 8000e36:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 8000e38:	22a3      	movs	r2, #163	@ 0xa3
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2078      	movs	r0, #120	@ 0x78
 8000e3e:	f000 fa87 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	2078      	movs	r0, #120	@ 0x78
 8000e48:	f000 fa82 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 8000e4c:	2220      	movs	r2, #32
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2078      	movs	r0, #120	@ 0x78
 8000e52:	f000 fa7d 	bl	8001350 <ssd1306_I2C_Write>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
 8000e56:	222a      	movs	r2, #42	@ 0x2a
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2078      	movs	r0, #120	@ 0x78
 8000e5c:	f000 fa78 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2078      	movs	r0, #120	@ 0x78
 8000e66:	f000 fa73 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2078      	movs	r0, #120	@ 0x78
 8000e72:	f000 fa6d 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2078      	movs	r0, #120	@ 0x78
 8000e7c:	f000 fa68 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	461a      	mov	r2, r3
 8000e84:	2100      	movs	r1, #0
 8000e86:	2078      	movs	r0, #120	@ 0x78
 8000e88:	f000 fa62 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2078      	movs	r0, #120	@ 0x78
 8000e92:	f000 fa5d 	bl	8001350 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 8000e96:	222f      	movs	r2, #47	@ 0x2f
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2078      	movs	r0, #120	@ 0x78
 8000e9c:	f000 fa58 	bl	8001350 <ssd1306_I2C_Write>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <SSD1306_Stopscroll>:


void SSD1306_Stopscroll(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000eac:	222e      	movs	r2, #46	@ 0x2e
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2078      	movs	r0, #120	@ 0x78
 8000eb2:	f000 fa4d 	bl	8001350 <ssd1306_I2C_Write>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <SSD1306_InvertDisplay>:



void SSD1306_InvertDisplay (int i)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d005      	beq.n	8000ed4 <SSD1306_InvertDisplay+0x1a>
 8000ec8:	22a7      	movs	r2, #167	@ 0xa7
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2078      	movs	r0, #120	@ 0x78
 8000ece:	f000 fa3f 	bl	8001350 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8000ed2:	e004      	b.n	8000ede <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 8000ed4:	22a6      	movs	r2, #166	@ 0xa6
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2078      	movs	r0, #120	@ 0x78
 8000eda:	f000 fa39 	bl	8001350 <ssd1306_I2C_Write>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <SSD1306_DrawBitmap>:


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	60ba      	str	r2, [r7, #8]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	81fb      	strh	r3, [r7, #14]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	81bb      	strh	r3, [r7, #12]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f00:	3307      	adds	r3, #7
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da00      	bge.n	8000f08 <SSD1306_DrawBitmap+0x22>
 8000f06:	3307      	adds	r3, #7
 8000f08:	10db      	asrs	r3, r3, #3
 8000f0a:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	82bb      	strh	r3, [r7, #20]
 8000f14:	e044      	b.n	8000fa0 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	827b      	strh	r3, [r7, #18]
 8000f1a:	e02f      	b.n	8000f7c <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000f1c:	8a7b      	ldrh	r3, [r7, #18]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000f26:	7dfb      	ldrb	r3, [r7, #23]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	75fb      	strb	r3, [r7, #23]
 8000f2c:	e012      	b.n	8000f54 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000f2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f32:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000f36:	fb03 f202 	mul.w	r2, r3, r2
 8000f3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da00      	bge.n	8000f44 <SSD1306_DrawBitmap+0x5e>
 8000f42:	3307      	adds	r3, #7
 8000f44:	10db      	asrs	r3, r3, #3
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	4413      	add	r3, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4413      	add	r3, r2
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000f54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da09      	bge.n	8000f70 <SSD1306_DrawBitmap+0x8a>
 8000f5c:	89fa      	ldrh	r2, [r7, #14]
 8000f5e:	8a7b      	ldrh	r3, [r7, #18]
 8000f60:	4413      	add	r3, r2
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	89b9      	ldrh	r1, [r7, #12]
 8000f66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f86a 	bl	8001044 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8000f70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	3301      	adds	r3, #1
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	827b      	strh	r3, [r7, #18]
 8000f7c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000f80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbc9      	blt.n	8000f1c <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8000f88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	3301      	adds	r3, #1
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	82bb      	strh	r3, [r7, #20]
 8000f94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	81bb      	strh	r3, [r7, #12]
 8000fa0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000fa4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbb4      	blt.n	8000f16 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <SSD1306_UpdateScreen>:
	
	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	e01d      	b.n	8001000 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	3b50      	subs	r3, #80	@ 0x50
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	461a      	mov	r2, r3
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2078      	movs	r0, #120	@ 0x78
 8000fd0:	f000 f9be 	bl	8001350 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2078      	movs	r0, #120	@ 0x78
 8000fda:	f000 f9b9 	bl	8001350 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000fde:	2210      	movs	r2, #16
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2078      	movs	r0, #120	@ 0x78
 8000fe4:	f000 f9b4 	bl	8001350 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	01db      	lsls	r3, r3, #7
 8000fec:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <SSD1306_UpdateScreen+0x58>)
 8000fee:	441a      	add	r2, r3
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	2140      	movs	r1, #64	@ 0x40
 8000ff4:	2078      	movs	r0, #120	@ 0x78
 8000ff6:	f000 f945 	bl	8001284 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b07      	cmp	r3, #7
 8001004:	d9de      	bls.n	8000fc4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000438 	.word	0x20000438

08001014 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <SSD1306_Fill+0x14>
 8001024:	2300      	movs	r3, #0
 8001026:	e000      	b.n	800102a <SSD1306_Fill+0x16>
 8001028:	23ff      	movs	r3, #255	@ 0xff
 800102a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800102e:	4619      	mov	r1, r3
 8001030:	4803      	ldr	r0, [pc, #12]	@ (8001040 <SSD1306_Fill+0x2c>)
 8001032:	f004 f911 	bl	8005258 <memset>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000438 	.word	0x20000438

08001044 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
 800104e:	460b      	mov	r3, r1
 8001050:	80bb      	strh	r3, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	70fb      	strb	r3, [r7, #3]
	if (
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	2b7f      	cmp	r3, #127	@ 0x7f
 800105a:	d848      	bhi.n	80010ee <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	2b1f      	cmp	r3, #31
 8001060:	d845      	bhi.n	80010ee <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001062:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <SSD1306_DrawPixel+0xb4>)
 8001064:	791b      	ldrb	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800106a:	78fb      	ldrb	r3, [r7, #3]
 800106c:	2b00      	cmp	r3, #0
 800106e:	bf0c      	ite	eq
 8001070:	2301      	moveq	r3, #1
 8001072:	2300      	movne	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d11a      	bne.n	80010b4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800107e:	88fa      	ldrh	r2, [r7, #6]
 8001080:	88bb      	ldrh	r3, [r7, #4]
 8001082:	08db      	lsrs	r3, r3, #3
 8001084:	b298      	uxth	r0, r3
 8001086:	4603      	mov	r3, r0
 8001088:	01db      	lsls	r3, r3, #7
 800108a:	4413      	add	r3, r2
 800108c:	4a1b      	ldr	r2, [pc, #108]	@ (80010fc <SSD1306_DrawPixel+0xb8>)
 800108e:	5cd3      	ldrb	r3, [r2, r3]
 8001090:	b25a      	sxtb	r2, r3
 8001092:	88bb      	ldrh	r3, [r7, #4]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	2101      	movs	r1, #1
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	b25b      	sxtb	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b259      	sxtb	r1, r3
 80010a4:	88fa      	ldrh	r2, [r7, #6]
 80010a6:	4603      	mov	r3, r0
 80010a8:	01db      	lsls	r3, r3, #7
 80010aa:	4413      	add	r3, r2
 80010ac:	b2c9      	uxtb	r1, r1
 80010ae:	4a13      	ldr	r2, [pc, #76]	@ (80010fc <SSD1306_DrawPixel+0xb8>)
 80010b0:	54d1      	strb	r1, [r2, r3]
 80010b2:	e01d      	b.n	80010f0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010b4:	88fa      	ldrh	r2, [r7, #6]
 80010b6:	88bb      	ldrh	r3, [r7, #4]
 80010b8:	08db      	lsrs	r3, r3, #3
 80010ba:	b298      	uxth	r0, r3
 80010bc:	4603      	mov	r3, r0
 80010be:	01db      	lsls	r3, r3, #7
 80010c0:	4413      	add	r3, r2
 80010c2:	4a0e      	ldr	r2, [pc, #56]	@ (80010fc <SSD1306_DrawPixel+0xb8>)
 80010c4:	5cd3      	ldrb	r3, [r2, r3]
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	88bb      	ldrh	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	4013      	ands	r3, r2
 80010dc:	b259      	sxtb	r1, r3
 80010de:	88fa      	ldrh	r2, [r7, #6]
 80010e0:	4603      	mov	r3, r0
 80010e2:	01db      	lsls	r3, r3, #7
 80010e4:	4413      	add	r3, r2
 80010e6:	b2c9      	uxtb	r1, r1
 80010e8:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <SSD1306_DrawPixel+0xb8>)
 80010ea:	54d1      	strb	r1, [r2, r3]
 80010ec:	e000      	b.n	80010f0 <SSD1306_DrawPixel+0xac>
		return;
 80010ee:	bf00      	nop
	}
}
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	20000638 	.word	0x20000638
 80010fc:	20000438 	.word	0x20000438

08001100 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	460a      	mov	r2, r1
 800110a:	80fb      	strh	r3, [r7, #6]
 800110c:	4613      	mov	r3, r2
 800110e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001110:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <SSD1306_GotoXY+0x28>)
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001116:	4a04      	ldr	r2, [pc, #16]	@ (8001128 <SSD1306_GotoXY+0x28>)
 8001118:	88bb      	ldrh	r3, [r7, #4]
 800111a:	8053      	strh	r3, [r2, #2]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000638 	.word	0x20000638

0800112c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800113c:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <SSD1306_Putc+0xf8>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
	if (
 8001148:	2b7f      	cmp	r3, #127	@ 0x7f
 800114a:	dc07      	bgt.n	800115c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800114c:	4b35      	ldr	r3, [pc, #212]	@ (8001224 <SSD1306_Putc+0xf8>)
 800114e:	885b      	ldrh	r3, [r3, #2]
 8001150:	461a      	mov	r2, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001158:	2b1f      	cmp	r3, #31
 800115a:	dd01      	ble.n	8001160 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800115c:	2300      	movs	r3, #0
 800115e:	e05d      	b.n	800121c <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e04b      	b.n	80011fe <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	3b20      	subs	r3, #32
 800116e:	6839      	ldr	r1, [r7, #0]
 8001170:	7849      	ldrb	r1, [r1, #1]
 8001172:	fb01 f303 	mul.w	r3, r1, r3
 8001176:	4619      	mov	r1, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	440b      	add	r3, r1
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	e030      	b.n	80011ec <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d010      	beq.n	80011bc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800119a:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <SSD1306_Putc+0xf8>)
 800119c:	881a      	ldrh	r2, [r3, #0]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	b298      	uxth	r0, r3
 80011a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <SSD1306_Putc+0xf8>)
 80011a8:	885a      	ldrh	r2, [r3, #2]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	79ba      	ldrb	r2, [r7, #6]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff ff45 	bl	8001044 <SSD1306_DrawPixel>
 80011ba:	e014      	b.n	80011e6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <SSD1306_Putc+0xf8>)
 80011be:	881a      	ldrh	r2, [r3, #0]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	b298      	uxth	r0, r3
 80011c8:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <SSD1306_Putc+0xf8>)
 80011ca:	885a      	ldrh	r2, [r3, #2]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4413      	add	r3, r2
 80011d2:	b299      	uxth	r1, r3
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bf0c      	ite	eq
 80011da:	2301      	moveq	r3, #1
 80011dc:	2300      	movne	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	f7ff ff2f 	bl	8001044 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	3301      	adds	r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d3c8      	bcc.n	800118a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	3301      	adds	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	785b      	ldrb	r3, [r3, #1]
 8001202:	461a      	mov	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	4293      	cmp	r3, r2
 8001208:	d3ad      	bcc.n	8001166 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <SSD1306_Putc+0xf8>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	7812      	ldrb	r2, [r2, #0]
 8001212:	4413      	add	r3, r2
 8001214:	b29a      	uxth	r2, r3
 8001216:	4b03      	ldr	r3, [pc, #12]	@ (8001224 <SSD1306_Putc+0xf8>)
 8001218:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800121a:	79fb      	ldrb	r3, [r7, #7]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000638 	.word	0x20000638

08001228 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	4613      	mov	r3, r2
 8001234:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001236:	e012      	b.n	800125e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	79fa      	ldrb	r2, [r7, #7]
 800123e:	68b9      	ldr	r1, [r7, #8]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff73 	bl	800112c <SSD1306_Putc>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d002      	beq.n	8001258 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	e008      	b.n	800126a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3301      	adds	r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1e8      	bne.n	8001238 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	781b      	ldrb	r3, [r3, #0]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fecc 	bl	8001014 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800127c:	f7ff fe9c 	bl	8000fb8 <SSD1306_UpdateScreen>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b0c7      	sub	sp, #284	@ 0x11c
 8001288:	af02      	add	r7, sp, #8
 800128a:	4604      	mov	r4, r0
 800128c:	4608      	mov	r0, r1
 800128e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001292:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001296:	600a      	str	r2, [r1, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800129e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80012a2:	4622      	mov	r2, r4
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012aa:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80012ae:	4602      	mov	r2, r0
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012ba:	460a      	mov	r2, r1
 80012bc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80012be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012c6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012ca:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80012d8:	e015      	b.n	8001306 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80012da:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012de:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012e2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	441a      	add	r2, r3
 80012ea:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012ee:	3301      	adds	r3, #1
 80012f0:	7811      	ldrb	r1, [r2, #0]
 80012f2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012f6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80012fa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80012fc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001300:	3301      	adds	r3, #1
 8001302:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001306:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800130a:	b29b      	uxth	r3, r3
 800130c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001310:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001314:	8812      	ldrh	r2, [r2, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d8df      	bhi.n	80012da <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800131a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800131e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b299      	uxth	r1, r3
 8001326:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800132a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	b29b      	uxth	r3, r3
 8001334:	f107 020c 	add.w	r2, r7, #12
 8001338:	200a      	movs	r0, #10
 800133a:	9000      	str	r0, [sp, #0]
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <ssd1306_I2C_WriteMulti+0xc8>)
 800133e:	f001 fba5 	bl	8002a8c <HAL_I2C_Master_Transmit>
}
 8001342:	bf00      	nop
 8001344:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	20000640 	.word	0x20000640

08001350 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af02      	add	r7, sp, #8
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	460b      	mov	r3, r1
 800135c:	71bb      	strb	r3, [r7, #6]
 800135e:	4613      	mov	r3, r2
 8001360:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001366:	797b      	ldrb	r3, [r7, #5]
 8001368:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	b299      	uxth	r1, r3
 800136e:	f107 020c 	add.w	r2, r7, #12
 8001372:	230a      	movs	r3, #10
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2302      	movs	r3, #2
 8001378:	4803      	ldr	r0, [pc, #12]	@ (8001388 <ssd1306_I2C_Write+0x38>)
 800137a:	f001 fb87 	bl	8002a8c <HAL_I2C_Master_Transmit>
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000640 	.word	0x20000640

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <HAL_MspInit+0x68>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	4a17      	ldr	r2, [pc, #92]	@ (80013f4 <HAL_MspInit+0x68>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6193      	str	r3, [r2, #24]
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <HAL_MspInit+0x68>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <HAL_MspInit+0x68>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4a11      	ldr	r2, [pc, #68]	@ (80013f4 <HAL_MspInit+0x68>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	61d3      	str	r3, [r2, #28]
 80013b6:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <HAL_MspInit+0x68>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	210f      	movs	r1, #15
 80013c6:	f06f 0001 	mvn.w	r0, #1
 80013ca:	f001 f83a 	bl	8002442 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <HAL_MspInit+0x6c>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	4a04      	ldr	r2, [pc, #16]	@ (80013f8 <HAL_MspInit+0x6c>)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000

080013fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	@ 0x38
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001412:	4b34      	ldr	r3, [pc, #208]	@ (80014e4 <HAL_InitTick+0xe8>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a33      	ldr	r2, [pc, #204]	@ (80014e4 <HAL_InitTick+0xe8>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	61d3      	str	r3, [r2, #28]
 800141e:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <HAL_InitTick+0xe8>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800142a:	f107 0210 	add.w	r2, r7, #16
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f002 fa5f 	bl	80038f8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800143e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001440:	2b00      	cmp	r3, #0
 8001442:	d103      	bne.n	800144c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001444:	f002 fa44 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8001448:	6378      	str	r0, [r7, #52]	@ 0x34
 800144a:	e004      	b.n	8001456 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800144c:	f002 fa40 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8001450:	4603      	mov	r3, r0
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001458:	4a23      	ldr	r2, [pc, #140]	@ (80014e8 <HAL_InitTick+0xec>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0c9b      	lsrs	r3, r3, #18
 8001460:	3b01      	subs	r3, #1
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001464:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <HAL_InitTick+0xf0>)
 8001466:	4a22      	ldr	r2, [pc, #136]	@ (80014f0 <HAL_InitTick+0xf4>)
 8001468:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <HAL_InitTick+0xf0>)
 800146c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001470:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001472:	4a1e      	ldr	r2, [pc, #120]	@ (80014ec <HAL_InitTick+0xf0>)
 8001474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001476:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001478:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <HAL_InitTick+0xf0>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <HAL_InitTick+0xf0>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <HAL_InitTick+0xf0>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800148a:	4818      	ldr	r0, [pc, #96]	@ (80014ec <HAL_InitTick+0xf0>)
 800148c:	f002 fa82 	bl	8003994 <HAL_TIM_Base_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001496:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800149a:	2b00      	cmp	r3, #0
 800149c:	d11b      	bne.n	80014d6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800149e:	4813      	ldr	r0, [pc, #76]	@ (80014ec <HAL_InitTick+0xf0>)
 80014a0:	f002 fad0 	bl	8003a44 <HAL_TIM_Base_Start_IT>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d111      	bne.n	80014d6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014b2:	201e      	movs	r0, #30
 80014b4:	f000 ffe1 	bl	800247a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	d808      	bhi.n	80014d0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80014be:	2200      	movs	r2, #0
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	201e      	movs	r0, #30
 80014c4:	f000 ffbd 	bl	8002442 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014c8:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <HAL_InitTick+0xf8>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e002      	b.n	80014d6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3738      	adds	r7, #56	@ 0x38
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	431bde83 	.word	0x431bde83
 80014ec:	20000694 	.word	0x20000694
 80014f0:	40000800 	.word	0x40000800
 80014f4:	2000000c 	.word	0x2000000c

080014f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <NMI_Handler+0x4>

08001500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <MemManage_Handler+0x4>

08001510 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <UsageFault_Handler+0x4>

08001520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001530:	4802      	ldr	r0, [pc, #8]	@ (800153c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001532:	f000 fcae 	bl	8001e92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000084 	.word	0x20000084

08001540 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <TIM4_IRQHandler+0x10>)
 8001546:	f002 facf 	bl	8003ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000694 	.word	0x20000694

08001554 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001560:	f7ff fff8 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001564:	480b      	ldr	r0, [pc, #44]	@ (8001594 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001566:	490c      	ldr	r1, [pc, #48]	@ (8001598 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001568:	4a0c      	ldr	r2, [pc, #48]	@ (800159c <LoopFillZerobss+0x16>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a09      	ldr	r2, [pc, #36]	@ (80015a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800157c:	4c09      	ldr	r4, [pc, #36]	@ (80015a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158a:	f003 fec3 	bl	8005314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800158e:	f7ff fb25 	bl	8000bdc <main>
  bx lr
 8001592:	4770      	bx	lr
  ldr r0, =_sdata
 8001594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001598:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800159c:	08008e1c 	.word	0x08008e1c
  ldr r2, =_sbss
 80015a0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015a4:	20001574 	.word	0x20001574

080015a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a8:	e7fe      	b.n	80015a8 <ADC1_2_IRQHandler>
	...

080015ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_Init+0x28>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a07      	ldr	r2, [pc, #28]	@ (80015d4 <HAL_Init+0x28>)
 80015b6:	f043 0310 	orr.w	r3, r3, #16
 80015ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 ff35 	bl	800242c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c2:	200f      	movs	r0, #15
 80015c4:	f7ff ff1a 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c8:	f7ff fee0 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40022000 	.word	0x40022000

080015d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <HAL_IncTick+0x1c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <HAL_IncTick+0x20>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a03      	ldr	r2, [pc, #12]	@ (80015f8 <HAL_IncTick+0x20>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	20000010 	.word	0x20000010
 80015f8:	200006dc 	.word	0x200006dc

080015fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b02      	ldr	r3, [pc, #8]	@ (800160c <HAL_GetTick+0x10>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	200006dc 	.word	0x200006dc

08001610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff fff0 	bl	80015fc <HAL_GetTick>
 800161c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001628:	d005      	beq.n	8001636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <HAL_Delay+0x44>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4413      	add	r3, r2
 8001634:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001636:	bf00      	nop
 8001638:	f7ff ffe0 	bl	80015fc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	429a      	cmp	r2, r3
 8001646:	d8f7      	bhi.n	8001638 <HAL_Delay+0x28>
  {
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000010 	.word	0x20000010

08001658 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e0ed      	b.n	8001846 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7fe fda0 	bl	80001bc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0201 	orr.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800168c:	f7ff ffb6 	bl	80015fc <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001692:	e012      	b.n	80016ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001694:	f7ff ffb2 	bl	80015fc <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b0a      	cmp	r3, #10
 80016a0:	d90b      	bls.n	80016ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2205      	movs	r2, #5
 80016b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e0c5      	b.n	8001846 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0e5      	beq.n	8001694 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0202 	bic.w	r2, r2, #2
 80016d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016d8:	f7ff ff90 	bl	80015fc <HAL_GetTick>
 80016dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016de:	e012      	b.n	8001706 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016e0:	f7ff ff8c 	bl	80015fc <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b0a      	cmp	r3, #10
 80016ec:	d90b      	bls.n	8001706 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2205      	movs	r2, #5
 80016fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e09f      	b.n	8001846 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e5      	bne.n	80016e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7e1b      	ldrb	r3, [r3, #24]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d108      	bne.n	800172e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	e007      	b.n	800173e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7e5b      	ldrb	r3, [r3, #25]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d108      	bne.n	8001758 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e007      	b.n	8001768 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001766:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7e9b      	ldrb	r3, [r3, #26]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d108      	bne.n	8001782 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0220 	orr.w	r2, r2, #32
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e007      	b.n	8001792 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0220 	bic.w	r2, r2, #32
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7edb      	ldrb	r3, [r3, #27]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d108      	bne.n	80017ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0210 	bic.w	r2, r2, #16
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e007      	b.n	80017bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 0210 	orr.w	r2, r2, #16
 80017ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7f1b      	ldrb	r3, [r3, #28]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d108      	bne.n	80017d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0208 	orr.w	r2, r2, #8
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	e007      	b.n	80017e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0208 	bic.w	r2, r2, #8
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	7f5b      	ldrb	r3, [r3, #29]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d108      	bne.n	8001800 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 0204 	orr.w	r2, r2, #4
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	e007      	b.n	8001810 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0204 	bic.w	r2, r2, #4
 800180e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	ea42 0103 	orr.w	r1, r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	1e5a      	subs	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800184e:	b480      	push	{r7}
 8001850:	b087      	sub	sp, #28
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001864:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001866:	7cfb      	ldrb	r3, [r7, #19]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d003      	beq.n	8001874 <HAL_CAN_ConfigFilter+0x26>
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	2b02      	cmp	r3, #2
 8001870:	f040 80aa 	bne.w	80019c8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800187a:	f043 0201 	orr.w	r2, r3, #1
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	2201      	movs	r2, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d123      	bne.n	80018f6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	401a      	ands	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3248      	adds	r2, #72	@ 0x48
 80018d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ec:	6979      	ldr	r1, [r7, #20]
 80018ee:	3348      	adds	r3, #72	@ 0x48
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d122      	bne.n	8001944 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	431a      	orrs	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800191e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3248      	adds	r2, #72	@ 0x48
 8001924:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001938:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800193a:	6979      	ldr	r1, [r7, #20]
 800193c:	3348      	adds	r3, #72	@ 0x48
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d109      	bne.n	8001960 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43db      	mvns	r3, r3
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800195e:	e007      	b.n	8001970 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	431a      	orrs	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d109      	bne.n	800198c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43db      	mvns	r3, r3
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800198a:	e007      	b.n	800199c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	431a      	orrs	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d107      	bne.n	80019b4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019ba:	f023 0201 	bic.w	r2, r3, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e006      	b.n	80019d6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
  }
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	371c      	adds	r7, #28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d12e      	bne.n	8001a52 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a0c:	f7ff fdf6 	bl	80015fc <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a12:	e012      	b.n	8001a3a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a14:	f7ff fdf2 	bl	80015fc <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b0a      	cmp	r3, #10
 8001a20:	d90b      	bls.n	8001a3a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2205      	movs	r2, #5
 8001a32:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e012      	b.n	8001a60 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1e5      	bne.n	8001a14 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e006      	b.n	8001a60 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
  }
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	@ 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a86:	7ffb      	ldrb	r3, [r7, #31]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d003      	beq.n	8001a94 <HAL_CAN_AddTxMessage+0x2c>
 8001a8c:	7ffb      	ldrb	r3, [r7, #31]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	f040 80ad 	bne.w	8001bee <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10a      	bne.n	8001ab4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d105      	bne.n	8001ab4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8095 	beq.w	8001bde <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	0e1b      	lsrs	r3, r3, #24
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001abe:	2201      	movs	r2, #1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10d      	bne.n	8001aec <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ada:	68f9      	ldr	r1, [r7, #12]
 8001adc:	6809      	ldr	r1, [r1, #0]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3318      	adds	r3, #24
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	440b      	add	r3, r1
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e00f      	b.n	8001b0c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001af6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001afc:	68f9      	ldr	r1, [r7, #12]
 8001afe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b00:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3318      	adds	r3, #24
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	440b      	add	r3, r1
 8001b0a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6819      	ldr	r1, [r3, #0]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3318      	adds	r3, #24
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	7d1b      	ldrb	r3, [r3, #20]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d111      	bne.n	8001b4c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3318      	adds	r3, #24
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	4413      	add	r3, r2
 8001b34:	3304      	adds	r3, #4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	6811      	ldr	r1, [r2, #0]
 8001b3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3318      	adds	r3, #24
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	440b      	add	r3, r1
 8001b48:	3304      	adds	r3, #4
 8001b4a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3307      	adds	r3, #7
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	061a      	lsls	r2, r3, #24
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3306      	adds	r3, #6
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	041b      	lsls	r3, r3, #16
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3305      	adds	r3, #5
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	4313      	orrs	r3, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	3204      	adds	r2, #4
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	4610      	mov	r0, r2
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	6811      	ldr	r1, [r2, #0]
 8001b74:	ea43 0200 	orr.w	r2, r3, r0
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	440b      	add	r3, r1
 8001b7e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001b82:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3303      	adds	r3, #3
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	061a      	lsls	r2, r3, #24
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3302      	adds	r3, #2
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	041b      	lsls	r3, r3, #16
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	7812      	ldrb	r2, [r2, #0]
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	6811      	ldr	r1, [r2, #0]
 8001baa:	ea43 0200 	orr.w	r2, r3, r0
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001bb8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3318      	adds	r3, #24
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	4413      	add	r3, r2
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	6811      	ldr	r1, [r2, #0]
 8001bcc:	f043 0201 	orr.w	r2, r3, #1
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3318      	adds	r3, #24
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	440b      	add	r3, r1
 8001bd8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e00e      	b.n	8001bfc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e006      	b.n	8001bfc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
  }
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3724      	adds	r7, #36	@ 0x24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c06:	b480      	push	{r7}
 8001c08:	b087      	sub	sp, #28
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d003      	beq.n	8001c2a <HAL_CAN_GetRxMessage+0x24>
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	f040 8103 	bne.w	8001e30 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10e      	bne.n	8001c4e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d116      	bne.n	8001c6c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0f7      	b.n	8001e3e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0e8      	b.n	8001e3e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	331b      	adds	r3, #27
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	4413      	add	r3, r2
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0204 	and.w	r2, r3, #4
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10c      	bne.n	8001ca4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	331b      	adds	r3, #27
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	4413      	add	r3, r2
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	0d5b      	lsrs	r3, r3, #21
 8001c9a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	331b      	adds	r3, #27
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	4413      	add	r3, r2
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	08db      	lsrs	r3, r3, #3
 8001cb4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	331b      	adds	r3, #27
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	4413      	add	r3, r2
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0202 	and.w	r2, r3, #2
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	331b      	adds	r3, #27
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	4413      	add	r3, r2
 8001cde:	3304      	adds	r3, #4
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2208      	movs	r2, #8
 8001cee:	611a      	str	r2, [r3, #16]
 8001cf0:	e00b      	b.n	8001d0a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	331b      	adds	r3, #27
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3304      	adds	r3, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 020f 	and.w	r2, r3, #15
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	331b      	adds	r3, #27
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4413      	add	r3, r2
 8001d16:	3304      	adds	r3, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	331b      	adds	r3, #27
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3304      	adds	r3, #4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0c1b      	lsrs	r3, r3, #16
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0a1a      	lsrs	r2, r3, #8
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	3301      	adds	r3, #1
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0c1a      	lsrs	r2, r3, #16
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	3302      	adds	r3, #2
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e1a      	lsrs	r2, r3, #24
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	3303      	adds	r3, #3
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	3304      	adds	r3, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	0a1a      	lsrs	r2, r3, #8
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	3305      	adds	r3, #5
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0c1a      	lsrs	r2, r3, #16
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	3306      	adds	r3, #6
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0e1a      	lsrs	r2, r3, #24
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	3307      	adds	r3, #7
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d108      	bne.n	8001e1c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0220 	orr.w	r2, r2, #32
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	e007      	b.n	8001e2c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0220 	orr.w	r2, r2, #32
 8001e2a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e006      	b.n	8001e3e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e34:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
  }
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e58:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d002      	beq.n	8001e66 <HAL_CAN_ActivateNotification+0x1e>
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d109      	bne.n	8001e7a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6959      	ldr	r1, [r3, #20]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e006      	b.n	8001e88 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
  }
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b08a      	sub	sp, #40	@ 0x28
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d07c      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d023      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f983 	bl	8002200 <HAL_CAN_TxMailbox0CompleteCallback>
 8001efa:	e016      	b.n	8001f2a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f0e:	e00c      	b.n	8001f2a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d004      	beq.n	8001f24 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f22:	e002      	b.n	8001f2a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f986 	bl	8002236 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d024      	beq.n	8001f7e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f962 	bl	8002212 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f4e:	e016      	b.n	8001f7e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f62:	e00c      	b.n	8001f7e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d004      	beq.n	8001f78 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f76:	e002      	b.n	8001f7e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f965 	bl	8002248 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d024      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f90:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f941 	bl	8002224 <HAL_CAN_TxMailbox2CompleteCallback>
 8001fa2:	e016      	b.n	8001fd2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb6:	e00c      	b.n	8001fd2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d004      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fca:	e002      	b.n	8001fd2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f944 	bl	800225a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00c      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d007      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2210      	movs	r2, #16
 8001ff4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00b      	beq.n	8002018 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2208      	movs	r2, #8
 8002010:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f92a 	bl	800226c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7fe fcc9 	bl	80009c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00c      	beq.n	800205a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2210      	movs	r2, #16
 8002058:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00b      	beq.n	800207c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2208      	movs	r2, #8
 8002074:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f90a 	bl	8002290 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f8f2 	bl	800227e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2210      	movs	r2, #16
 80020b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f8f3 	bl	80022a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2208      	movs	r2, #8
 80020d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f8eb 	bl	80022b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d07b      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d072      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800214c:	2b00      	cmp	r3, #0
 800214e:	d043      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002156:	2b00      	cmp	r3, #0
 8002158:	d03e      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002160:	2b60      	cmp	r3, #96	@ 0x60
 8002162:	d02b      	beq.n	80021bc <HAL_CAN_IRQHandler+0x32a>
 8002164:	2b60      	cmp	r3, #96	@ 0x60
 8002166:	d82e      	bhi.n	80021c6 <HAL_CAN_IRQHandler+0x334>
 8002168:	2b50      	cmp	r3, #80	@ 0x50
 800216a:	d022      	beq.n	80021b2 <HAL_CAN_IRQHandler+0x320>
 800216c:	2b50      	cmp	r3, #80	@ 0x50
 800216e:	d82a      	bhi.n	80021c6 <HAL_CAN_IRQHandler+0x334>
 8002170:	2b40      	cmp	r3, #64	@ 0x40
 8002172:	d019      	beq.n	80021a8 <HAL_CAN_IRQHandler+0x316>
 8002174:	2b40      	cmp	r3, #64	@ 0x40
 8002176:	d826      	bhi.n	80021c6 <HAL_CAN_IRQHandler+0x334>
 8002178:	2b30      	cmp	r3, #48	@ 0x30
 800217a:	d010      	beq.n	800219e <HAL_CAN_IRQHandler+0x30c>
 800217c:	2b30      	cmp	r3, #48	@ 0x30
 800217e:	d822      	bhi.n	80021c6 <HAL_CAN_IRQHandler+0x334>
 8002180:	2b10      	cmp	r3, #16
 8002182:	d002      	beq.n	800218a <HAL_CAN_IRQHandler+0x2f8>
 8002184:	2b20      	cmp	r3, #32
 8002186:	d005      	beq.n	8002194 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002188:	e01d      	b.n	80021c6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002192:	e019      	b.n	80021c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	f043 0310 	orr.w	r3, r3, #16
 800219a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800219c:	e014      	b.n	80021c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	f043 0320 	orr.w	r3, r3, #32
 80021a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021a6:	e00f      	b.n	80021c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021b0:	e00a      	b.n	80021c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021ba:	e005      	b.n	80021c8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021c4:	e000      	b.n	80021c8 <HAL_CAN_IRQHandler+0x336>
            break;
 80021c6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80021d6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2204      	movs	r2, #4
 80021de:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f867 	bl	80022c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021f8:	bf00      	nop
 80021fa:	3728      	adds	r7, #40	@ 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e8:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <__NVIC_SetPriorityGrouping+0x44>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022f4:	4013      	ands	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002300:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002304:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230a:	4a04      	ldr	r2, [pc, #16]	@ (800231c <__NVIC_SetPriorityGrouping+0x44>)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	60d3      	str	r3, [r2, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002324:	4b04      	ldr	r3, [pc, #16]	@ (8002338 <__NVIC_GetPriorityGrouping+0x18>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f003 0307 	and.w	r3, r3, #7
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db0b      	blt.n	8002366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	4906      	ldr	r1, [pc, #24]	@ (8002370 <__NVIC_EnableIRQ+0x34>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2001      	movs	r0, #1
 800235e:	fa00 f202 	lsl.w	r2, r0, r2
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100

08002374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	2b00      	cmp	r3, #0
 8002386:	db0a      	blt.n	800239e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	b2da      	uxtb	r2, r3
 800238c:	490c      	ldr	r1, [pc, #48]	@ (80023c0 <__NVIC_SetPriority+0x4c>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	0112      	lsls	r2, r2, #4
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	440b      	add	r3, r1
 8002398:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800239c:	e00a      	b.n	80023b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4908      	ldr	r1, [pc, #32]	@ (80023c4 <__NVIC_SetPriority+0x50>)
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	3b04      	subs	r3, #4
 80023ac:	0112      	lsls	r2, r2, #4
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	440b      	add	r3, r1
 80023b2:	761a      	strb	r2, [r3, #24]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000e100 	.word	0xe000e100
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	@ 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f1c3 0307 	rsb	r3, r3, #7
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	bf28      	it	cs
 80023e6:	2304      	movcs	r3, #4
 80023e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2b06      	cmp	r3, #6
 80023f0:	d902      	bls.n	80023f8 <NVIC_EncodePriority+0x30>
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3b03      	subs	r3, #3
 80023f6:	e000      	b.n	80023fa <NVIC_EncodePriority+0x32>
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	401a      	ands	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002410:	f04f 31ff 	mov.w	r1, #4294967295
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	43d9      	mvns	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	4313      	orrs	r3, r2
         );
}
 8002422:	4618      	mov	r0, r3
 8002424:	3724      	adds	r7, #36	@ 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff4f 	bl	80022d8 <__NVIC_SetPriorityGrouping>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002454:	f7ff ff64 	bl	8002320 <__NVIC_GetPriorityGrouping>
 8002458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7ff ffb2 	bl	80023c8 <NVIC_EncodePriority>
 8002464:	4602      	mov	r2, r0
 8002466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff81 	bl	8002374 <__NVIC_SetPriority>
}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff57 	bl	800233c <__NVIC_EnableIRQ>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b08b      	sub	sp, #44	@ 0x2c
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024aa:	e169      	b.n	8002780 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024ac:	2201      	movs	r2, #1
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 8158 	bne.w	800277a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a9a      	ldr	r2, [pc, #616]	@ (8002738 <HAL_GPIO_Init+0x2a0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d05e      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024d4:	4a98      	ldr	r2, [pc, #608]	@ (8002738 <HAL_GPIO_Init+0x2a0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d875      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024da:	4a98      	ldr	r2, [pc, #608]	@ (800273c <HAL_GPIO_Init+0x2a4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d058      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024e0:	4a96      	ldr	r2, [pc, #600]	@ (800273c <HAL_GPIO_Init+0x2a4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d86f      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024e6:	4a96      	ldr	r2, [pc, #600]	@ (8002740 <HAL_GPIO_Init+0x2a8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d052      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024ec:	4a94      	ldr	r2, [pc, #592]	@ (8002740 <HAL_GPIO_Init+0x2a8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d869      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024f2:	4a94      	ldr	r2, [pc, #592]	@ (8002744 <HAL_GPIO_Init+0x2ac>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d04c      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 80024f8:	4a92      	ldr	r2, [pc, #584]	@ (8002744 <HAL_GPIO_Init+0x2ac>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d863      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 80024fe:	4a92      	ldr	r2, [pc, #584]	@ (8002748 <HAL_GPIO_Init+0x2b0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d046      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
 8002504:	4a90      	ldr	r2, [pc, #576]	@ (8002748 <HAL_GPIO_Init+0x2b0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d85d      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 800250a:	2b12      	cmp	r3, #18
 800250c:	d82a      	bhi.n	8002564 <HAL_GPIO_Init+0xcc>
 800250e:	2b12      	cmp	r3, #18
 8002510:	d859      	bhi.n	80025c6 <HAL_GPIO_Init+0x12e>
 8002512:	a201      	add	r2, pc, #4	@ (adr r2, 8002518 <HAL_GPIO_Init+0x80>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	08002593 	.word	0x08002593
 800251c:	0800256d 	.word	0x0800256d
 8002520:	0800257f 	.word	0x0800257f
 8002524:	080025c1 	.word	0x080025c1
 8002528:	080025c7 	.word	0x080025c7
 800252c:	080025c7 	.word	0x080025c7
 8002530:	080025c7 	.word	0x080025c7
 8002534:	080025c7 	.word	0x080025c7
 8002538:	080025c7 	.word	0x080025c7
 800253c:	080025c7 	.word	0x080025c7
 8002540:	080025c7 	.word	0x080025c7
 8002544:	080025c7 	.word	0x080025c7
 8002548:	080025c7 	.word	0x080025c7
 800254c:	080025c7 	.word	0x080025c7
 8002550:	080025c7 	.word	0x080025c7
 8002554:	080025c7 	.word	0x080025c7
 8002558:	080025c7 	.word	0x080025c7
 800255c:	08002575 	.word	0x08002575
 8002560:	08002589 	.word	0x08002589
 8002564:	4a79      	ldr	r2, [pc, #484]	@ (800274c <HAL_GPIO_Init+0x2b4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800256a:	e02c      	b.n	80025c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	623b      	str	r3, [r7, #32]
          break;
 8002572:	e029      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	3304      	adds	r3, #4
 800257a:	623b      	str	r3, [r7, #32]
          break;
 800257c:	e024      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	3308      	adds	r3, #8
 8002584:	623b      	str	r3, [r7, #32]
          break;
 8002586:	e01f      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	330c      	adds	r3, #12
 800258e:	623b      	str	r3, [r7, #32]
          break;
 8002590:	e01a      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800259a:	2304      	movs	r3, #4
 800259c:	623b      	str	r3, [r7, #32]
          break;
 800259e:	e013      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025a8:	2308      	movs	r3, #8
 80025aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	611a      	str	r2, [r3, #16]
          break;
 80025b2:	e009      	b.n	80025c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b4:	2308      	movs	r3, #8
 80025b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	615a      	str	r2, [r3, #20]
          break;
 80025be:	e003      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
          break;
 80025c4:	e000      	b.n	80025c8 <HAL_GPIO_Init+0x130>
          break;
 80025c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2bff      	cmp	r3, #255	@ 0xff
 80025cc:	d801      	bhi.n	80025d2 <HAL_GPIO_Init+0x13a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	e001      	b.n	80025d6 <HAL_GPIO_Init+0x13e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3304      	adds	r3, #4
 80025d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2bff      	cmp	r3, #255	@ 0xff
 80025dc:	d802      	bhi.n	80025e4 <HAL_GPIO_Init+0x14c>
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	e002      	b.n	80025ea <HAL_GPIO_Init+0x152>
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	3b08      	subs	r3, #8
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	210f      	movs	r1, #15
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	401a      	ands	r2, r3
 80025fc:	6a39      	ldr	r1, [r7, #32]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	431a      	orrs	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 80b1 	beq.w	800277a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002618:	4b4d      	ldr	r3, [pc, #308]	@ (8002750 <HAL_GPIO_Init+0x2b8>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	4a4c      	ldr	r2, [pc, #304]	@ (8002750 <HAL_GPIO_Init+0x2b8>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6193      	str	r3, [r2, #24]
 8002624:	4b4a      	ldr	r3, [pc, #296]	@ (8002750 <HAL_GPIO_Init+0x2b8>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002630:	4a48      	ldr	r2, [pc, #288]	@ (8002754 <HAL_GPIO_Init+0x2bc>)
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	220f      	movs	r2, #15
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a40      	ldr	r2, [pc, #256]	@ (8002758 <HAL_GPIO_Init+0x2c0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d013      	beq.n	8002684 <HAL_GPIO_Init+0x1ec>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a3f      	ldr	r2, [pc, #252]	@ (800275c <HAL_GPIO_Init+0x2c4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00d      	beq.n	8002680 <HAL_GPIO_Init+0x1e8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a3e      	ldr	r2, [pc, #248]	@ (8002760 <HAL_GPIO_Init+0x2c8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <HAL_GPIO_Init+0x1e4>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a3d      	ldr	r2, [pc, #244]	@ (8002764 <HAL_GPIO_Init+0x2cc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_GPIO_Init+0x1e0>
 8002674:	2303      	movs	r3, #3
 8002676:	e006      	b.n	8002686 <HAL_GPIO_Init+0x1ee>
 8002678:	2304      	movs	r3, #4
 800267a:	e004      	b.n	8002686 <HAL_GPIO_Init+0x1ee>
 800267c:	2302      	movs	r3, #2
 800267e:	e002      	b.n	8002686 <HAL_GPIO_Init+0x1ee>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_GPIO_Init+0x1ee>
 8002684:	2300      	movs	r3, #0
 8002686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002688:	f002 0203 	and.w	r2, r2, #3
 800268c:	0092      	lsls	r2, r2, #2
 800268e:	4093      	lsls	r3, r2
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002696:	492f      	ldr	r1, [pc, #188]	@ (8002754 <HAL_GPIO_Init+0x2bc>)
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	3302      	adds	r3, #2
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	492c      	ldr	r1, [pc, #176]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	608b      	str	r3, [r1, #8]
 80026bc:	e006      	b.n	80026cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026be:	4b2a      	ldr	r3, [pc, #168]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	4928      	ldr	r1, [pc, #160]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d006      	beq.n	80026e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026d8:	4b23      	ldr	r3, [pc, #140]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	4922      	ldr	r1, [pc, #136]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60cb      	str	r3, [r1, #12]
 80026e4:	e006      	b.n	80026f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026e6:	4b20      	ldr	r3, [pc, #128]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	491e      	ldr	r1, [pc, #120]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002700:	4b19      	ldr	r3, [pc, #100]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	4918      	ldr	r1, [pc, #96]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800270e:	4b16      	ldr	r3, [pc, #88]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	43db      	mvns	r3, r3
 8002716:	4914      	ldr	r1, [pc, #80]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 8002718:	4013      	ands	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d021      	beq.n	800276c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002728:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	490e      	ldr	r1, [pc, #56]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
 8002734:	e021      	b.n	800277a <HAL_GPIO_Init+0x2e2>
 8002736:	bf00      	nop
 8002738:	10320000 	.word	0x10320000
 800273c:	10310000 	.word	0x10310000
 8002740:	10220000 	.word	0x10220000
 8002744:	10210000 	.word	0x10210000
 8002748:	10120000 	.word	0x10120000
 800274c:	10110000 	.word	0x10110000
 8002750:	40021000 	.word	0x40021000
 8002754:	40010000 	.word	0x40010000
 8002758:	40010800 	.word	0x40010800
 800275c:	40010c00 	.word	0x40010c00
 8002760:	40011000 	.word	0x40011000
 8002764:	40011400 	.word	0x40011400
 8002768:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800276c:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <HAL_GPIO_Init+0x304>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	43db      	mvns	r3, r3
 8002774:	4909      	ldr	r1, [pc, #36]	@ (800279c <HAL_GPIO_Init+0x304>)
 8002776:	4013      	ands	r3, r2
 8002778:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	3301      	adds	r3, #1
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	f47f ae8e 	bne.w	80024ac <HAL_GPIO_Init+0x14>
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	372c      	adds	r7, #44	@ 0x2c
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]
 80027ac:	4613      	mov	r3, r2
 80027ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027b0:	787b      	ldrb	r3, [r7, #1]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b6:	887a      	ldrh	r2, [r7, #2]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027bc:	e003      	b.n	80027c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	041a      	lsls	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	611a      	str	r2, [r3, #16]
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4013      	ands	r3, r2
 80027e8:	041a      	lsls	r2, r3, #16
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43d9      	mvns	r1, r3
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	400b      	ands	r3, r1
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	611a      	str	r2, [r3, #16]
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
	...

08002804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e12b      	b.n	8002a6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe f996 	bl	8000b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2224      	movs	r2, #36	@ 0x24
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002868:	f001 f832 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 800286c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a81      	ldr	r2, [pc, #516]	@ (8002a78 <HAL_I2C_Init+0x274>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d807      	bhi.n	8002888 <HAL_I2C_Init+0x84>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a80      	ldr	r2, [pc, #512]	@ (8002a7c <HAL_I2C_Init+0x278>)
 800287c:	4293      	cmp	r3, r2
 800287e:	bf94      	ite	ls
 8002880:	2301      	movls	r3, #1
 8002882:	2300      	movhi	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	e006      	b.n	8002896 <HAL_I2C_Init+0x92>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a7d      	ldr	r2, [pc, #500]	@ (8002a80 <HAL_I2C_Init+0x27c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	bf94      	ite	ls
 8002890:	2301      	movls	r3, #1
 8002892:	2300      	movhi	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0e7      	b.n	8002a6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4a78      	ldr	r2, [pc, #480]	@ (8002a84 <HAL_I2C_Init+0x280>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0c9b      	lsrs	r3, r3, #18
 80028a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002a78 <HAL_I2C_Init+0x274>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d802      	bhi.n	80028d8 <HAL_I2C_Init+0xd4>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	3301      	adds	r3, #1
 80028d6:	e009      	b.n	80028ec <HAL_I2C_Init+0xe8>
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	4a69      	ldr	r2, [pc, #420]	@ (8002a88 <HAL_I2C_Init+0x284>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	099b      	lsrs	r3, r3, #6
 80028ea:	3301      	adds	r3, #1
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	495c      	ldr	r1, [pc, #368]	@ (8002a78 <HAL_I2C_Init+0x274>)
 8002908:	428b      	cmp	r3, r1
 800290a:	d819      	bhi.n	8002940 <HAL_I2C_Init+0x13c>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1e59      	subs	r1, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	fbb1 f3f3 	udiv	r3, r1, r3
 800291a:	1c59      	adds	r1, r3, #1
 800291c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002920:	400b      	ands	r3, r1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_I2C_Init+0x138>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1e59      	subs	r1, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fbb1 f3f3 	udiv	r3, r1, r3
 8002934:	3301      	adds	r3, #1
 8002936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293a:	e051      	b.n	80029e0 <HAL_I2C_Init+0x1dc>
 800293c:	2304      	movs	r3, #4
 800293e:	e04f      	b.n	80029e0 <HAL_I2C_Init+0x1dc>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d111      	bne.n	800296c <HAL_I2C_Init+0x168>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1e58      	subs	r0, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	440b      	add	r3, r1
 8002956:	fbb0 f3f3 	udiv	r3, r0, r3
 800295a:	3301      	adds	r3, #1
 800295c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e012      	b.n	8002992 <HAL_I2C_Init+0x18e>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1e58      	subs	r0, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	0099      	lsls	r1, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002982:	3301      	adds	r3, #1
 8002984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_Init+0x196>
 8002996:	2301      	movs	r3, #1
 8002998:	e022      	b.n	80029e0 <HAL_I2C_Init+0x1dc>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10e      	bne.n	80029c0 <HAL_I2C_Init+0x1bc>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1e58      	subs	r0, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6859      	ldr	r1, [r3, #4]
 80029aa:	460b      	mov	r3, r1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	440b      	add	r3, r1
 80029b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b4:	3301      	adds	r3, #1
 80029b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029be:	e00f      	b.n	80029e0 <HAL_I2C_Init+0x1dc>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1e58      	subs	r0, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	0099      	lsls	r1, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d6:	3301      	adds	r3, #1
 80029d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	6809      	ldr	r1, [r1, #0]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69da      	ldr	r2, [r3, #28]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6911      	ldr	r1, [r2, #16]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68d2      	ldr	r2, [r2, #12]
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	000186a0 	.word	0x000186a0
 8002a7c:	001e847f 	.word	0x001e847f
 8002a80:	003d08ff 	.word	0x003d08ff
 8002a84:	431bde83 	.word	0x431bde83
 8002a88:	10624dd3 	.word	0x10624dd3

08002a8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	461a      	mov	r2, r3
 8002a98:	460b      	mov	r3, r1
 8002a9a:	817b      	strh	r3, [r7, #10]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aa0:	f7fe fdac 	bl	80015fc <HAL_GetTick>
 8002aa4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	f040 80e0 	bne.w	8002c74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2319      	movs	r3, #25
 8002aba:	2201      	movs	r2, #1
 8002abc:	4970      	ldr	r1, [pc, #448]	@ (8002c80 <HAL_I2C_Master_Transmit+0x1f4>)
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f964 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
 8002acc:	e0d3      	b.n	8002c76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_I2C_Master_Transmit+0x50>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e0cc      	b.n	8002c76 <HAL_I2C_Master_Transmit+0x1ea>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d007      	beq.n	8002b02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0201 	orr.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2221      	movs	r2, #33	@ 0x21
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	893a      	ldrh	r2, [r7, #8]
 8002b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a50      	ldr	r2, [pc, #320]	@ (8002c84 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b44:	8979      	ldrh	r1, [r7, #10]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	6a3a      	ldr	r2, [r7, #32]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f89c 	bl	8002c88 <I2C_MasterRequestWrite>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e08d      	b.n	8002c76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b70:	e066      	b.n	8002c40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	6a39      	ldr	r1, [r7, #32]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fa22 	bl	8002fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00d      	beq.n	8002b9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d107      	bne.n	8002b9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e06b      	b.n	8002c76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	781a      	ldrb	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d11b      	bne.n	8002c14 <HAL_I2C_Master_Transmit+0x188>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d017      	beq.n	8002c14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	781a      	ldrb	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	6a39      	ldr	r1, [r7, #32]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fa19 	bl	8003050 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d107      	bne.n	8002c3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e01a      	b.n	8002c76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d194      	bne.n	8002b72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	e000      	b.n	8002c76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c74:	2302      	movs	r3, #2
  }
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	00100002 	.word	0x00100002
 8002c84:	ffff0000 	.word	0xffff0000

08002c88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	460b      	mov	r3, r1
 8002c96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d006      	beq.n	8002cb2 <I2C_MasterRequestWrite+0x2a>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d003      	beq.n	8002cb2 <I2C_MasterRequestWrite+0x2a>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cb0:	d108      	bne.n	8002cc4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e00b      	b.n	8002cdc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc8:	2b12      	cmp	r3, #18
 8002cca:	d107      	bne.n	8002cdc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f84f 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d02:	d103      	bne.n	8002d0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e035      	b.n	8002d7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d18:	d108      	bne.n	8002d2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d28:	611a      	str	r2, [r3, #16]
 8002d2a:	e01b      	b.n	8002d64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d2c:	897b      	ldrh	r3, [r7, #10]
 8002d2e:	11db      	asrs	r3, r3, #7
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f003 0306 	and.w	r3, r3, #6
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f063 030f 	orn	r3, r3, #15
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	490e      	ldr	r1, [pc, #56]	@ (8002d84 <I2C_MasterRequestWrite+0xfc>)
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f898 	bl	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e010      	b.n	8002d7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4907      	ldr	r1, [pc, #28]	@ (8002d88 <I2C_MasterRequestWrite+0x100>)
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f888 	bl	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	00010008 	.word	0x00010008
 8002d88:	00010002 	.word	0x00010002

08002d8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d9c:	e048      	b.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d044      	beq.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7fe fc29 	bl	80015fc <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d139      	bne.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	0c1b      	lsrs	r3, r3, #16
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d10d      	bne.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	43da      	mvns	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	e00c      	b.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	43da      	mvns	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4013      	ands	r3, r2
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d116      	bne.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e023      	b.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	0c1b      	lsrs	r3, r3, #16
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d10d      	bne.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	43da      	mvns	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4013      	ands	r3, r2
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	e00c      	b.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	43da      	mvns	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4013      	ands	r3, r2
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	461a      	mov	r2, r3
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d093      	beq.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e8e:	e071      	b.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e9e:	d123      	bne.n	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002eb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	f043 0204 	orr.w	r2, r3, #4
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e067      	b.n	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eee:	d041      	beq.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef0:	f7fe fb84 	bl	80015fc <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d302      	bcc.n	8002f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d136      	bne.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d10c      	bne.n	8002f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bf14      	ite	ne
 8002f22:	2301      	movne	r3, #1
 8002f24:	2300      	moveq	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	e00b      	b.n	8002f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	43da      	mvns	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4013      	ands	r3, r2
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf14      	ite	ne
 8002f3c:	2301      	movne	r3, #1
 8002f3e:	2300      	moveq	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d016      	beq.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e021      	b.n	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	0c1b      	lsrs	r3, r3, #16
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d10c      	bne.n	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	43da      	mvns	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e00b      	b.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f47f af6d 	bne.w	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fcc:	e034      	b.n	8003038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f886 	bl	80030e0 <I2C_IsAcknowledgeFailed>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e034      	b.n	8003048 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d028      	beq.n	8003038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7fe fb09 	bl	80015fc <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11d      	bne.n	8003038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003006:	2b80      	cmp	r3, #128	@ 0x80
 8003008:	d016      	beq.n	8003038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e007      	b.n	8003048 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003042:	2b80      	cmp	r3, #128	@ 0x80
 8003044:	d1c3      	bne.n	8002fce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800305c:	e034      	b.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f83e 	bl	80030e0 <I2C_IsAcknowledgeFailed>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e034      	b.n	80030d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d028      	beq.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fe fac1 	bl	80015fc <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d11d      	bne.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b04      	cmp	r3, #4
 8003098:	d016      	beq.n	80030c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e007      	b.n	80030d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d1c3      	bne.n	800305e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f6:	d11b      	bne.n	8003130 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003100:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	f043 0204 	orr.w	r2, r3, #4
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e272      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 8087 	beq.w	800326a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800315c:	4b92      	ldr	r3, [pc, #584]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b04      	cmp	r3, #4
 8003166:	d00c      	beq.n	8003182 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003168:	4b8f      	ldr	r3, [pc, #572]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 030c 	and.w	r3, r3, #12
 8003170:	2b08      	cmp	r3, #8
 8003172:	d112      	bne.n	800319a <HAL_RCC_OscConfig+0x5e>
 8003174:	4b8c      	ldr	r3, [pc, #560]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003180:	d10b      	bne.n	800319a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003182:	4b89      	ldr	r3, [pc, #548]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d06c      	beq.n	8003268 <HAL_RCC_OscConfig+0x12c>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d168      	bne.n	8003268 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e24c      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a2:	d106      	bne.n	80031b2 <HAL_RCC_OscConfig+0x76>
 80031a4:	4b80      	ldr	r3, [pc, #512]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a7f      	ldr	r2, [pc, #508]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	e02e      	b.n	8003210 <HAL_RCC_OscConfig+0xd4>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCC_OscConfig+0x98>
 80031ba:	4b7b      	ldr	r3, [pc, #492]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a7a      	ldr	r2, [pc, #488]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	4b78      	ldr	r3, [pc, #480]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a77      	ldr	r2, [pc, #476]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e01d      	b.n	8003210 <HAL_RCC_OscConfig+0xd4>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0xbc>
 80031de:	4b72      	ldr	r3, [pc, #456]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a71      	ldr	r2, [pc, #452]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4b6f      	ldr	r3, [pc, #444]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a6e      	ldr	r2, [pc, #440]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0xd4>
 80031f8:	4b6b      	ldr	r3, [pc, #428]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a6a      	ldr	r2, [pc, #424]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b68      	ldr	r3, [pc, #416]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a67      	ldr	r2, [pc, #412]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 800320a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800320e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fe f9f0 	bl	80015fc <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003220:	f7fe f9ec 	bl	80015fc <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	@ 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e200      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b5d      	ldr	r3, [pc, #372]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0xe4>
 800323e:	e014      	b.n	800326a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fe f9dc 	bl	80015fc <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003248:	f7fe f9d8 	bl	80015fc <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	@ 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e1ec      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	4b53      	ldr	r3, [pc, #332]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x10c>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d063      	beq.n	800333e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003276:	4b4c      	ldr	r3, [pc, #304]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00b      	beq.n	800329a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003282:	4b49      	ldr	r3, [pc, #292]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b08      	cmp	r3, #8
 800328c:	d11c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x18c>
 800328e:	4b46      	ldr	r3, [pc, #280]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d116      	bne.n	80032c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	4b43      	ldr	r3, [pc, #268]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_RCC_OscConfig+0x176>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e1c0      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b2:	4b3d      	ldr	r3, [pc, #244]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4939      	ldr	r1, [pc, #228]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	e03a      	b.n	800333e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d020      	beq.n	8003312 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d0:	4b36      	ldr	r3, [pc, #216]	@ (80033ac <HAL_RCC_OscConfig+0x270>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fe f991 	bl	80015fc <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032de:	f7fe f98d 	bl	80015fc <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e1a1      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f0:	4b2d      	ldr	r3, [pc, #180]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fc:	4b2a      	ldr	r3, [pc, #168]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4927      	ldr	r1, [pc, #156]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 800330c:	4313      	orrs	r3, r2
 800330e:	600b      	str	r3, [r1, #0]
 8003310:	e015      	b.n	800333e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003312:	4b26      	ldr	r3, [pc, #152]	@ (80033ac <HAL_RCC_OscConfig+0x270>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7fe f970 	bl	80015fc <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003320:	f7fe f96c 	bl	80015fc <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e180      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	4b1d      	ldr	r3, [pc, #116]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d03a      	beq.n	80033c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d019      	beq.n	8003386 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003352:	4b17      	ldr	r3, [pc, #92]	@ (80033b0 <HAL_RCC_OscConfig+0x274>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003358:	f7fe f950 	bl	80015fc <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003360:	f7fe f94c 	bl	80015fc <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e160      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003372:	4b0d      	ldr	r3, [pc, #52]	@ (80033a8 <HAL_RCC_OscConfig+0x26c>)
 8003374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800337e:	2001      	movs	r0, #1
 8003380:	f000 faea 	bl	8003958 <RCC_Delay>
 8003384:	e01c      	b.n	80033c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003386:	4b0a      	ldr	r3, [pc, #40]	@ (80033b0 <HAL_RCC_OscConfig+0x274>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338c:	f7fe f936 	bl	80015fc <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003392:	e00f      	b.n	80033b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003394:	f7fe f932 	bl	80015fc <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d908      	bls.n	80033b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e146      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	42420000 	.word	0x42420000
 80033b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b4:	4b92      	ldr	r3, [pc, #584]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e9      	bne.n	8003394 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80a6 	beq.w	800351a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ce:	2300      	movs	r3, #0
 80033d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d2:	4b8b      	ldr	r3, [pc, #556]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10d      	bne.n	80033fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033de:	4b88      	ldr	r3, [pc, #544]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	4a87      	ldr	r2, [pc, #540]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e8:	61d3      	str	r3, [r2, #28]
 80033ea:	4b85      	ldr	r3, [pc, #532]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fa:	4b82      	ldr	r3, [pc, #520]	@ (8003604 <HAL_RCC_OscConfig+0x4c8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003402:	2b00      	cmp	r3, #0
 8003404:	d118      	bne.n	8003438 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003406:	4b7f      	ldr	r3, [pc, #508]	@ (8003604 <HAL_RCC_OscConfig+0x4c8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a7e      	ldr	r2, [pc, #504]	@ (8003604 <HAL_RCC_OscConfig+0x4c8>)
 800340c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003412:	f7fe f8f3 	bl	80015fc <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341a:	f7fe f8ef 	bl	80015fc <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b64      	cmp	r3, #100	@ 0x64
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e103      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342c:	4b75      	ldr	r3, [pc, #468]	@ (8003604 <HAL_RCC_OscConfig+0x4c8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d106      	bne.n	800344e <HAL_RCC_OscConfig+0x312>
 8003440:	4b6f      	ldr	r3, [pc, #444]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	4a6e      	ldr	r2, [pc, #440]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	6213      	str	r3, [r2, #32]
 800344c:	e02d      	b.n	80034aa <HAL_RCC_OscConfig+0x36e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x334>
 8003456:	4b6a      	ldr	r3, [pc, #424]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	4a69      	ldr	r2, [pc, #420]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	6213      	str	r3, [r2, #32]
 8003462:	4b67      	ldr	r3, [pc, #412]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4a66      	ldr	r2, [pc, #408]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	f023 0304 	bic.w	r3, r3, #4
 800346c:	6213      	str	r3, [r2, #32]
 800346e:	e01c      	b.n	80034aa <HAL_RCC_OscConfig+0x36e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b05      	cmp	r3, #5
 8003476:	d10c      	bne.n	8003492 <HAL_RCC_OscConfig+0x356>
 8003478:	4b61      	ldr	r3, [pc, #388]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4a60      	ldr	r2, [pc, #384]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 800347e:	f043 0304 	orr.w	r3, r3, #4
 8003482:	6213      	str	r3, [r2, #32]
 8003484:	4b5e      	ldr	r3, [pc, #376]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4a5d      	ldr	r2, [pc, #372]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6213      	str	r3, [r2, #32]
 8003490:	e00b      	b.n	80034aa <HAL_RCC_OscConfig+0x36e>
 8003492:	4b5b      	ldr	r3, [pc, #364]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4a5a      	ldr	r2, [pc, #360]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	6213      	str	r3, [r2, #32]
 800349e:	4b58      	ldr	r3, [pc, #352]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	4a57      	ldr	r2, [pc, #348]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	f023 0304 	bic.w	r3, r3, #4
 80034a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d015      	beq.n	80034de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b2:	f7fe f8a3 	bl	80015fc <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fe f89f 	bl	80015fc <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e0b1      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ee      	beq.n	80034ba <HAL_RCC_OscConfig+0x37e>
 80034dc:	e014      	b.n	8003508 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034de:	f7fe f88d 	bl	80015fc <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fe f889 	bl	80015fc <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e09b      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fc:	4b40      	ldr	r3, [pc, #256]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1ee      	bne.n	80034e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d105      	bne.n	800351a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800350e:	4b3c      	ldr	r3, [pc, #240]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	4a3b      	ldr	r2, [pc, #236]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003518:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 8087 	beq.w	8003632 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003524:	4b36      	ldr	r3, [pc, #216]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	2b08      	cmp	r3, #8
 800352e:	d061      	beq.n	80035f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d146      	bne.n	80035c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003538:	4b33      	ldr	r3, [pc, #204]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fe f85d 	bl	80015fc <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003546:	f7fe f859 	bl	80015fc <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e06d      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003558:	4b29      	ldr	r3, [pc, #164]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f0      	bne.n	8003546 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800356c:	d108      	bne.n	8003580 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800356e:	4b24      	ldr	r3, [pc, #144]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	4921      	ldr	r1, [pc, #132]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003580:	4b1f      	ldr	r3, [pc, #124]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a19      	ldr	r1, [r3, #32]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	430b      	orrs	r3, r1
 8003592:	491b      	ldr	r1, [pc, #108]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003598:	4b1b      	ldr	r3, [pc, #108]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359e:	f7fe f82d 	bl	80015fc <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a6:	f7fe f829 	bl	80015fc <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e03d      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035b8:	4b11      	ldr	r3, [pc, #68]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x46a>
 80035c4:	e035      	b.n	8003632 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c6:	4b10      	ldr	r3, [pc, #64]	@ (8003608 <HAL_RCC_OscConfig+0x4cc>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe f816 	bl	80015fc <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fe f812 	bl	80015fc <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e026      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e6:	4b06      	ldr	r3, [pc, #24]	@ (8003600 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x498>
 80035f2:	e01e      	b.n	8003632 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d107      	bne.n	800360c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e019      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
 8003600:	40021000 	.word	0x40021000
 8003604:	40007000 	.word	0x40007000
 8003608:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800360c:	4b0b      	ldr	r3, [pc, #44]	@ (800363c <HAL_RCC_OscConfig+0x500>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	429a      	cmp	r2, r3
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	429a      	cmp	r2, r3
 800362c:	d001      	beq.n	8003632 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000

08003640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0d0      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b6a      	ldr	r3, [pc, #424]	@ (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d910      	bls.n	8003684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b67      	ldr	r3, [pc, #412]	@ (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0207 	bic.w	r2, r3, #7
 800366a:	4965      	ldr	r1, [pc, #404]	@ (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b63      	ldr	r3, [pc, #396]	@ (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0b8      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d020      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800369c:	4b59      	ldr	r3, [pc, #356]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4a58      	ldr	r2, [pc, #352]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b4:	4b53      	ldr	r3, [pc, #332]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4a52      	ldr	r2, [pc, #328]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80036be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c0:	4b50      	ldr	r3, [pc, #320]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	494d      	ldr	r1, [pc, #308]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d040      	beq.n	8003760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	4b47      	ldr	r3, [pc, #284]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d115      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e07f      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d107      	bne.n	800370e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	4b41      	ldr	r3, [pc, #260]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e073      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370e:	4b3d      	ldr	r3, [pc, #244]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e06b      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800371e:	4b39      	ldr	r3, [pc, #228]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f023 0203 	bic.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4936      	ldr	r1, [pc, #216]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003730:	f7fd ff64 	bl	80015fc <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	e00a      	b.n	800374e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003738:	f7fd ff60 	bl	80015fc <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e053      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	4b2d      	ldr	r3, [pc, #180]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 020c 	and.w	r2, r3, #12
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	429a      	cmp	r2, r3
 800375e:	d1eb      	bne.n	8003738 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003760:	4b27      	ldr	r3, [pc, #156]	@ (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d210      	bcs.n	8003790 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b24      	ldr	r3, [pc, #144]	@ (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 0207 	bic.w	r2, r3, #7
 8003776:	4922      	ldr	r1, [pc, #136]	@ (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	4313      	orrs	r3, r2
 800377c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	4b20      	ldr	r3, [pc, #128]	@ (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e032      	b.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800379c:	4b19      	ldr	r3, [pc, #100]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	4916      	ldr	r1, [pc, #88]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ba:	4b12      	ldr	r3, [pc, #72]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	490e      	ldr	r1, [pc, #56]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ce:	f000 f821 	bl	8003814 <HAL_RCC_GetSysClockFreq>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	490a      	ldr	r1, [pc, #40]	@ (8003808 <HAL_RCC_ClockConfig+0x1c8>)
 80037e0:	5ccb      	ldrb	r3, [r1, r3]
 80037e2:	fa22 f303 	lsr.w	r3, r2, r3
 80037e6:	4a09      	ldr	r2, [pc, #36]	@ (800380c <HAL_RCC_ClockConfig+0x1cc>)
 80037e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ea:	4b09      	ldr	r3, [pc, #36]	@ (8003810 <HAL_RCC_ClockConfig+0x1d0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd fe04 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40022000 	.word	0x40022000
 8003804:	40021000 	.word	0x40021000
 8003808:	08008de8 	.word	0x08008de8
 800380c:	20000008 	.word	0x20000008
 8003810:	2000000c 	.word	0x2000000c

08003814 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	2300      	movs	r3, #0
 8003828:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800382e:	4b1e      	ldr	r3, [pc, #120]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b04      	cmp	r3, #4
 800383c:	d002      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x30>
 800383e:	2b08      	cmp	r3, #8
 8003840:	d003      	beq.n	800384a <HAL_RCC_GetSysClockFreq+0x36>
 8003842:	e027      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003844:	4b19      	ldr	r3, [pc, #100]	@ (80038ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003846:	613b      	str	r3, [r7, #16]
      break;
 8003848:	e027      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	0c9b      	lsrs	r3, r3, #18
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	4a17      	ldr	r2, [pc, #92]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003854:	5cd3      	ldrb	r3, [r2, r3]
 8003856:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d010      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003862:	4b11      	ldr	r3, [pc, #68]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	0c5b      	lsrs	r3, r3, #17
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	4a11      	ldr	r2, [pc, #68]	@ (80038b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800386e:	5cd3      	ldrb	r3, [r2, r3]
 8003870:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a0d      	ldr	r2, [pc, #52]	@ (80038ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003876:	fb03 f202 	mul.w	r2, r3, r2
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	e004      	b.n	800388e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a0c      	ldr	r2, [pc, #48]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003888:	fb02 f303 	mul.w	r3, r2, r3
 800388c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	613b      	str	r3, [r7, #16]
      break;
 8003892:	e002      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003894:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003896:	613b      	str	r3, [r7, #16]
      break;
 8003898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800389a:	693b      	ldr	r3, [r7, #16]
}
 800389c:	4618      	mov	r0, r3
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	007a1200 	.word	0x007a1200
 80038b0:	08008e00 	.word	0x08008e00
 80038b4:	08008e10 	.word	0x08008e10
 80038b8:	003d0900 	.word	0x003d0900

080038bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c0:	4b02      	ldr	r3, [pc, #8]	@ (80038cc <HAL_RCC_GetHCLKFreq+0x10>)
 80038c2:	681b      	ldr	r3, [r3, #0]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	20000008 	.word	0x20000008

080038d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038d4:	f7ff fff2 	bl	80038bc <HAL_RCC_GetHCLKFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4903      	ldr	r1, [pc, #12]	@ (80038f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000
 80038f4:	08008df8 	.word	0x08008df8

080038f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	220f      	movs	r2, #15
 8003906:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003908:	4b11      	ldr	r3, [pc, #68]	@ (8003950 <HAL_RCC_GetClockConfig+0x58>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 0203 	and.w	r2, r3, #3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003914:	4b0e      	ldr	r3, [pc, #56]	@ (8003950 <HAL_RCC_GetClockConfig+0x58>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003920:	4b0b      	ldr	r3, [pc, #44]	@ (8003950 <HAL_RCC_GetClockConfig+0x58>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800392c:	4b08      	ldr	r3, [pc, #32]	@ (8003950 <HAL_RCC_GetClockConfig+0x58>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	08db      	lsrs	r3, r3, #3
 8003932:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_RCC_GetClockConfig+0x5c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0207 	and.w	r2, r3, #7
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	40021000 	.word	0x40021000
 8003954:	40022000 	.word	0x40022000

08003958 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003960:	4b0a      	ldr	r3, [pc, #40]	@ (800398c <RCC_Delay+0x34>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a0a      	ldr	r2, [pc, #40]	@ (8003990 <RCC_Delay+0x38>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	0a5b      	lsrs	r3, r3, #9
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	fb02 f303 	mul.w	r3, r2, r3
 8003972:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003974:	bf00      	nop
  }
  while (Delay --);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1e5a      	subs	r2, r3, #1
 800397a:	60fa      	str	r2, [r7, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f9      	bne.n	8003974 <RCC_Delay+0x1c>
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr
 800398c:	20000008 	.word	0x20000008
 8003990:	10624dd3 	.word	0x10624dd3

08003994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e041      	b.n	8003a2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f839 	bl	8003a32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3304      	adds	r3, #4
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f000 f99c 	bl	8003d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d001      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e03a      	b.n	8003ad2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a18      	ldr	r2, [pc, #96]	@ (8003adc <HAL_TIM_Base_Start_IT+0x98>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00e      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x58>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a86:	d009      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x58>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ae0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x58>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a13      	ldr	r2, [pc, #76]	@ (8003ae4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d111      	bne.n	8003ac0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d010      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abe:	e007      	b.n	8003ad0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800

08003ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d020      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01b      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f06f 0202 	mvn.w	r2, #2
 8003b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8d1 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003b38:	e005      	b.n	8003b46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8c4 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f8d3 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d020      	beq.n	8003b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01b      	beq.n	8003b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0204 	mvn.w	r2, #4
 8003b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f8ab 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f89e 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8ad 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d020      	beq.n	8003be4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01b      	beq.n	8003be4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0208 	mvn.w	r2, #8
 8003bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2204      	movs	r2, #4
 8003bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f885 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f878 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f887 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d020      	beq.n	8003c30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01b      	beq.n	8003c30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0210 	mvn.w	r2, #16
 8003c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2208      	movs	r2, #8
 8003c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f85f 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003c1c:	e005      	b.n	8003c2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f852 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f861 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00c      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0201 	mvn.w	r2, #1
 8003c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fd f826 	bl	8000ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00c      	beq.n	8003c78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f8c3 	bl	8003dfe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00c      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f831 	bl	8003cfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00c      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0220 	mvn.w	r2, #32
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f896 	bl	8003dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a2f      	ldr	r2, [pc, #188]	@ (8003de0 <TIM_Base_SetConfig+0xd0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00b      	beq.n	8003d40 <TIM_Base_SetConfig+0x30>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d2e:	d007      	beq.n	8003d40 <TIM_Base_SetConfig+0x30>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a2c      	ldr	r2, [pc, #176]	@ (8003de4 <TIM_Base_SetConfig+0xd4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d003      	beq.n	8003d40 <TIM_Base_SetConfig+0x30>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003de8 <TIM_Base_SetConfig+0xd8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d108      	bne.n	8003d52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a22      	ldr	r2, [pc, #136]	@ (8003de0 <TIM_Base_SetConfig+0xd0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00b      	beq.n	8003d72 <TIM_Base_SetConfig+0x62>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d60:	d007      	beq.n	8003d72 <TIM_Base_SetConfig+0x62>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1f      	ldr	r2, [pc, #124]	@ (8003de4 <TIM_Base_SetConfig+0xd4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <TIM_Base_SetConfig+0x62>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003de8 <TIM_Base_SetConfig+0xd8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a0d      	ldr	r2, [pc, #52]	@ (8003de0 <TIM_Base_SetConfig+0xd0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d103      	bne.n	8003db8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f023 0201 	bic.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	611a      	str	r2, [r3, #16]
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr
 8003de0:	40012c00 	.word	0x40012c00
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800

08003dec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr

08003dfe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr

08003e10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e22:	2b84      	cmp	r3, #132	@ 0x84
 8003e24:	d005      	beq.n	8003e32 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3303      	adds	r3, #3
 8003e30:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e32:	68fb      	ldr	r3, [r7, #12]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	4770      	bx	lr

08003e3e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e42:	f000 faf7 	bl	8004434 <vTaskStartScheduler>
  
  return osOK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4e:	b089      	sub	sp, #36	@ 0x24
 8003e50:	af04      	add	r7, sp, #16
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d020      	beq.n	8003ea0 <osThreadCreate+0x54>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01c      	beq.n	8003ea0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685c      	ldr	r4, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691e      	ldr	r6, [r3, #16]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff ffc9 	bl	8003e10 <makeFreeRtosPriority>
 8003e7e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e88:	9202      	str	r2, [sp, #8]
 8003e8a:	9301      	str	r3, [sp, #4]
 8003e8c:	9100      	str	r1, [sp, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	4632      	mov	r2, r6
 8003e92:	4629      	mov	r1, r5
 8003e94:	4620      	mov	r0, r4
 8003e96:	f000 f8e8 	bl	800406a <xTaskCreateStatic>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	e01c      	b.n	8003eda <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685c      	ldr	r4, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eac:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ffab 	bl	8003e10 <makeFreeRtosPriority>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	f107 030c 	add.w	r3, r7, #12
 8003ec0:	9301      	str	r3, [sp, #4]
 8003ec2:	9200      	str	r2, [sp, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4632      	mov	r2, r6
 8003ec8:	4629      	mov	r1, r5
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f000 f92d 	bl	800412a <xTaskCreate>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d001      	beq.n	8003eda <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003eda:	68fb      	ldr	r3, [r7, #12]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ee4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <osDelay+0x16>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	e000      	b.n	8003efc <osDelay+0x18>
 8003efa:	2301      	movs	r3, #1
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fa63 	bl	80043c8 <vTaskDelay>
  
  return osOK;
 8003f02:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f103 0208 	add.w	r2, r3, #8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f04f 32ff 	mov.w	r2, #4294967295
 8003f24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f103 0208 	add.w	r2, r3, #8
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f103 0208 	add.w	r2, r3, #8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	601a      	str	r2, [r3, #0]
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr

08003fa8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d103      	bne.n	8003fc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	e00c      	b.n	8003fe2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3308      	adds	r3, #8
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	e002      	b.n	8003fd6 <vListInsert+0x2e>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d2f6      	bcs.n	8003fd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
}
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6892      	ldr	r2, [r2, #8]
 800402e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6852      	ldr	r2, [r2, #4]
 8004038:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d103      	bne.n	800404c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	1e5a      	subs	r2, r3, #1
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr

0800406a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800406a:	b580      	push	{r7, lr}
 800406c:	b08e      	sub	sp, #56	@ 0x38
 800406e:	af04      	add	r7, sp, #16
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10b      	bne.n	8004096 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004090:	bf00      	nop
 8004092:	bf00      	nop
 8004094:	e7fd      	b.n	8004092 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10b      	bne.n	80040b4 <xTaskCreateStatic+0x4a>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	61fb      	str	r3, [r7, #28]
}
 80040ae:	bf00      	nop
 80040b0:	bf00      	nop
 80040b2:	e7fd      	b.n	80040b0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040b4:	23a0      	movs	r3, #160	@ 0xa0
 80040b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80040bc:	d00b      	beq.n	80040d6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	61bb      	str	r3, [r7, #24]
}
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	e7fd      	b.n	80040d2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01e      	beq.n	800411c <xTaskCreateStatic+0xb2>
 80040de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01b      	beq.n	800411c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040ec:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040f6:	2300      	movs	r3, #0
 80040f8:	9303      	str	r3, [sp, #12]
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	9302      	str	r3, [sp, #8]
 80040fe:	f107 0314 	add.w	r3, r7, #20
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f850 	bl	80041b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004114:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004116:	f000 f8ed 	bl	80042f4 <prvAddNewTaskToReadyList>
 800411a:	e001      	b.n	8004120 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004120:	697b      	ldr	r3, [r7, #20]
	}
 8004122:	4618      	mov	r0, r3
 8004124:	3728      	adds	r7, #40	@ 0x28
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800412a:	b580      	push	{r7, lr}
 800412c:	b08c      	sub	sp, #48	@ 0x30
 800412e:	af04      	add	r7, sp, #16
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	4613      	mov	r3, r2
 8004138:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fe9e 	bl	8004e80 <pvPortMalloc>
 8004144:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00e      	beq.n	800416a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800414c:	20a0      	movs	r0, #160	@ 0xa0
 800414e:	f000 fe97 	bl	8004e80 <pvPortMalloc>
 8004152:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004160:	e005      	b.n	800416e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004162:	6978      	ldr	r0, [r7, #20]
 8004164:	f000 ff5a 	bl	800501c <vPortFree>
 8004168:	e001      	b.n	800416e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d017      	beq.n	80041a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800417c:	88fa      	ldrh	r2, [r7, #6]
 800417e:	2300      	movs	r3, #0
 8004180:	9303      	str	r3, [sp, #12]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	9302      	str	r3, [sp, #8]
 8004186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f80e 	bl	80041b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004198:	69f8      	ldr	r0, [r7, #28]
 800419a:	f000 f8ab 	bl	80042f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800419e:	2301      	movs	r3, #1
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	e002      	b.n	80041aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041a4:	f04f 33ff 	mov.w	r3, #4294967295
 80041a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041aa:	69bb      	ldr	r3, [r7, #24]
	}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3720      	adds	r7, #32
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041cc:	3b01      	subs	r3, #1
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f023 0307 	bic.w	r3, r3, #7
 80041da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00b      	beq.n	80041fe <prvInitialiseNewTask+0x4a>
	__asm volatile
 80041e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	617b      	str	r3, [r7, #20]
}
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	e7fd      	b.n	80041fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01f      	beq.n	8004244 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	e012      	b.n	8004230 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	7819      	ldrb	r1, [r3, #0]
 8004212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	3334      	adds	r3, #52	@ 0x34
 800421a:	460a      	mov	r2, r1
 800421c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d006      	beq.n	8004238 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	3301      	adds	r3, #1
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b0f      	cmp	r3, #15
 8004234:	d9e9      	bls.n	800420a <prvInitialiseNewTask+0x56>
 8004236:	e000      	b.n	800423a <prvInitialiseNewTask+0x86>
			{
				break;
 8004238:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800423a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004242:	e003      	b.n	800424c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800424c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424e:	2b06      	cmp	r3, #6
 8004250:	d901      	bls.n	8004256 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004252:	2306      	movs	r3, #6
 8004254:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800425a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004260:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004264:	2200      	movs	r2, #0
 8004266:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426a:	3304      	adds	r3, #4
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fe6c 	bl	8003f4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004274:	3318      	adds	r3, #24
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fe67 	bl	8003f4a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800427c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004280:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004284:	f1c3 0207 	rsb	r2, r3, #7
 8004288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004290:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004294:	2200      	movs	r2, #0
 8004296:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	2200      	movs	r2, #0
 800429e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	334c      	adds	r3, #76	@ 0x4c
 80042a6:	224c      	movs	r2, #76	@ 0x4c
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 ffd4 	bl	8005258 <memset>
 80042b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b2:	4a0d      	ldr	r2, [pc, #52]	@ (80042e8 <prvInitialiseNewTask+0x134>)
 80042b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80042b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b8:	4a0c      	ldr	r2, [pc, #48]	@ (80042ec <prvInitialiseNewTask+0x138>)
 80042ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80042bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042be:	4a0c      	ldr	r2, [pc, #48]	@ (80042f0 <prvInitialiseNewTask+0x13c>)
 80042c0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	68f9      	ldr	r1, [r7, #12]
 80042c6:	69b8      	ldr	r0, [r7, #24]
 80042c8:	f000 fc28 	bl	8004b1c <pxPortInitialiseStack>
 80042cc:	4602      	mov	r2, r0
 80042ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042de:	bf00      	nop
 80042e0:	3720      	adds	r7, #32
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20001434 	.word	0x20001434
 80042ec:	2000149c 	.word	0x2000149c
 80042f0:	20001504 	.word	0x20001504

080042f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042fc:	f000 fcfe 	bl	8004cfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004300:	4b2a      	ldr	r3, [pc, #168]	@ (80043ac <prvAddNewTaskToReadyList+0xb8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	4a29      	ldr	r2, [pc, #164]	@ (80043ac <prvAddNewTaskToReadyList+0xb8>)
 8004308:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800430a:	4b29      	ldr	r3, [pc, #164]	@ (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004312:	4a27      	ldr	r2, [pc, #156]	@ (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004318:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <prvAddNewTaskToReadyList+0xb8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d110      	bne.n	8004342 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004320:	f000 fad2 	bl	80048c8 <prvInitialiseTaskLists>
 8004324:	e00d      	b.n	8004342 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004326:	4b23      	ldr	r3, [pc, #140]	@ (80043b4 <prvAddNewTaskToReadyList+0xc0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800432e:	4b20      	ldr	r3, [pc, #128]	@ (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004338:	429a      	cmp	r2, r3
 800433a:	d802      	bhi.n	8004342 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800433c:	4a1c      	ldr	r2, [pc, #112]	@ (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004342:	4b1d      	ldr	r3, [pc, #116]	@ (80043b8 <prvAddNewTaskToReadyList+0xc4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3301      	adds	r3, #1
 8004348:	4a1b      	ldr	r2, [pc, #108]	@ (80043b8 <prvAddNewTaskToReadyList+0xc4>)
 800434a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004350:	2201      	movs	r2, #1
 8004352:	409a      	lsls	r2, r3
 8004354:	4b19      	ldr	r3, [pc, #100]	@ (80043bc <prvAddNewTaskToReadyList+0xc8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4313      	orrs	r3, r2
 800435a:	4a18      	ldr	r2, [pc, #96]	@ (80043bc <prvAddNewTaskToReadyList+0xc8>)
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4a15      	ldr	r2, [pc, #84]	@ (80043c0 <prvAddNewTaskToReadyList+0xcc>)
 800436c:	441a      	add	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3304      	adds	r3, #4
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f7ff fdf4 	bl	8003f62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800437a:	f000 fcef 	bl	8004d5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800437e:	4b0d      	ldr	r3, [pc, #52]	@ (80043b4 <prvAddNewTaskToReadyList+0xc0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00e      	beq.n	80043a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004386:	4b0a      	ldr	r3, [pc, #40]	@ (80043b0 <prvAddNewTaskToReadyList+0xbc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004390:	429a      	cmp	r2, r3
 8004392:	d207      	bcs.n	80043a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004394:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <prvAddNewTaskToReadyList+0xd0>)
 8004396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	200007e0 	.word	0x200007e0
 80043b0:	200006e0 	.word	0x200006e0
 80043b4:	200007ec 	.word	0x200007ec
 80043b8:	200007fc 	.word	0x200007fc
 80043bc:	200007e8 	.word	0x200007e8
 80043c0:	200006e4 	.word	0x200006e4
 80043c4:	e000ed04 	.word	0xe000ed04

080043c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d018      	beq.n	800440c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043da:	4b14      	ldr	r3, [pc, #80]	@ (800442c <vTaskDelay+0x64>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <vTaskDelay+0x32>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	60bb      	str	r3, [r7, #8]
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop
 80043f8:	e7fd      	b.n	80043f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043fa:	f000 f885 	bl	8004508 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043fe:	2100      	movs	r1, #0
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fb25 	bl	8004a50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004406:	f000 f88d 	bl	8004524 <xTaskResumeAll>
 800440a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d107      	bne.n	8004422 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004412:	4b07      	ldr	r3, [pc, #28]	@ (8004430 <vTaskDelay+0x68>)
 8004414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004422:	bf00      	nop
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000808 	.word	0x20000808
 8004430:	e000ed04 	.word	0xe000ed04

08004434 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08a      	sub	sp, #40	@ 0x28
 8004438:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800443e:	2300      	movs	r3, #0
 8004440:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004442:	463a      	mov	r2, r7
 8004444:	1d39      	adds	r1, r7, #4
 8004446:	f107 0308 	add.w	r3, r7, #8
 800444a:	4618      	mov	r0, r3
 800444c:	f7fb ffc2 	bl	80003d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004450:	6839      	ldr	r1, [r7, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	9202      	str	r2, [sp, #8]
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	2300      	movs	r3, #0
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	2300      	movs	r3, #0
 8004460:	460a      	mov	r2, r1
 8004462:	4921      	ldr	r1, [pc, #132]	@ (80044e8 <vTaskStartScheduler+0xb4>)
 8004464:	4821      	ldr	r0, [pc, #132]	@ (80044ec <vTaskStartScheduler+0xb8>)
 8004466:	f7ff fe00 	bl	800406a <xTaskCreateStatic>
 800446a:	4603      	mov	r3, r0
 800446c:	4a20      	ldr	r2, [pc, #128]	@ (80044f0 <vTaskStartScheduler+0xbc>)
 800446e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004470:	4b1f      	ldr	r3, [pc, #124]	@ (80044f0 <vTaskStartScheduler+0xbc>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004478:	2301      	movs	r3, #1
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e001      	b.n	8004482 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d11b      	bne.n	80044c0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	613b      	str	r3, [r7, #16]
}
 800449a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800449c:	4b15      	ldr	r3, [pc, #84]	@ (80044f4 <vTaskStartScheduler+0xc0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	334c      	adds	r3, #76	@ 0x4c
 80044a2:	4a15      	ldr	r2, [pc, #84]	@ (80044f8 <vTaskStartScheduler+0xc4>)
 80044a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044a6:	4b15      	ldr	r3, [pc, #84]	@ (80044fc <vTaskStartScheduler+0xc8>)
 80044a8:	f04f 32ff 	mov.w	r2, #4294967295
 80044ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044ae:	4b14      	ldr	r3, [pc, #80]	@ (8004500 <vTaskStartScheduler+0xcc>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044b4:	4b13      	ldr	r3, [pc, #76]	@ (8004504 <vTaskStartScheduler+0xd0>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044ba:	f000 fbad 	bl	8004c18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044be:	e00f      	b.n	80044e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d10b      	bne.n	80044e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	60fb      	str	r3, [r7, #12]
}
 80044da:	bf00      	nop
 80044dc:	bf00      	nop
 80044de:	e7fd      	b.n	80044dc <vTaskStartScheduler+0xa8>
}
 80044e0:	bf00      	nop
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	08005484 	.word	0x08005484
 80044ec:	08004899 	.word	0x08004899
 80044f0:	20000804 	.word	0x20000804
 80044f4:	200006e0 	.word	0x200006e0
 80044f8:	20000018 	.word	0x20000018
 80044fc:	20000800 	.word	0x20000800
 8004500:	200007ec 	.word	0x200007ec
 8004504:	200007e4 	.word	0x200007e4

08004508 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800450c:	4b04      	ldr	r3, [pc, #16]	@ (8004520 <vTaskSuspendAll+0x18>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3301      	adds	r3, #1
 8004512:	4a03      	ldr	r2, [pc, #12]	@ (8004520 <vTaskSuspendAll+0x18>)
 8004514:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004516:	bf00      	nop
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20000808 	.word	0x20000808

08004524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800452e:	2300      	movs	r3, #0
 8004530:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004532:	4b42      	ldr	r3, [pc, #264]	@ (800463c <xTaskResumeAll+0x118>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10b      	bne.n	8004552 <xTaskResumeAll+0x2e>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	603b      	str	r3, [r7, #0]
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	e7fd      	b.n	800454e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004552:	f000 fbd3 	bl	8004cfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004556:	4b39      	ldr	r3, [pc, #228]	@ (800463c <xTaskResumeAll+0x118>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3b01      	subs	r3, #1
 800455c:	4a37      	ldr	r2, [pc, #220]	@ (800463c <xTaskResumeAll+0x118>)
 800455e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004560:	4b36      	ldr	r3, [pc, #216]	@ (800463c <xTaskResumeAll+0x118>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d161      	bne.n	800462c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004568:	4b35      	ldr	r3, [pc, #212]	@ (8004640 <xTaskResumeAll+0x11c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d05d      	beq.n	800462c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004570:	e02e      	b.n	80045d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004572:	4b34      	ldr	r3, [pc, #208]	@ (8004644 <xTaskResumeAll+0x120>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3318      	adds	r3, #24
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fd4a 	bl	8004018 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3304      	adds	r3, #4
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fd45 	bl	8004018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004592:	2201      	movs	r2, #1
 8004594:	409a      	lsls	r2, r3
 8004596:	4b2c      	ldr	r3, [pc, #176]	@ (8004648 <xTaskResumeAll+0x124>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4313      	orrs	r3, r2
 800459c:	4a2a      	ldr	r2, [pc, #168]	@ (8004648 <xTaskResumeAll+0x124>)
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4a27      	ldr	r2, [pc, #156]	@ (800464c <xTaskResumeAll+0x128>)
 80045ae:	441a      	add	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f7ff fcd3 	bl	8003f62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c0:	4b23      	ldr	r3, [pc, #140]	@ (8004650 <xTaskResumeAll+0x12c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80045ca:	4b22      	ldr	r3, [pc, #136]	@ (8004654 <xTaskResumeAll+0x130>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004644 <xTaskResumeAll+0x120>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1cc      	bne.n	8004572 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045de:	f000 fa17 	bl	8004a10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004658 <xTaskResumeAll+0x134>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d010      	beq.n	8004610 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045ee:	f000 f837 	bl	8004660 <xTaskIncrementTick>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80045f8:	4b16      	ldr	r3, [pc, #88]	@ (8004654 <xTaskResumeAll+0x130>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3b01      	subs	r3, #1
 8004602:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f1      	bne.n	80045ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800460a:	4b13      	ldr	r3, [pc, #76]	@ (8004658 <xTaskResumeAll+0x134>)
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004610:	4b10      	ldr	r3, [pc, #64]	@ (8004654 <xTaskResumeAll+0x130>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004618:	2301      	movs	r3, #1
 800461a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800461c:	4b0f      	ldr	r3, [pc, #60]	@ (800465c <xTaskResumeAll+0x138>)
 800461e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800462c:	f000 fb96 	bl	8004d5c <vPortExitCritical>

	return xAlreadyYielded;
 8004630:	68bb      	ldr	r3, [r7, #8]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000808 	.word	0x20000808
 8004640:	200007e0 	.word	0x200007e0
 8004644:	200007a0 	.word	0x200007a0
 8004648:	200007e8 	.word	0x200007e8
 800464c:	200006e4 	.word	0x200006e4
 8004650:	200006e0 	.word	0x200006e0
 8004654:	200007f4 	.word	0x200007f4
 8004658:	200007f0 	.word	0x200007f0
 800465c:	e000ed04 	.word	0xe000ed04

08004660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800466a:	4b4f      	ldr	r3, [pc, #316]	@ (80047a8 <xTaskIncrementTick+0x148>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	f040 808f 	bne.w	8004792 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004674:	4b4d      	ldr	r3, [pc, #308]	@ (80047ac <xTaskIncrementTick+0x14c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3301      	adds	r3, #1
 800467a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800467c:	4a4b      	ldr	r2, [pc, #300]	@ (80047ac <xTaskIncrementTick+0x14c>)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d121      	bne.n	80046cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004688:	4b49      	ldr	r3, [pc, #292]	@ (80047b0 <xTaskIncrementTick+0x150>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	603b      	str	r3, [r7, #0]
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	e7fd      	b.n	80046a6 <xTaskIncrementTick+0x46>
 80046aa:	4b41      	ldr	r3, [pc, #260]	@ (80047b0 <xTaskIncrementTick+0x150>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	4b40      	ldr	r3, [pc, #256]	@ (80047b4 <xTaskIncrementTick+0x154>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a3e      	ldr	r2, [pc, #248]	@ (80047b0 <xTaskIncrementTick+0x150>)
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	4a3e      	ldr	r2, [pc, #248]	@ (80047b4 <xTaskIncrementTick+0x154>)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b3e      	ldr	r3, [pc, #248]	@ (80047b8 <xTaskIncrementTick+0x158>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3301      	adds	r3, #1
 80046c4:	4a3c      	ldr	r2, [pc, #240]	@ (80047b8 <xTaskIncrementTick+0x158>)
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	f000 f9a2 	bl	8004a10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046cc:	4b3b      	ldr	r3, [pc, #236]	@ (80047bc <xTaskIncrementTick+0x15c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d348      	bcc.n	8004768 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046d6:	4b36      	ldr	r3, [pc, #216]	@ (80047b0 <xTaskIncrementTick+0x150>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046e0:	4b36      	ldr	r3, [pc, #216]	@ (80047bc <xTaskIncrementTick+0x15c>)
 80046e2:	f04f 32ff 	mov.w	r2, #4294967295
 80046e6:	601a      	str	r2, [r3, #0]
					break;
 80046e8:	e03e      	b.n	8004768 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ea:	4b31      	ldr	r3, [pc, #196]	@ (80047b0 <xTaskIncrementTick+0x150>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d203      	bcs.n	800470a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004702:	4a2e      	ldr	r2, [pc, #184]	@ (80047bc <xTaskIncrementTick+0x15c>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004708:	e02e      	b.n	8004768 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	3304      	adds	r3, #4
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fc82 	bl	8004018 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	3318      	adds	r3, #24
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fc79 	bl	8004018 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472a:	2201      	movs	r2, #1
 800472c:	409a      	lsls	r2, r3
 800472e:	4b24      	ldr	r3, [pc, #144]	@ (80047c0 <xTaskIncrementTick+0x160>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4313      	orrs	r3, r2
 8004734:	4a22      	ldr	r2, [pc, #136]	@ (80047c0 <xTaskIncrementTick+0x160>)
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4a1f      	ldr	r2, [pc, #124]	@ (80047c4 <xTaskIncrementTick+0x164>)
 8004746:	441a      	add	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7ff fc07 	bl	8003f62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004758:	4b1b      	ldr	r3, [pc, #108]	@ (80047c8 <xTaskIncrementTick+0x168>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475e:	429a      	cmp	r2, r3
 8004760:	d3b9      	bcc.n	80046d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004762:	2301      	movs	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004766:	e7b6      	b.n	80046d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004768:	4b17      	ldr	r3, [pc, #92]	@ (80047c8 <xTaskIncrementTick+0x168>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476e:	4915      	ldr	r1, [pc, #84]	@ (80047c4 <xTaskIncrementTick+0x164>)
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d901      	bls.n	8004784 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004780:	2301      	movs	r3, #1
 8004782:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004784:	4b11      	ldr	r3, [pc, #68]	@ (80047cc <xTaskIncrementTick+0x16c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e004      	b.n	800479c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004792:	4b0f      	ldr	r3, [pc, #60]	@ (80047d0 <xTaskIncrementTick+0x170>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3301      	adds	r3, #1
 8004798:	4a0d      	ldr	r2, [pc, #52]	@ (80047d0 <xTaskIncrementTick+0x170>)
 800479a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800479c:	697b      	ldr	r3, [r7, #20]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000808 	.word	0x20000808
 80047ac:	200007e4 	.word	0x200007e4
 80047b0:	20000798 	.word	0x20000798
 80047b4:	2000079c 	.word	0x2000079c
 80047b8:	200007f8 	.word	0x200007f8
 80047bc:	20000800 	.word	0x20000800
 80047c0:	200007e8 	.word	0x200007e8
 80047c4:	200006e4 	.word	0x200006e4
 80047c8:	200006e0 	.word	0x200006e0
 80047cc:	200007f4 	.word	0x200007f4
 80047d0:	200007f0 	.word	0x200007f0

080047d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047da:	4b29      	ldr	r3, [pc, #164]	@ (8004880 <vTaskSwitchContext+0xac>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047e2:	4b28      	ldr	r3, [pc, #160]	@ (8004884 <vTaskSwitchContext+0xb0>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047e8:	e045      	b.n	8004876 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80047ea:	4b26      	ldr	r3, [pc, #152]	@ (8004884 <vTaskSwitchContext+0xb0>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f0:	4b25      	ldr	r3, [pc, #148]	@ (8004888 <vTaskSwitchContext+0xb4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047fe:	7afb      	ldrb	r3, [r7, #11]
 8004800:	f1c3 031f 	rsb	r3, r3, #31
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	4921      	ldr	r1, [pc, #132]	@ (800488c <vTaskSwitchContext+0xb8>)
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <vTaskSwitchContext+0x5e>
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	607b      	str	r3, [r7, #4]
}
 800482c:	bf00      	nop
 800482e:	bf00      	nop
 8004830:	e7fd      	b.n	800482e <vTaskSwitchContext+0x5a>
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4a13      	ldr	r2, [pc, #76]	@ (800488c <vTaskSwitchContext+0xb8>)
 800483e:	4413      	add	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	3308      	adds	r3, #8
 8004854:	429a      	cmp	r2, r3
 8004856:	d104      	bne.n	8004862 <vTaskSwitchContext+0x8e>
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	605a      	str	r2, [r3, #4]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a09      	ldr	r2, [pc, #36]	@ (8004890 <vTaskSwitchContext+0xbc>)
 800486a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800486c:	4b08      	ldr	r3, [pc, #32]	@ (8004890 <vTaskSwitchContext+0xbc>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	334c      	adds	r3, #76	@ 0x4c
 8004872:	4a08      	ldr	r2, [pc, #32]	@ (8004894 <vTaskSwitchContext+0xc0>)
 8004874:	6013      	str	r3, [r2, #0]
}
 8004876:	bf00      	nop
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr
 8004880:	20000808 	.word	0x20000808
 8004884:	200007f4 	.word	0x200007f4
 8004888:	200007e8 	.word	0x200007e8
 800488c:	200006e4 	.word	0x200006e4
 8004890:	200006e0 	.word	0x200006e0
 8004894:	20000018 	.word	0x20000018

08004898 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048a0:	f000 f852 	bl	8004948 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048a4:	4b06      	ldr	r3, [pc, #24]	@ (80048c0 <prvIdleTask+0x28>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d9f9      	bls.n	80048a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048ac:	4b05      	ldr	r3, [pc, #20]	@ (80048c4 <prvIdleTask+0x2c>)
 80048ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048bc:	e7f0      	b.n	80048a0 <prvIdleTask+0x8>
 80048be:	bf00      	nop
 80048c0:	200006e4 	.word	0x200006e4
 80048c4:	e000ed04 	.word	0xe000ed04

080048c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048ce:	2300      	movs	r3, #0
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	e00c      	b.n	80048ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4a12      	ldr	r2, [pc, #72]	@ (8004928 <prvInitialiseTaskLists+0x60>)
 80048e0:	4413      	add	r3, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fb12 	bl	8003f0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3301      	adds	r3, #1
 80048ec:	607b      	str	r3, [r7, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b06      	cmp	r3, #6
 80048f2:	d9ef      	bls.n	80048d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048f4:	480d      	ldr	r0, [pc, #52]	@ (800492c <prvInitialiseTaskLists+0x64>)
 80048f6:	f7ff fb09 	bl	8003f0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048fa:	480d      	ldr	r0, [pc, #52]	@ (8004930 <prvInitialiseTaskLists+0x68>)
 80048fc:	f7ff fb06 	bl	8003f0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004900:	480c      	ldr	r0, [pc, #48]	@ (8004934 <prvInitialiseTaskLists+0x6c>)
 8004902:	f7ff fb03 	bl	8003f0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004906:	480c      	ldr	r0, [pc, #48]	@ (8004938 <prvInitialiseTaskLists+0x70>)
 8004908:	f7ff fb00 	bl	8003f0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800490c:	480b      	ldr	r0, [pc, #44]	@ (800493c <prvInitialiseTaskLists+0x74>)
 800490e:	f7ff fafd 	bl	8003f0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004912:	4b0b      	ldr	r3, [pc, #44]	@ (8004940 <prvInitialiseTaskLists+0x78>)
 8004914:	4a05      	ldr	r2, [pc, #20]	@ (800492c <prvInitialiseTaskLists+0x64>)
 8004916:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004918:	4b0a      	ldr	r3, [pc, #40]	@ (8004944 <prvInitialiseTaskLists+0x7c>)
 800491a:	4a05      	ldr	r2, [pc, #20]	@ (8004930 <prvInitialiseTaskLists+0x68>)
 800491c:	601a      	str	r2, [r3, #0]
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	200006e4 	.word	0x200006e4
 800492c:	20000770 	.word	0x20000770
 8004930:	20000784 	.word	0x20000784
 8004934:	200007a0 	.word	0x200007a0
 8004938:	200007b4 	.word	0x200007b4
 800493c:	200007cc 	.word	0x200007cc
 8004940:	20000798 	.word	0x20000798
 8004944:	2000079c 	.word	0x2000079c

08004948 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800494e:	e019      	b.n	8004984 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004950:	f000 f9d4 	bl	8004cfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004954:	4b10      	ldr	r3, [pc, #64]	@ (8004998 <prvCheckTasksWaitingTermination+0x50>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3304      	adds	r3, #4
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fb59 	bl	8004018 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004966:	4b0d      	ldr	r3, [pc, #52]	@ (800499c <prvCheckTasksWaitingTermination+0x54>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3b01      	subs	r3, #1
 800496c:	4a0b      	ldr	r2, [pc, #44]	@ (800499c <prvCheckTasksWaitingTermination+0x54>)
 800496e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004970:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <prvCheckTasksWaitingTermination+0x58>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3b01      	subs	r3, #1
 8004976:	4a0a      	ldr	r2, [pc, #40]	@ (80049a0 <prvCheckTasksWaitingTermination+0x58>)
 8004978:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800497a:	f000 f9ef 	bl	8004d5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f810 	bl	80049a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004984:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <prvCheckTasksWaitingTermination+0x58>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e1      	bne.n	8004950 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	200007b4 	.word	0x200007b4
 800499c:	200007e0 	.word	0x200007e0
 80049a0:	200007c8 	.word	0x200007c8

080049a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	334c      	adds	r3, #76	@ 0x4c
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fc59 	bl	8005268 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d108      	bne.n	80049d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fb29 	bl	800501c <vPortFree>
				vPortFree( pxTCB );
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fb26 	bl	800501c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049d0:	e019      	b.n	8004a06 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d103      	bne.n	80049e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fb1d 	bl	800501c <vPortFree>
	}
 80049e2:	e010      	b.n	8004a06 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d00b      	beq.n	8004a06 <prvDeleteTCB+0x62>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	60fb      	str	r3, [r7, #12]
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	e7fd      	b.n	8004a02 <prvDeleteTCB+0x5e>
	}
 8004a06:	bf00      	nop
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a16:	4b0c      	ldr	r3, [pc, #48]	@ (8004a48 <prvResetNextTaskUnblockTime+0x38>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d104      	bne.n	8004a2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a20:	4b0a      	ldr	r3, [pc, #40]	@ (8004a4c <prvResetNextTaskUnblockTime+0x3c>)
 8004a22:	f04f 32ff 	mov.w	r2, #4294967295
 8004a26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a28:	e008      	b.n	8004a3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a2a:	4b07      	ldr	r3, [pc, #28]	@ (8004a48 <prvResetNextTaskUnblockTime+0x38>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4a04      	ldr	r2, [pc, #16]	@ (8004a4c <prvResetNextTaskUnblockTime+0x3c>)
 8004a3a:	6013      	str	r3, [r2, #0]
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bc80      	pop	{r7}
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	20000798 	.word	0x20000798
 8004a4c:	20000800 	.word	0x20000800

08004a50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a5a:	4b29      	ldr	r3, [pc, #164]	@ (8004b00 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a60:	4b28      	ldr	r3, [pc, #160]	@ (8004b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3304      	adds	r3, #4
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff fad6 	bl	8004018 <uxListRemove>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a72:	4b24      	ldr	r3, [pc, #144]	@ (8004b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	2201      	movs	r2, #1
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	43da      	mvns	r2, r3
 8004a80:	4b21      	ldr	r3, [pc, #132]	@ (8004b08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4013      	ands	r3, r2
 8004a86:	4a20      	ldr	r2, [pc, #128]	@ (8004b08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a90:	d10a      	bne.n	8004aa8 <prvAddCurrentTaskToDelayedList+0x58>
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d007      	beq.n	8004aa8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a98:	4b1a      	ldr	r3, [pc, #104]	@ (8004b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	481a      	ldr	r0, [pc, #104]	@ (8004b0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004aa2:	f7ff fa5e 	bl	8003f62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004aa6:	e026      	b.n	8004af6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4413      	add	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ab0:	4b14      	ldr	r3, [pc, #80]	@ (8004b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d209      	bcs.n	8004ad4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ac0:	4b13      	ldr	r3, [pc, #76]	@ (8004b10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f7ff fa6b 	bl	8003fa8 <vListInsert>
}
 8004ad2:	e010      	b.n	8004af6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	3304      	adds	r3, #4
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f7ff fa61 	bl	8003fa8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8004b18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d202      	bcs.n	8004af6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004af0:	4a09      	ldr	r2, [pc, #36]	@ (8004b18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	6013      	str	r3, [r2, #0]
}
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	200007e4 	.word	0x200007e4
 8004b04:	200006e0 	.word	0x200006e0
 8004b08:	200007e8 	.word	0x200007e8
 8004b0c:	200007cc 	.word	0x200007cc
 8004b10:	2000079c 	.word	0x2000079c
 8004b14:	20000798 	.word	0x20000798
 8004b18:	20000800 	.word	0x20000800

08004b1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3b04      	subs	r3, #4
 8004b2c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3b04      	subs	r3, #4
 8004b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f023 0201 	bic.w	r2, r3, #1
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3b04      	subs	r3, #4
 8004b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b4c:	4a08      	ldr	r2, [pc, #32]	@ (8004b70 <pxPortInitialiseStack+0x54>)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3b14      	subs	r3, #20
 8004b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3b20      	subs	r3, #32
 8004b62:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b64:	68fb      	ldr	r3, [r7, #12]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	08004b75 	.word	0x08004b75

08004b74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b7e:	4b12      	ldr	r3, [pc, #72]	@ (8004bc8 <prvTaskExitError+0x54>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b86:	d00b      	beq.n	8004ba0 <prvTaskExitError+0x2c>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	60fb      	str	r3, [r7, #12]
}
 8004b9a:	bf00      	nop
 8004b9c:	bf00      	nop
 8004b9e:	e7fd      	b.n	8004b9c <prvTaskExitError+0x28>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	60bb      	str	r3, [r7, #8]
}
 8004bb2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bb4:	bf00      	nop
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0fc      	beq.n	8004bb6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bbc:	bf00      	nop
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr
 8004bc8:	20000014 	.word	0x20000014
 8004bcc:	00000000 	.word	0x00000000

08004bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bd0:	4b07      	ldr	r3, [pc, #28]	@ (8004bf0 <pxCurrentTCBConst2>)
 8004bd2:	6819      	ldr	r1, [r3, #0]
 8004bd4:	6808      	ldr	r0, [r1, #0]
 8004bd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004bda:	f380 8809 	msr	PSP, r0
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f380 8811 	msr	BASEPRI, r0
 8004bea:	f04e 0e0d 	orr.w	lr, lr, #13
 8004bee:	4770      	bx	lr

08004bf0 <pxCurrentTCBConst2>:
 8004bf0:	200006e0 	.word	0x200006e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop

08004bf8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004bf8:	4806      	ldr	r0, [pc, #24]	@ (8004c14 <prvPortStartFirstTask+0x1c>)
 8004bfa:	6800      	ldr	r0, [r0, #0]
 8004bfc:	6800      	ldr	r0, [r0, #0]
 8004bfe:	f380 8808 	msr	MSP, r0
 8004c02:	b662      	cpsie	i
 8004c04:	b661      	cpsie	f
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	df00      	svc	0
 8004c10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c12:	bf00      	nop
 8004c14:	e000ed08 	.word	0xe000ed08

08004c18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c1e:	4b32      	ldr	r3, [pc, #200]	@ (8004ce8 <xPortStartScheduler+0xd0>)
 8004c20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	22ff      	movs	r2, #255	@ 0xff
 8004c2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	4b2a      	ldr	r3, [pc, #168]	@ (8004cec <xPortStartScheduler+0xd4>)
 8004c44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c46:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf0 <xPortStartScheduler+0xd8>)
 8004c48:	2207      	movs	r2, #7
 8004c4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c4c:	e009      	b.n	8004c62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004c4e:	4b28      	ldr	r3, [pc, #160]	@ (8004cf0 <xPortStartScheduler+0xd8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	4a26      	ldr	r2, [pc, #152]	@ (8004cf0 <xPortStartScheduler+0xd8>)
 8004c56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c6a:	2b80      	cmp	r3, #128	@ 0x80
 8004c6c:	d0ef      	beq.n	8004c4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c6e:	4b20      	ldr	r3, [pc, #128]	@ (8004cf0 <xPortStartScheduler+0xd8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f1c3 0307 	rsb	r3, r3, #7
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d00b      	beq.n	8004c92 <xPortStartScheduler+0x7a>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	60bb      	str	r3, [r7, #8]
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	e7fd      	b.n	8004c8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c92:	4b17      	ldr	r3, [pc, #92]	@ (8004cf0 <xPortStartScheduler+0xd8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	021b      	lsls	r3, r3, #8
 8004c98:	4a15      	ldr	r2, [pc, #84]	@ (8004cf0 <xPortStartScheduler+0xd8>)
 8004c9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c9c:	4b14      	ldr	r3, [pc, #80]	@ (8004cf0 <xPortStartScheduler+0xd8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ca4:	4a12      	ldr	r2, [pc, #72]	@ (8004cf0 <xPortStartScheduler+0xd8>)
 8004ca6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cb0:	4b10      	ldr	r3, [pc, #64]	@ (8004cf4 <xPortStartScheduler+0xdc>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a0f      	ldr	r2, [pc, #60]	@ (8004cf4 <xPortStartScheduler+0xdc>)
 8004cb6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf4 <xPortStartScheduler+0xdc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf4 <xPortStartScheduler+0xdc>)
 8004cc2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004cc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cc8:	f000 f8b8 	bl	8004e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf8 <xPortStartScheduler+0xe0>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cd2:	f7ff ff91 	bl	8004bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cd6:	f7ff fd7d 	bl	80047d4 <vTaskSwitchContext>
	prvTaskExitError();
 8004cda:	f7ff ff4b 	bl	8004b74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	e000e400 	.word	0xe000e400
 8004cec:	2000080c 	.word	0x2000080c
 8004cf0:	20000810 	.word	0x20000810
 8004cf4:	e000ed20 	.word	0xe000ed20
 8004cf8:	20000014 	.word	0x20000014

08004cfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	607b      	str	r3, [r7, #4]
}
 8004d14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d16:	4b0f      	ldr	r3, [pc, #60]	@ (8004d54 <vPortEnterCritical+0x58>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8004d54 <vPortEnterCritical+0x58>)
 8004d1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d20:	4b0c      	ldr	r3, [pc, #48]	@ (8004d54 <vPortEnterCritical+0x58>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d110      	bne.n	8004d4a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d28:	4b0b      	ldr	r3, [pc, #44]	@ (8004d58 <vPortEnterCritical+0x5c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00b      	beq.n	8004d4a <vPortEnterCritical+0x4e>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	603b      	str	r3, [r7, #0]
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop
 8004d48:	e7fd      	b.n	8004d46 <vPortEnterCritical+0x4a>
	}
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	20000014 	.word	0x20000014
 8004d58:	e000ed04 	.word	0xe000ed04

08004d5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d62:	4b12      	ldr	r3, [pc, #72]	@ (8004dac <vPortExitCritical+0x50>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <vPortExitCritical+0x26>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	607b      	str	r3, [r7, #4]
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	e7fd      	b.n	8004d7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d82:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <vPortExitCritical+0x50>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	4a08      	ldr	r2, [pc, #32]	@ (8004dac <vPortExitCritical+0x50>)
 8004d8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d8c:	4b07      	ldr	r3, [pc, #28]	@ (8004dac <vPortExitCritical+0x50>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d105      	bne.n	8004da0 <vPortExitCritical+0x44>
 8004d94:	2300      	movs	r3, #0
 8004d96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000014 	.word	0x20000014

08004db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004db0:	f3ef 8009 	mrs	r0, PSP
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	4b0d      	ldr	r3, [pc, #52]	@ (8004df0 <pxCurrentTCBConst>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004dc0:	6010      	str	r0, [r2, #0]
 8004dc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004dc6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004dca:	f380 8811 	msr	BASEPRI, r0
 8004dce:	f7ff fd01 	bl	80047d4 <vTaskSwitchContext>
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	f380 8811 	msr	BASEPRI, r0
 8004dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004dde:	6819      	ldr	r1, [r3, #0]
 8004de0:	6808      	ldr	r0, [r1, #0]
 8004de2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004de6:	f380 8809 	msr	PSP, r0
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	4770      	bx	lr

08004df0 <pxCurrentTCBConst>:
 8004df0:	200006e0 	.word	0x200006e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop

08004df8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	607b      	str	r3, [r7, #4]
}
 8004e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e12:	f7ff fc25 	bl	8004660 <xTaskIncrementTick>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <SysTick_Handler+0x40>)
 8004e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	2300      	movs	r3, #0
 8004e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f383 8811 	msr	BASEPRI, r3
}
 8004e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	e000ed04 	.word	0xe000ed04

08004e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e40:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <vPortSetupTimerInterrupt+0x30>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e46:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <vPortSetupTimerInterrupt+0x34>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e4c:	4b09      	ldr	r3, [pc, #36]	@ (8004e74 <vPortSetupTimerInterrupt+0x38>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a09      	ldr	r2, [pc, #36]	@ (8004e78 <vPortSetupTimerInterrupt+0x3c>)
 8004e52:	fba2 2303 	umull	r2, r3, r2, r3
 8004e56:	099b      	lsrs	r3, r3, #6
 8004e58:	4a08      	ldr	r2, [pc, #32]	@ (8004e7c <vPortSetupTimerInterrupt+0x40>)
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e5e:	4b03      	ldr	r3, [pc, #12]	@ (8004e6c <vPortSetupTimerInterrupt+0x30>)
 8004e60:	2207      	movs	r2, #7
 8004e62:	601a      	str	r2, [r3, #0]
}
 8004e64:	bf00      	nop
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr
 8004e6c:	e000e010 	.word	0xe000e010
 8004e70:	e000e018 	.word	0xe000e018
 8004e74:	20000008 	.word	0x20000008
 8004e78:	10624dd3 	.word	0x10624dd3
 8004e7c:	e000e014 	.word	0xe000e014

08004e80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08a      	sub	sp, #40	@ 0x28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e8c:	f7ff fb3c 	bl	8004508 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e90:	4b5c      	ldr	r3, [pc, #368]	@ (8005004 <pvPortMalloc+0x184>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e98:	f000 f924 	bl	80050e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e9c:	4b5a      	ldr	r3, [pc, #360]	@ (8005008 <pvPortMalloc+0x188>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f040 8095 	bne.w	8004fd4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01e      	beq.n	8004eee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d015      	beq.n	8004eee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f023 0307 	bic.w	r3, r3, #7
 8004ec8:	3308      	adds	r3, #8
 8004eca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <pvPortMalloc+0x6e>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	617b      	str	r3, [r7, #20]
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	e7fd      	b.n	8004eea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d06f      	beq.n	8004fd4 <pvPortMalloc+0x154>
 8004ef4:	4b45      	ldr	r3, [pc, #276]	@ (800500c <pvPortMalloc+0x18c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d86a      	bhi.n	8004fd4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004efe:	4b44      	ldr	r3, [pc, #272]	@ (8005010 <pvPortMalloc+0x190>)
 8004f00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f02:	4b43      	ldr	r3, [pc, #268]	@ (8005010 <pvPortMalloc+0x190>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f08:	e004      	b.n	8004f14 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d903      	bls.n	8004f26 <pvPortMalloc+0xa6>
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f1      	bne.n	8004f0a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f26:	4b37      	ldr	r3, [pc, #220]	@ (8005004 <pvPortMalloc+0x184>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d051      	beq.n	8004fd4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2208      	movs	r2, #8
 8004f36:	4413      	add	r3, r2
 8004f38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	1ad2      	subs	r2, r2, r3
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d920      	bls.n	8004f94 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4413      	add	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <pvPortMalloc+0xfc>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	613b      	str	r3, [r7, #16]
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	e7fd      	b.n	8004f78 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	1ad2      	subs	r2, r2, r3
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f8e:	69b8      	ldr	r0, [r7, #24]
 8004f90:	f000 f90a 	bl	80051a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f94:	4b1d      	ldr	r3, [pc, #116]	@ (800500c <pvPortMalloc+0x18c>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800500c <pvPortMalloc+0x18c>)
 8004fa0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800500c <pvPortMalloc+0x18c>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8005014 <pvPortMalloc+0x194>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d203      	bcs.n	8004fb6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fae:	4b17      	ldr	r3, [pc, #92]	@ (800500c <pvPortMalloc+0x18c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a18      	ldr	r2, [pc, #96]	@ (8005014 <pvPortMalloc+0x194>)
 8004fb4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	4b13      	ldr	r3, [pc, #76]	@ (8005008 <pvPortMalloc+0x188>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004fca:	4b13      	ldr	r3, [pc, #76]	@ (8005018 <pvPortMalloc+0x198>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	4a11      	ldr	r2, [pc, #68]	@ (8005018 <pvPortMalloc+0x198>)
 8004fd2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fd4:	f7ff faa6 	bl	8004524 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00b      	beq.n	8004ffa <pvPortMalloc+0x17a>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	60fb      	str	r3, [r7, #12]
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop
 8004ff8:	e7fd      	b.n	8004ff6 <pvPortMalloc+0x176>
	return pvReturn;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3728      	adds	r7, #40	@ 0x28
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	2000141c 	.word	0x2000141c
 8005008:	20001430 	.word	0x20001430
 800500c:	20001420 	.word	0x20001420
 8005010:	20001414 	.word	0x20001414
 8005014:	20001424 	.word	0x20001424
 8005018:	20001428 	.word	0x20001428

0800501c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d04f      	beq.n	80050ce <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800502e:	2308      	movs	r3, #8
 8005030:	425b      	negs	r3, r3
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4413      	add	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	4b25      	ldr	r3, [pc, #148]	@ (80050d8 <vPortFree+0xbc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4013      	ands	r3, r2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <vPortFree+0x46>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	60fb      	str	r3, [r7, #12]
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	e7fd      	b.n	800505e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00b      	beq.n	8005082 <vPortFree+0x66>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	60bb      	str	r3, [r7, #8]
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	e7fd      	b.n	800507e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	4b14      	ldr	r3, [pc, #80]	@ (80050d8 <vPortFree+0xbc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01e      	beq.n	80050ce <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d11a      	bne.n	80050ce <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	4b0e      	ldr	r3, [pc, #56]	@ (80050d8 <vPortFree+0xbc>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	401a      	ands	r2, r3
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050a8:	f7ff fa2e 	bl	8004508 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	4b0a      	ldr	r3, [pc, #40]	@ (80050dc <vPortFree+0xc0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4413      	add	r3, r2
 80050b6:	4a09      	ldr	r2, [pc, #36]	@ (80050dc <vPortFree+0xc0>)
 80050b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050ba:	6938      	ldr	r0, [r7, #16]
 80050bc:	f000 f874 	bl	80051a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80050c0:	4b07      	ldr	r3, [pc, #28]	@ (80050e0 <vPortFree+0xc4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	4a06      	ldr	r2, [pc, #24]	@ (80050e0 <vPortFree+0xc4>)
 80050c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80050ca:	f7ff fa2b 	bl	8004524 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050ce:	bf00      	nop
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20001430 	.word	0x20001430
 80050dc:	20001420 	.word	0x20001420
 80050e0:	2000142c 	.word	0x2000142c

080050e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050ea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80050ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050f0:	4b27      	ldr	r3, [pc, #156]	@ (8005190 <prvHeapInit+0xac>)
 80050f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00c      	beq.n	8005118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3307      	adds	r3, #7
 8005102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0307 	bic.w	r3, r3, #7
 800510a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	4a1f      	ldr	r2, [pc, #124]	@ (8005190 <prvHeapInit+0xac>)
 8005114:	4413      	add	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800511c:	4a1d      	ldr	r2, [pc, #116]	@ (8005194 <prvHeapInit+0xb0>)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005122:	4b1c      	ldr	r3, [pc, #112]	@ (8005194 <prvHeapInit+0xb0>)
 8005124:	2200      	movs	r2, #0
 8005126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	4413      	add	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005130:	2208      	movs	r2, #8
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0307 	bic.w	r3, r3, #7
 800513e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4a15      	ldr	r2, [pc, #84]	@ (8005198 <prvHeapInit+0xb4>)
 8005144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005146:	4b14      	ldr	r3, [pc, #80]	@ (8005198 <prvHeapInit+0xb4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2200      	movs	r2, #0
 800514c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800514e:	4b12      	ldr	r3, [pc, #72]	@ (8005198 <prvHeapInit+0xb4>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	1ad2      	subs	r2, r2, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005164:	4b0c      	ldr	r3, [pc, #48]	@ (8005198 <prvHeapInit+0xb4>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a0a      	ldr	r2, [pc, #40]	@ (800519c <prvHeapInit+0xb8>)
 8005172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	4a09      	ldr	r2, [pc, #36]	@ (80051a0 <prvHeapInit+0xbc>)
 800517a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800517c:	4b09      	ldr	r3, [pc, #36]	@ (80051a4 <prvHeapInit+0xc0>)
 800517e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005182:	601a      	str	r2, [r3, #0]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	20000814 	.word	0x20000814
 8005194:	20001414 	.word	0x20001414
 8005198:	2000141c 	.word	0x2000141c
 800519c:	20001424 	.word	0x20001424
 80051a0:	20001420 	.word	0x20001420
 80051a4:	20001430 	.word	0x20001430

080051a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051b0:	4b27      	ldr	r3, [pc, #156]	@ (8005250 <prvInsertBlockIntoFreeList+0xa8>)
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	e002      	b.n	80051bc <prvInsertBlockIntoFreeList+0x14>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d8f7      	bhi.n	80051b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	4413      	add	r3, r2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d108      	bne.n	80051ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	441a      	add	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	441a      	add	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d118      	bne.n	8005230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b14      	ldr	r3, [pc, #80]	@ (8005254 <prvInsertBlockIntoFreeList+0xac>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d00d      	beq.n	8005226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	441a      	add	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e008      	b.n	8005238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005226:	4b0b      	ldr	r3, [pc, #44]	@ (8005254 <prvInsertBlockIntoFreeList+0xac>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e003      	b.n	8005238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	429a      	cmp	r2, r3
 800523e:	d002      	beq.n	8005246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr
 8005250:	20001414 	.word	0x20001414
 8005254:	2000141c 	.word	0x2000141c

08005258 <memset>:
 8005258:	4603      	mov	r3, r0
 800525a:	4402      	add	r2, r0
 800525c:	4293      	cmp	r3, r2
 800525e:	d100      	bne.n	8005262 <memset+0xa>
 8005260:	4770      	bx	lr
 8005262:	f803 1b01 	strb.w	r1, [r3], #1
 8005266:	e7f9      	b.n	800525c <memset+0x4>

08005268 <_reclaim_reent>:
 8005268:	4b29      	ldr	r3, [pc, #164]	@ (8005310 <_reclaim_reent+0xa8>)
 800526a:	b570      	push	{r4, r5, r6, lr}
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4604      	mov	r4, r0
 8005270:	4283      	cmp	r3, r0
 8005272:	d04b      	beq.n	800530c <_reclaim_reent+0xa4>
 8005274:	69c3      	ldr	r3, [r0, #28]
 8005276:	b1ab      	cbz	r3, 80052a4 <_reclaim_reent+0x3c>
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	b16b      	cbz	r3, 8005298 <_reclaim_reent+0x30>
 800527c:	2500      	movs	r5, #0
 800527e:	69e3      	ldr	r3, [r4, #28]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	5959      	ldr	r1, [r3, r5]
 8005284:	2900      	cmp	r1, #0
 8005286:	d13b      	bne.n	8005300 <_reclaim_reent+0x98>
 8005288:	3504      	adds	r5, #4
 800528a:	2d80      	cmp	r5, #128	@ 0x80
 800528c:	d1f7      	bne.n	800527e <_reclaim_reent+0x16>
 800528e:	69e3      	ldr	r3, [r4, #28]
 8005290:	4620      	mov	r0, r4
 8005292:	68d9      	ldr	r1, [r3, #12]
 8005294:	f000 f864 	bl	8005360 <_free_r>
 8005298:	69e3      	ldr	r3, [r4, #28]
 800529a:	6819      	ldr	r1, [r3, #0]
 800529c:	b111      	cbz	r1, 80052a4 <_reclaim_reent+0x3c>
 800529e:	4620      	mov	r0, r4
 80052a0:	f000 f85e 	bl	8005360 <_free_r>
 80052a4:	6961      	ldr	r1, [r4, #20]
 80052a6:	b111      	cbz	r1, 80052ae <_reclaim_reent+0x46>
 80052a8:	4620      	mov	r0, r4
 80052aa:	f000 f859 	bl	8005360 <_free_r>
 80052ae:	69e1      	ldr	r1, [r4, #28]
 80052b0:	b111      	cbz	r1, 80052b8 <_reclaim_reent+0x50>
 80052b2:	4620      	mov	r0, r4
 80052b4:	f000 f854 	bl	8005360 <_free_r>
 80052b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80052ba:	b111      	cbz	r1, 80052c2 <_reclaim_reent+0x5a>
 80052bc:	4620      	mov	r0, r4
 80052be:	f000 f84f 	bl	8005360 <_free_r>
 80052c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052c4:	b111      	cbz	r1, 80052cc <_reclaim_reent+0x64>
 80052c6:	4620      	mov	r0, r4
 80052c8:	f000 f84a 	bl	8005360 <_free_r>
 80052cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80052ce:	b111      	cbz	r1, 80052d6 <_reclaim_reent+0x6e>
 80052d0:	4620      	mov	r0, r4
 80052d2:	f000 f845 	bl	8005360 <_free_r>
 80052d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80052d8:	b111      	cbz	r1, 80052e0 <_reclaim_reent+0x78>
 80052da:	4620      	mov	r0, r4
 80052dc:	f000 f840 	bl	8005360 <_free_r>
 80052e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80052e2:	b111      	cbz	r1, 80052ea <_reclaim_reent+0x82>
 80052e4:	4620      	mov	r0, r4
 80052e6:	f000 f83b 	bl	8005360 <_free_r>
 80052ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80052ec:	b111      	cbz	r1, 80052f4 <_reclaim_reent+0x8c>
 80052ee:	4620      	mov	r0, r4
 80052f0:	f000 f836 	bl	8005360 <_free_r>
 80052f4:	6a23      	ldr	r3, [r4, #32]
 80052f6:	b14b      	cbz	r3, 800530c <_reclaim_reent+0xa4>
 80052f8:	4620      	mov	r0, r4
 80052fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80052fe:	4718      	bx	r3
 8005300:	680e      	ldr	r6, [r1, #0]
 8005302:	4620      	mov	r0, r4
 8005304:	f000 f82c 	bl	8005360 <_free_r>
 8005308:	4631      	mov	r1, r6
 800530a:	e7bb      	b.n	8005284 <_reclaim_reent+0x1c>
 800530c:	bd70      	pop	{r4, r5, r6, pc}
 800530e:	bf00      	nop
 8005310:	20000018 	.word	0x20000018

08005314 <__libc_init_array>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	2600      	movs	r6, #0
 8005318:	4d0c      	ldr	r5, [pc, #48]	@ (800534c <__libc_init_array+0x38>)
 800531a:	4c0d      	ldr	r4, [pc, #52]	@ (8005350 <__libc_init_array+0x3c>)
 800531c:	1b64      	subs	r4, r4, r5
 800531e:	10a4      	asrs	r4, r4, #2
 8005320:	42a6      	cmp	r6, r4
 8005322:	d109      	bne.n	8005338 <__libc_init_array+0x24>
 8005324:	f000 f870 	bl	8005408 <_init>
 8005328:	2600      	movs	r6, #0
 800532a:	4d0a      	ldr	r5, [pc, #40]	@ (8005354 <__libc_init_array+0x40>)
 800532c:	4c0a      	ldr	r4, [pc, #40]	@ (8005358 <__libc_init_array+0x44>)
 800532e:	1b64      	subs	r4, r4, r5
 8005330:	10a4      	asrs	r4, r4, #2
 8005332:	42a6      	cmp	r6, r4
 8005334:	d105      	bne.n	8005342 <__libc_init_array+0x2e>
 8005336:	bd70      	pop	{r4, r5, r6, pc}
 8005338:	f855 3b04 	ldr.w	r3, [r5], #4
 800533c:	4798      	blx	r3
 800533e:	3601      	adds	r6, #1
 8005340:	e7ee      	b.n	8005320 <__libc_init_array+0xc>
 8005342:	f855 3b04 	ldr.w	r3, [r5], #4
 8005346:	4798      	blx	r3
 8005348:	3601      	adds	r6, #1
 800534a:	e7f2      	b.n	8005332 <__libc_init_array+0x1e>
 800534c:	08008e14 	.word	0x08008e14
 8005350:	08008e14 	.word	0x08008e14
 8005354:	08008e14 	.word	0x08008e14
 8005358:	08008e18 	.word	0x08008e18

0800535c <__retarget_lock_acquire_recursive>:
 800535c:	4770      	bx	lr

0800535e <__retarget_lock_release_recursive>:
 800535e:	4770      	bx	lr

08005360 <_free_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4605      	mov	r5, r0
 8005364:	2900      	cmp	r1, #0
 8005366:	d040      	beq.n	80053ea <_free_r+0x8a>
 8005368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800536c:	1f0c      	subs	r4, r1, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	bfb8      	it	lt
 8005372:	18e4      	addlt	r4, r4, r3
 8005374:	f000 f83c 	bl	80053f0 <__malloc_lock>
 8005378:	4a1c      	ldr	r2, [pc, #112]	@ (80053ec <_free_r+0x8c>)
 800537a:	6813      	ldr	r3, [r2, #0]
 800537c:	b933      	cbnz	r3, 800538c <_free_r+0x2c>
 800537e:	6063      	str	r3, [r4, #4]
 8005380:	6014      	str	r4, [r2, #0]
 8005382:	4628      	mov	r0, r5
 8005384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005388:	f000 b838 	b.w	80053fc <__malloc_unlock>
 800538c:	42a3      	cmp	r3, r4
 800538e:	d908      	bls.n	80053a2 <_free_r+0x42>
 8005390:	6820      	ldr	r0, [r4, #0]
 8005392:	1821      	adds	r1, r4, r0
 8005394:	428b      	cmp	r3, r1
 8005396:	bf01      	itttt	eq
 8005398:	6819      	ldreq	r1, [r3, #0]
 800539a:	685b      	ldreq	r3, [r3, #4]
 800539c:	1809      	addeq	r1, r1, r0
 800539e:	6021      	streq	r1, [r4, #0]
 80053a0:	e7ed      	b.n	800537e <_free_r+0x1e>
 80053a2:	461a      	mov	r2, r3
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	b10b      	cbz	r3, 80053ac <_free_r+0x4c>
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	d9fa      	bls.n	80053a2 <_free_r+0x42>
 80053ac:	6811      	ldr	r1, [r2, #0]
 80053ae:	1850      	adds	r0, r2, r1
 80053b0:	42a0      	cmp	r0, r4
 80053b2:	d10b      	bne.n	80053cc <_free_r+0x6c>
 80053b4:	6820      	ldr	r0, [r4, #0]
 80053b6:	4401      	add	r1, r0
 80053b8:	1850      	adds	r0, r2, r1
 80053ba:	4283      	cmp	r3, r0
 80053bc:	6011      	str	r1, [r2, #0]
 80053be:	d1e0      	bne.n	8005382 <_free_r+0x22>
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4408      	add	r0, r1
 80053c6:	6010      	str	r0, [r2, #0]
 80053c8:	6053      	str	r3, [r2, #4]
 80053ca:	e7da      	b.n	8005382 <_free_r+0x22>
 80053cc:	d902      	bls.n	80053d4 <_free_r+0x74>
 80053ce:	230c      	movs	r3, #12
 80053d0:	602b      	str	r3, [r5, #0]
 80053d2:	e7d6      	b.n	8005382 <_free_r+0x22>
 80053d4:	6820      	ldr	r0, [r4, #0]
 80053d6:	1821      	adds	r1, r4, r0
 80053d8:	428b      	cmp	r3, r1
 80053da:	bf01      	itttt	eq
 80053dc:	6819      	ldreq	r1, [r3, #0]
 80053de:	685b      	ldreq	r3, [r3, #4]
 80053e0:	1809      	addeq	r1, r1, r0
 80053e2:	6021      	streq	r1, [r4, #0]
 80053e4:	6063      	str	r3, [r4, #4]
 80053e6:	6054      	str	r4, [r2, #4]
 80053e8:	e7cb      	b.n	8005382 <_free_r+0x22>
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	20001570 	.word	0x20001570

080053f0 <__malloc_lock>:
 80053f0:	4801      	ldr	r0, [pc, #4]	@ (80053f8 <__malloc_lock+0x8>)
 80053f2:	f7ff bfb3 	b.w	800535c <__retarget_lock_acquire_recursive>
 80053f6:	bf00      	nop
 80053f8:	2000156c 	.word	0x2000156c

080053fc <__malloc_unlock>:
 80053fc:	4801      	ldr	r0, [pc, #4]	@ (8005404 <__malloc_unlock+0x8>)
 80053fe:	f7ff bfae 	b.w	800535e <__retarget_lock_release_recursive>
 8005402:	bf00      	nop
 8005404:	2000156c 	.word	0x2000156c

08005408 <_init>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	bf00      	nop
 800540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540e:	bc08      	pop	{r3}
 8005410:	469e      	mov	lr, r3
 8005412:	4770      	bx	lr

08005414 <_fini>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr
